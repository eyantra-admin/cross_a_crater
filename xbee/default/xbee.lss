
xbee.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000016e  00800200  00004b4e  00004be2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004b4e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f6  0080036e  0080036e  00004d50  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00004d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000051e  00000000  00000000  00004d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001287  00000000  00000000  0000528e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000281  00000000  00000000  00006515  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001e6d  00000000  00000000  00006796  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003d0  00000000  00000000  00008604  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000540  00000000  00000000  000089d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <__vector_5>
      18:	0c 94 e7 0f 	jmp	0x1fce	; 0x1fce <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 e1 15 	jmp	0x2bc2	; 0x2bc2 <__vector_25>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee e4       	ldi	r30, 0x4E	; 78
      fc:	fb e4       	ldi	r31, 0x4B	; 75
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ae 36       	cpi	r26, 0x6E	; 110
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	14 e0       	ldi	r17, 0x04	; 4
     110:	ae e6       	ldi	r26, 0x6E	; 110
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a4 36       	cpi	r26, 0x64	; 100
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <main>
     122:	0c 94 a5 25 	jmp	0x4b4a	; 0x4b4a <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_port_config>:
unsigned int thousand;
unsigned int million;

//Function to configure LCD port
void lcd_port_config (void)
{
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     132:	a7 e2       	ldi	r26, 0x27	; 39
     134:	b0 e0       	ldi	r27, 0x00	; 0
     136:	e7 e2       	ldi	r30, 0x27	; 39
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	80 81       	ld	r24, Z
     13c:	87 6f       	ori	r24, 0xF7	; 247
     13e:	8c 93       	st	X, r24
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     140:	a8 e2       	ldi	r26, 0x28	; 40
     142:	b0 e0       	ldi	r27, 0x00	; 0
     144:	e8 e2       	ldi	r30, 0x28	; 40
     146:	f0 e0       	ldi	r31, 0x00	; 0
     148:	80 81       	ld	r24, Z
     14a:	80 78       	andi	r24, 0x80	; 128
     14c:	8c 93       	st	X, r24
}
     14e:	cf 91       	pop	r28
     150:	df 91       	pop	r29
     152:	08 95       	ret

00000154 <lcd_set_4bit>:



//Function to Reset LCD
void lcd_set_4bit()
{
     154:	0f 93       	push	r16
     156:	1f 93       	push	r17
     158:	df 93       	push	r29
     15a:	cf 93       	push	r28
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
     160:	c0 57       	subi	r28, 0x70	; 112
     162:	d0 40       	sbci	r29, 0x00	; 0
     164:	0f b6       	in	r0, 0x3f	; 63
     166:	f8 94       	cli
     168:	de bf       	out	0x3e, r29	; 62
     16a:	0f be       	out	0x3f, r0	; 63
     16c:	cd bf       	out	0x3d, r28	; 61
     16e:	fe 01       	movw	r30, r28
     170:	e3 59       	subi	r30, 0x93	; 147
     172:	ff 4f       	sbci	r31, 0xFF	; 255
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	a0 e8       	ldi	r26, 0x80	; 128
     17a:	bf e3       	ldi	r27, 0x3F	; 63
     17c:	80 83       	st	Z, r24
     17e:	91 83       	std	Z+1, r25	; 0x01
     180:	a2 83       	std	Z+2, r26	; 0x02
     182:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     184:	8e 01       	movw	r16, r28
     186:	07 59       	subi	r16, 0x97	; 151
     188:	1f 4f       	sbci	r17, 0xFF	; 255
     18a:	fe 01       	movw	r30, r28
     18c:	e3 59       	subi	r30, 0x93	; 147
     18e:	ff 4f       	sbci	r31, 0xFF	; 255
     190:	60 81       	ld	r22, Z
     192:	71 81       	ldd	r23, Z+1	; 0x01
     194:	82 81       	ldd	r24, Z+2	; 0x02
     196:	93 81       	ldd	r25, Z+3	; 0x03
     198:	26 e6       	ldi	r18, 0x66	; 102
     19a:	36 e6       	ldi	r19, 0x66	; 102
     19c:	46 e6       	ldi	r20, 0x66	; 102
     19e:	55 e4       	ldi	r21, 0x45	; 69
     1a0:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
     1a4:	dc 01       	movw	r26, r24
     1a6:	cb 01       	movw	r24, r22
     1a8:	f8 01       	movw	r30, r16
     1aa:	80 83       	st	Z, r24
     1ac:	91 83       	std	Z+1, r25	; 0x01
     1ae:	a2 83       	std	Z+2, r26	; 0x02
     1b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     1b2:	fe 01       	movw	r30, r28
     1b4:	e7 59       	subi	r30, 0x97	; 151
     1b6:	ff 4f       	sbci	r31, 0xFF	; 255
     1b8:	60 81       	ld	r22, Z
     1ba:	71 81       	ldd	r23, Z+1	; 0x01
     1bc:	82 81       	ldd	r24, Z+2	; 0x02
     1be:	93 81       	ldd	r25, Z+3	; 0x03
     1c0:	20 e0       	ldi	r18, 0x00	; 0
     1c2:	30 e0       	ldi	r19, 0x00	; 0
     1c4:	40 e8       	ldi	r20, 0x80	; 128
     1c6:	5f e3       	ldi	r21, 0x3F	; 63
     1c8:	0e 94 68 22 	call	0x44d0	; 0x44d0 <__ltsf2>
     1cc:	88 23       	and	r24, r24
     1ce:	44 f4       	brge	.+16     	; 0x1e0 <lcd_set_4bit+0x8c>
		__ticks = 1;
     1d0:	fe 01       	movw	r30, r28
     1d2:	e9 59       	subi	r30, 0x99	; 153
     1d4:	ff 4f       	sbci	r31, 0xFF	; 255
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	91 83       	std	Z+1, r25	; 0x01
     1dc:	80 83       	st	Z, r24
     1de:	64 c0       	rjmp	.+200    	; 0x2a8 <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     1e0:	fe 01       	movw	r30, r28
     1e2:	e7 59       	subi	r30, 0x97	; 151
     1e4:	ff 4f       	sbci	r31, 0xFF	; 255
     1e6:	60 81       	ld	r22, Z
     1e8:	71 81       	ldd	r23, Z+1	; 0x01
     1ea:	82 81       	ldd	r24, Z+2	; 0x02
     1ec:	93 81       	ldd	r25, Z+3	; 0x03
     1ee:	20 e0       	ldi	r18, 0x00	; 0
     1f0:	3f ef       	ldi	r19, 0xFF	; 255
     1f2:	4f e7       	ldi	r20, 0x7F	; 127
     1f4:	57 e4       	ldi	r21, 0x47	; 71
     1f6:	0e 94 08 22 	call	0x4410	; 0x4410 <__gtsf2>
     1fa:	18 16       	cp	r1, r24
     1fc:	0c f0       	brlt	.+2      	; 0x200 <lcd_set_4bit+0xac>
     1fe:	43 c0       	rjmp	.+134    	; 0x286 <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     200:	fe 01       	movw	r30, r28
     202:	e3 59       	subi	r30, 0x93	; 147
     204:	ff 4f       	sbci	r31, 0xFF	; 255
     206:	60 81       	ld	r22, Z
     208:	71 81       	ldd	r23, Z+1	; 0x01
     20a:	82 81       	ldd	r24, Z+2	; 0x02
     20c:	93 81       	ldd	r25, Z+3	; 0x03
     20e:	20 e0       	ldi	r18, 0x00	; 0
     210:	30 e0       	ldi	r19, 0x00	; 0
     212:	40 e2       	ldi	r20, 0x20	; 32
     214:	51 e4       	ldi	r21, 0x41	; 65
     216:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
     21a:	dc 01       	movw	r26, r24
     21c:	cb 01       	movw	r24, r22
     21e:	8e 01       	movw	r16, r28
     220:	09 59       	subi	r16, 0x99	; 153
     222:	1f 4f       	sbci	r17, 0xFF	; 255
     224:	bc 01       	movw	r22, r24
     226:	cd 01       	movw	r24, r26
     228:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
     22c:	dc 01       	movw	r26, r24
     22e:	cb 01       	movw	r24, r22
     230:	f8 01       	movw	r30, r16
     232:	91 83       	std	Z+1, r25	; 0x01
     234:	80 83       	st	Z, r24
     236:	1f c0       	rjmp	.+62     	; 0x276 <lcd_set_4bit+0x122>
     238:	fe 01       	movw	r30, r28
     23a:	eb 59       	subi	r30, 0x9B	; 155
     23c:	ff 4f       	sbci	r31, 0xFF	; 255
     23e:	80 e7       	ldi	r24, 0x70	; 112
     240:	91 e0       	ldi	r25, 0x01	; 1
     242:	91 83       	std	Z+1, r25	; 0x01
     244:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     246:	fe 01       	movw	r30, r28
     248:	eb 59       	subi	r30, 0x9B	; 155
     24a:	ff 4f       	sbci	r31, 0xFF	; 255
     24c:	80 81       	ld	r24, Z
     24e:	91 81       	ldd	r25, Z+1	; 0x01
     250:	01 97       	sbiw	r24, 0x01	; 1
     252:	f1 f7       	brne	.-4      	; 0x250 <lcd_set_4bit+0xfc>
     254:	fe 01       	movw	r30, r28
     256:	eb 59       	subi	r30, 0x9B	; 155
     258:	ff 4f       	sbci	r31, 0xFF	; 255
     25a:	91 83       	std	Z+1, r25	; 0x01
     25c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     25e:	de 01       	movw	r26, r28
     260:	a9 59       	subi	r26, 0x99	; 153
     262:	bf 4f       	sbci	r27, 0xFF	; 255
     264:	fe 01       	movw	r30, r28
     266:	e9 59       	subi	r30, 0x99	; 153
     268:	ff 4f       	sbci	r31, 0xFF	; 255
     26a:	80 81       	ld	r24, Z
     26c:	91 81       	ldd	r25, Z+1	; 0x01
     26e:	01 97       	sbiw	r24, 0x01	; 1
     270:	11 96       	adiw	r26, 0x01	; 1
     272:	9c 93       	st	X, r25
     274:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     276:	fe 01       	movw	r30, r28
     278:	e9 59       	subi	r30, 0x99	; 153
     27a:	ff 4f       	sbci	r31, 0xFF	; 255
     27c:	80 81       	ld	r24, Z
     27e:	91 81       	ldd	r25, Z+1	; 0x01
     280:	00 97       	sbiw	r24, 0x00	; 0
     282:	d1 f6       	brne	.-76     	; 0x238 <lcd_set_4bit+0xe4>
     284:	27 c0       	rjmp	.+78     	; 0x2d4 <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     286:	8e 01       	movw	r16, r28
     288:	09 59       	subi	r16, 0x99	; 153
     28a:	1f 4f       	sbci	r17, 0xFF	; 255
     28c:	fe 01       	movw	r30, r28
     28e:	e7 59       	subi	r30, 0x97	; 151
     290:	ff 4f       	sbci	r31, 0xFF	; 255
     292:	60 81       	ld	r22, Z
     294:	71 81       	ldd	r23, Z+1	; 0x01
     296:	82 81       	ldd	r24, Z+2	; 0x02
     298:	93 81       	ldd	r25, Z+3	; 0x03
     29a:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
     29e:	dc 01       	movw	r26, r24
     2a0:	cb 01       	movw	r24, r22
     2a2:	f8 01       	movw	r30, r16
     2a4:	91 83       	std	Z+1, r25	; 0x01
     2a6:	80 83       	st	Z, r24
     2a8:	de 01       	movw	r26, r28
     2aa:	ad 59       	subi	r26, 0x9D	; 157
     2ac:	bf 4f       	sbci	r27, 0xFF	; 255
     2ae:	fe 01       	movw	r30, r28
     2b0:	e9 59       	subi	r30, 0x99	; 153
     2b2:	ff 4f       	sbci	r31, 0xFF	; 255
     2b4:	80 81       	ld	r24, Z
     2b6:	91 81       	ldd	r25, Z+1	; 0x01
     2b8:	8d 93       	st	X+, r24
     2ba:	9c 93       	st	X, r25
     2bc:	fe 01       	movw	r30, r28
     2be:	ed 59       	subi	r30, 0x9D	; 157
     2c0:	ff 4f       	sbci	r31, 0xFF	; 255
     2c2:	80 81       	ld	r24, Z
     2c4:	91 81       	ldd	r25, Z+1	; 0x01
     2c6:	01 97       	sbiw	r24, 0x01	; 1
     2c8:	f1 f7       	brne	.-4      	; 0x2c6 <lcd_set_4bit+0x172>
     2ca:	fe 01       	movw	r30, r28
     2cc:	ed 59       	subi	r30, 0x9D	; 157
     2ce:	ff 4f       	sbci	r31, 0xFF	; 255
     2d0:	91 83       	std	Z+1, r25	; 0x01
     2d2:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2d4:	a8 e2       	ldi	r26, 0x28	; 40
     2d6:	b0 e0       	ldi	r27, 0x00	; 0
     2d8:	e8 e2       	ldi	r30, 0x28	; 40
     2da:	f0 e0       	ldi	r31, 0x00	; 0
     2dc:	80 81       	ld	r24, Z
     2de:	8e 7f       	andi	r24, 0xFE	; 254
     2e0:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2e2:	a8 e2       	ldi	r26, 0x28	; 40
     2e4:	b0 e0       	ldi	r27, 0x00	; 0
     2e6:	e8 e2       	ldi	r30, 0x28	; 40
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	80 81       	ld	r24, Z
     2ec:	8d 7f       	andi	r24, 0xFD	; 253
     2ee:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     2f0:	e8 e2       	ldi	r30, 0x28	; 40
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	80 e3       	ldi	r24, 0x30	; 48
     2f6:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     2f8:	a8 e2       	ldi	r26, 0x28	; 40
     2fa:	b0 e0       	ldi	r27, 0x00	; 0
     2fc:	e8 e2       	ldi	r30, 0x28	; 40
     2fe:	f0 e0       	ldi	r31, 0x00	; 0
     300:	80 81       	ld	r24, Z
     302:	84 60       	ori	r24, 0x04	; 4
     304:	8c 93       	st	X, r24
     306:	fe 01       	movw	r30, r28
     308:	e1 5a       	subi	r30, 0xA1	; 161
     30a:	ff 4f       	sbci	r31, 0xFF	; 255
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	a0 ea       	ldi	r26, 0xA0	; 160
     312:	b0 e4       	ldi	r27, 0x40	; 64
     314:	80 83       	st	Z, r24
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	a2 83       	std	Z+2, r26	; 0x02
     31a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     31c:	8e 01       	movw	r16, r28
     31e:	05 5a       	subi	r16, 0xA5	; 165
     320:	1f 4f       	sbci	r17, 0xFF	; 255
     322:	fe 01       	movw	r30, r28
     324:	e1 5a       	subi	r30, 0xA1	; 161
     326:	ff 4f       	sbci	r31, 0xFF	; 255
     328:	60 81       	ld	r22, Z
     32a:	71 81       	ldd	r23, Z+1	; 0x01
     32c:	82 81       	ldd	r24, Z+2	; 0x02
     32e:	93 81       	ldd	r25, Z+3	; 0x03
     330:	26 e6       	ldi	r18, 0x66	; 102
     332:	36 e6       	ldi	r19, 0x66	; 102
     334:	46 e6       	ldi	r20, 0x66	; 102
     336:	55 e4       	ldi	r21, 0x45	; 69
     338:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
     33c:	dc 01       	movw	r26, r24
     33e:	cb 01       	movw	r24, r22
     340:	f8 01       	movw	r30, r16
     342:	80 83       	st	Z, r24
     344:	91 83       	std	Z+1, r25	; 0x01
     346:	a2 83       	std	Z+2, r26	; 0x02
     348:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     34a:	fe 01       	movw	r30, r28
     34c:	e5 5a       	subi	r30, 0xA5	; 165
     34e:	ff 4f       	sbci	r31, 0xFF	; 255
     350:	60 81       	ld	r22, Z
     352:	71 81       	ldd	r23, Z+1	; 0x01
     354:	82 81       	ldd	r24, Z+2	; 0x02
     356:	93 81       	ldd	r25, Z+3	; 0x03
     358:	20 e0       	ldi	r18, 0x00	; 0
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	40 e8       	ldi	r20, 0x80	; 128
     35e:	5f e3       	ldi	r21, 0x3F	; 63
     360:	0e 94 68 22 	call	0x44d0	; 0x44d0 <__ltsf2>
     364:	88 23       	and	r24, r24
     366:	44 f4       	brge	.+16     	; 0x378 <lcd_set_4bit+0x224>
		__ticks = 1;
     368:	fe 01       	movw	r30, r28
     36a:	e7 5a       	subi	r30, 0xA7	; 167
     36c:	ff 4f       	sbci	r31, 0xFF	; 255
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	91 83       	std	Z+1, r25	; 0x01
     374:	80 83       	st	Z, r24
     376:	64 c0       	rjmp	.+200    	; 0x440 <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     378:	fe 01       	movw	r30, r28
     37a:	e5 5a       	subi	r30, 0xA5	; 165
     37c:	ff 4f       	sbci	r31, 0xFF	; 255
     37e:	60 81       	ld	r22, Z
     380:	71 81       	ldd	r23, Z+1	; 0x01
     382:	82 81       	ldd	r24, Z+2	; 0x02
     384:	93 81       	ldd	r25, Z+3	; 0x03
     386:	20 e0       	ldi	r18, 0x00	; 0
     388:	3f ef       	ldi	r19, 0xFF	; 255
     38a:	4f e7       	ldi	r20, 0x7F	; 127
     38c:	57 e4       	ldi	r21, 0x47	; 71
     38e:	0e 94 08 22 	call	0x4410	; 0x4410 <__gtsf2>
     392:	18 16       	cp	r1, r24
     394:	0c f0       	brlt	.+2      	; 0x398 <lcd_set_4bit+0x244>
     396:	43 c0       	rjmp	.+134    	; 0x41e <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     398:	fe 01       	movw	r30, r28
     39a:	e1 5a       	subi	r30, 0xA1	; 161
     39c:	ff 4f       	sbci	r31, 0xFF	; 255
     39e:	60 81       	ld	r22, Z
     3a0:	71 81       	ldd	r23, Z+1	; 0x01
     3a2:	82 81       	ldd	r24, Z+2	; 0x02
     3a4:	93 81       	ldd	r25, Z+3	; 0x03
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	40 e2       	ldi	r20, 0x20	; 32
     3ac:	51 e4       	ldi	r21, 0x41	; 65
     3ae:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
     3b2:	dc 01       	movw	r26, r24
     3b4:	cb 01       	movw	r24, r22
     3b6:	8e 01       	movw	r16, r28
     3b8:	07 5a       	subi	r16, 0xA7	; 167
     3ba:	1f 4f       	sbci	r17, 0xFF	; 255
     3bc:	bc 01       	movw	r22, r24
     3be:	cd 01       	movw	r24, r26
     3c0:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
     3c4:	dc 01       	movw	r26, r24
     3c6:	cb 01       	movw	r24, r22
     3c8:	f8 01       	movw	r30, r16
     3ca:	91 83       	std	Z+1, r25	; 0x01
     3cc:	80 83       	st	Z, r24
     3ce:	1f c0       	rjmp	.+62     	; 0x40e <lcd_set_4bit+0x2ba>
     3d0:	fe 01       	movw	r30, r28
     3d2:	e9 5a       	subi	r30, 0xA9	; 169
     3d4:	ff 4f       	sbci	r31, 0xFF	; 255
     3d6:	80 e7       	ldi	r24, 0x70	; 112
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	91 83       	std	Z+1, r25	; 0x01
     3dc:	80 83       	st	Z, r24
     3de:	fe 01       	movw	r30, r28
     3e0:	e9 5a       	subi	r30, 0xA9	; 169
     3e2:	ff 4f       	sbci	r31, 0xFF	; 255
     3e4:	80 81       	ld	r24, Z
     3e6:	91 81       	ldd	r25, Z+1	; 0x01
     3e8:	01 97       	sbiw	r24, 0x01	; 1
     3ea:	f1 f7       	brne	.-4      	; 0x3e8 <lcd_set_4bit+0x294>
     3ec:	fe 01       	movw	r30, r28
     3ee:	e9 5a       	subi	r30, 0xA9	; 169
     3f0:	ff 4f       	sbci	r31, 0xFF	; 255
     3f2:	91 83       	std	Z+1, r25	; 0x01
     3f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3f6:	de 01       	movw	r26, r28
     3f8:	a7 5a       	subi	r26, 0xA7	; 167
     3fa:	bf 4f       	sbci	r27, 0xFF	; 255
     3fc:	fe 01       	movw	r30, r28
     3fe:	e7 5a       	subi	r30, 0xA7	; 167
     400:	ff 4f       	sbci	r31, 0xFF	; 255
     402:	80 81       	ld	r24, Z
     404:	91 81       	ldd	r25, Z+1	; 0x01
     406:	01 97       	sbiw	r24, 0x01	; 1
     408:	11 96       	adiw	r26, 0x01	; 1
     40a:	9c 93       	st	X, r25
     40c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     40e:	fe 01       	movw	r30, r28
     410:	e7 5a       	subi	r30, 0xA7	; 167
     412:	ff 4f       	sbci	r31, 0xFF	; 255
     414:	80 81       	ld	r24, Z
     416:	91 81       	ldd	r25, Z+1	; 0x01
     418:	00 97       	sbiw	r24, 0x00	; 0
     41a:	d1 f6       	brne	.-76     	; 0x3d0 <lcd_set_4bit+0x27c>
     41c:	27 c0       	rjmp	.+78     	; 0x46c <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     41e:	8e 01       	movw	r16, r28
     420:	07 5a       	subi	r16, 0xA7	; 167
     422:	1f 4f       	sbci	r17, 0xFF	; 255
     424:	fe 01       	movw	r30, r28
     426:	e5 5a       	subi	r30, 0xA5	; 165
     428:	ff 4f       	sbci	r31, 0xFF	; 255
     42a:	60 81       	ld	r22, Z
     42c:	71 81       	ldd	r23, Z+1	; 0x01
     42e:	82 81       	ldd	r24, Z+2	; 0x02
     430:	93 81       	ldd	r25, Z+3	; 0x03
     432:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
     436:	dc 01       	movw	r26, r24
     438:	cb 01       	movw	r24, r22
     43a:	f8 01       	movw	r30, r16
     43c:	91 83       	std	Z+1, r25	; 0x01
     43e:	80 83       	st	Z, r24
     440:	de 01       	movw	r26, r28
     442:	ab 5a       	subi	r26, 0xAB	; 171
     444:	bf 4f       	sbci	r27, 0xFF	; 255
     446:	fe 01       	movw	r30, r28
     448:	e7 5a       	subi	r30, 0xA7	; 167
     44a:	ff 4f       	sbci	r31, 0xFF	; 255
     44c:	80 81       	ld	r24, Z
     44e:	91 81       	ldd	r25, Z+1	; 0x01
     450:	8d 93       	st	X+, r24
     452:	9c 93       	st	X, r25
     454:	fe 01       	movw	r30, r28
     456:	eb 5a       	subi	r30, 0xAB	; 171
     458:	ff 4f       	sbci	r31, 0xFF	; 255
     45a:	80 81       	ld	r24, Z
     45c:	91 81       	ldd	r25, Z+1	; 0x01
     45e:	01 97       	sbiw	r24, 0x01	; 1
     460:	f1 f7       	brne	.-4      	; 0x45e <lcd_set_4bit+0x30a>
     462:	fe 01       	movw	r30, r28
     464:	eb 5a       	subi	r30, 0xAB	; 171
     466:	ff 4f       	sbci	r31, 0xFF	; 255
     468:	91 83       	std	Z+1, r25	; 0x01
     46a:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     46c:	a8 e2       	ldi	r26, 0x28	; 40
     46e:	b0 e0       	ldi	r27, 0x00	; 0
     470:	e8 e2       	ldi	r30, 0x28	; 40
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	80 81       	ld	r24, Z
     476:	8b 7f       	andi	r24, 0xFB	; 251
     478:	8c 93       	st	X, r24
     47a:	fe 01       	movw	r30, r28
     47c:	ef 5a       	subi	r30, 0xAF	; 175
     47e:	ff 4f       	sbci	r31, 0xFF	; 255
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	a0 e8       	ldi	r26, 0x80	; 128
     486:	bf e3       	ldi	r27, 0x3F	; 63
     488:	80 83       	st	Z, r24
     48a:	91 83       	std	Z+1, r25	; 0x01
     48c:	a2 83       	std	Z+2, r26	; 0x02
     48e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     490:	8e 01       	movw	r16, r28
     492:	03 5b       	subi	r16, 0xB3	; 179
     494:	1f 4f       	sbci	r17, 0xFF	; 255
     496:	fe 01       	movw	r30, r28
     498:	ef 5a       	subi	r30, 0xAF	; 175
     49a:	ff 4f       	sbci	r31, 0xFF	; 255
     49c:	60 81       	ld	r22, Z
     49e:	71 81       	ldd	r23, Z+1	; 0x01
     4a0:	82 81       	ldd	r24, Z+2	; 0x02
     4a2:	93 81       	ldd	r25, Z+3	; 0x03
     4a4:	26 e6       	ldi	r18, 0x66	; 102
     4a6:	36 e6       	ldi	r19, 0x66	; 102
     4a8:	46 e6       	ldi	r20, 0x66	; 102
     4aa:	55 e4       	ldi	r21, 0x45	; 69
     4ac:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
     4b0:	dc 01       	movw	r26, r24
     4b2:	cb 01       	movw	r24, r22
     4b4:	f8 01       	movw	r30, r16
     4b6:	80 83       	st	Z, r24
     4b8:	91 83       	std	Z+1, r25	; 0x01
     4ba:	a2 83       	std	Z+2, r26	; 0x02
     4bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     4be:	fe 01       	movw	r30, r28
     4c0:	e3 5b       	subi	r30, 0xB3	; 179
     4c2:	ff 4f       	sbci	r31, 0xFF	; 255
     4c4:	60 81       	ld	r22, Z
     4c6:	71 81       	ldd	r23, Z+1	; 0x01
     4c8:	82 81       	ldd	r24, Z+2	; 0x02
     4ca:	93 81       	ldd	r25, Z+3	; 0x03
     4cc:	20 e0       	ldi	r18, 0x00	; 0
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	40 e8       	ldi	r20, 0x80	; 128
     4d2:	5f e3       	ldi	r21, 0x3F	; 63
     4d4:	0e 94 68 22 	call	0x44d0	; 0x44d0 <__ltsf2>
     4d8:	88 23       	and	r24, r24
     4da:	44 f4       	brge	.+16     	; 0x4ec <lcd_set_4bit+0x398>
		__ticks = 1;
     4dc:	fe 01       	movw	r30, r28
     4de:	e5 5b       	subi	r30, 0xB5	; 181
     4e0:	ff 4f       	sbci	r31, 0xFF	; 255
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	91 83       	std	Z+1, r25	; 0x01
     4e8:	80 83       	st	Z, r24
     4ea:	64 c0       	rjmp	.+200    	; 0x5b4 <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
     4ec:	fe 01       	movw	r30, r28
     4ee:	e3 5b       	subi	r30, 0xB3	; 179
     4f0:	ff 4f       	sbci	r31, 0xFF	; 255
     4f2:	60 81       	ld	r22, Z
     4f4:	71 81       	ldd	r23, Z+1	; 0x01
     4f6:	82 81       	ldd	r24, Z+2	; 0x02
     4f8:	93 81       	ldd	r25, Z+3	; 0x03
     4fa:	20 e0       	ldi	r18, 0x00	; 0
     4fc:	3f ef       	ldi	r19, 0xFF	; 255
     4fe:	4f e7       	ldi	r20, 0x7F	; 127
     500:	57 e4       	ldi	r21, 0x47	; 71
     502:	0e 94 08 22 	call	0x4410	; 0x4410 <__gtsf2>
     506:	18 16       	cp	r1, r24
     508:	0c f0       	brlt	.+2      	; 0x50c <lcd_set_4bit+0x3b8>
     50a:	43 c0       	rjmp	.+134    	; 0x592 <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     50c:	fe 01       	movw	r30, r28
     50e:	ef 5a       	subi	r30, 0xAF	; 175
     510:	ff 4f       	sbci	r31, 0xFF	; 255
     512:	60 81       	ld	r22, Z
     514:	71 81       	ldd	r23, Z+1	; 0x01
     516:	82 81       	ldd	r24, Z+2	; 0x02
     518:	93 81       	ldd	r25, Z+3	; 0x03
     51a:	20 e0       	ldi	r18, 0x00	; 0
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	40 e2       	ldi	r20, 0x20	; 32
     520:	51 e4       	ldi	r21, 0x41	; 65
     522:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
     526:	dc 01       	movw	r26, r24
     528:	cb 01       	movw	r24, r22
     52a:	8e 01       	movw	r16, r28
     52c:	05 5b       	subi	r16, 0xB5	; 181
     52e:	1f 4f       	sbci	r17, 0xFF	; 255
     530:	bc 01       	movw	r22, r24
     532:	cd 01       	movw	r24, r26
     534:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
     538:	dc 01       	movw	r26, r24
     53a:	cb 01       	movw	r24, r22
     53c:	f8 01       	movw	r30, r16
     53e:	91 83       	std	Z+1, r25	; 0x01
     540:	80 83       	st	Z, r24
     542:	1f c0       	rjmp	.+62     	; 0x582 <lcd_set_4bit+0x42e>
     544:	fe 01       	movw	r30, r28
     546:	e7 5b       	subi	r30, 0xB7	; 183
     548:	ff 4f       	sbci	r31, 0xFF	; 255
     54a:	80 e7       	ldi	r24, 0x70	; 112
     54c:	91 e0       	ldi	r25, 0x01	; 1
     54e:	91 83       	std	Z+1, r25	; 0x01
     550:	80 83       	st	Z, r24
     552:	fe 01       	movw	r30, r28
     554:	e7 5b       	subi	r30, 0xB7	; 183
     556:	ff 4f       	sbci	r31, 0xFF	; 255
     558:	80 81       	ld	r24, Z
     55a:	91 81       	ldd	r25, Z+1	; 0x01
     55c:	01 97       	sbiw	r24, 0x01	; 1
     55e:	f1 f7       	brne	.-4      	; 0x55c <lcd_set_4bit+0x408>
     560:	fe 01       	movw	r30, r28
     562:	e7 5b       	subi	r30, 0xB7	; 183
     564:	ff 4f       	sbci	r31, 0xFF	; 255
     566:	91 83       	std	Z+1, r25	; 0x01
     568:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     56a:	de 01       	movw	r26, r28
     56c:	a5 5b       	subi	r26, 0xB5	; 181
     56e:	bf 4f       	sbci	r27, 0xFF	; 255
     570:	fe 01       	movw	r30, r28
     572:	e5 5b       	subi	r30, 0xB5	; 181
     574:	ff 4f       	sbci	r31, 0xFF	; 255
     576:	80 81       	ld	r24, Z
     578:	91 81       	ldd	r25, Z+1	; 0x01
     57a:	01 97       	sbiw	r24, 0x01	; 1
     57c:	11 96       	adiw	r26, 0x01	; 1
     57e:	9c 93       	st	X, r25
     580:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     582:	fe 01       	movw	r30, r28
     584:	e5 5b       	subi	r30, 0xB5	; 181
     586:	ff 4f       	sbci	r31, 0xFF	; 255
     588:	80 81       	ld	r24, Z
     58a:	91 81       	ldd	r25, Z+1	; 0x01
     58c:	00 97       	sbiw	r24, 0x00	; 0
     58e:	d1 f6       	brne	.-76     	; 0x544 <lcd_set_4bit+0x3f0>
     590:	27 c0       	rjmp	.+78     	; 0x5e0 <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     592:	8e 01       	movw	r16, r28
     594:	05 5b       	subi	r16, 0xB5	; 181
     596:	1f 4f       	sbci	r17, 0xFF	; 255
     598:	fe 01       	movw	r30, r28
     59a:	e3 5b       	subi	r30, 0xB3	; 179
     59c:	ff 4f       	sbci	r31, 0xFF	; 255
     59e:	60 81       	ld	r22, Z
     5a0:	71 81       	ldd	r23, Z+1	; 0x01
     5a2:	82 81       	ldd	r24, Z+2	; 0x02
     5a4:	93 81       	ldd	r25, Z+3	; 0x03
     5a6:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
     5aa:	dc 01       	movw	r26, r24
     5ac:	cb 01       	movw	r24, r22
     5ae:	f8 01       	movw	r30, r16
     5b0:	91 83       	std	Z+1, r25	; 0x01
     5b2:	80 83       	st	Z, r24
     5b4:	de 01       	movw	r26, r28
     5b6:	a9 5b       	subi	r26, 0xB9	; 185
     5b8:	bf 4f       	sbci	r27, 0xFF	; 255
     5ba:	fe 01       	movw	r30, r28
     5bc:	e5 5b       	subi	r30, 0xB5	; 181
     5be:	ff 4f       	sbci	r31, 0xFF	; 255
     5c0:	80 81       	ld	r24, Z
     5c2:	91 81       	ldd	r25, Z+1	; 0x01
     5c4:	8d 93       	st	X+, r24
     5c6:	9c 93       	st	X, r25
     5c8:	fe 01       	movw	r30, r28
     5ca:	e9 5b       	subi	r30, 0xB9	; 185
     5cc:	ff 4f       	sbci	r31, 0xFF	; 255
     5ce:	80 81       	ld	r24, Z
     5d0:	91 81       	ldd	r25, Z+1	; 0x01
     5d2:	01 97       	sbiw	r24, 0x01	; 1
     5d4:	f1 f7       	brne	.-4      	; 0x5d2 <lcd_set_4bit+0x47e>
     5d6:	fe 01       	movw	r30, r28
     5d8:	e9 5b       	subi	r30, 0xB9	; 185
     5da:	ff 4f       	sbci	r31, 0xFF	; 255
     5dc:	91 83       	std	Z+1, r25	; 0x01
     5de:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     5e0:	a8 e2       	ldi	r26, 0x28	; 40
     5e2:	b0 e0       	ldi	r27, 0x00	; 0
     5e4:	e8 e2       	ldi	r30, 0x28	; 40
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	80 81       	ld	r24, Z
     5ea:	8e 7f       	andi	r24, 0xFE	; 254
     5ec:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     5ee:	a8 e2       	ldi	r26, 0x28	; 40
     5f0:	b0 e0       	ldi	r27, 0x00	; 0
     5f2:	e8 e2       	ldi	r30, 0x28	; 40
     5f4:	f0 e0       	ldi	r31, 0x00	; 0
     5f6:	80 81       	ld	r24, Z
     5f8:	8d 7f       	andi	r24, 0xFD	; 253
     5fa:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     5fc:	e8 e2       	ldi	r30, 0x28	; 40
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	80 e3       	ldi	r24, 0x30	; 48
     602:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     604:	a8 e2       	ldi	r26, 0x28	; 40
     606:	b0 e0       	ldi	r27, 0x00	; 0
     608:	e8 e2       	ldi	r30, 0x28	; 40
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	80 81       	ld	r24, Z
     60e:	84 60       	ori	r24, 0x04	; 4
     610:	8c 93       	st	X, r24
     612:	fe 01       	movw	r30, r28
     614:	ed 5b       	subi	r30, 0xBD	; 189
     616:	ff 4f       	sbci	r31, 0xFF	; 255
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 ea       	ldi	r26, 0xA0	; 160
     61e:	b0 e4       	ldi	r27, 0x40	; 64
     620:	80 83       	st	Z, r24
     622:	91 83       	std	Z+1, r25	; 0x01
     624:	a2 83       	std	Z+2, r26	; 0x02
     626:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     628:	8e 01       	movw	r16, r28
     62a:	01 5c       	subi	r16, 0xC1	; 193
     62c:	1f 4f       	sbci	r17, 0xFF	; 255
     62e:	fe 01       	movw	r30, r28
     630:	ed 5b       	subi	r30, 0xBD	; 189
     632:	ff 4f       	sbci	r31, 0xFF	; 255
     634:	60 81       	ld	r22, Z
     636:	71 81       	ldd	r23, Z+1	; 0x01
     638:	82 81       	ldd	r24, Z+2	; 0x02
     63a:	93 81       	ldd	r25, Z+3	; 0x03
     63c:	26 e6       	ldi	r18, 0x66	; 102
     63e:	36 e6       	ldi	r19, 0x66	; 102
     640:	46 e6       	ldi	r20, 0x66	; 102
     642:	55 e4       	ldi	r21, 0x45	; 69
     644:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
     648:	dc 01       	movw	r26, r24
     64a:	cb 01       	movw	r24, r22
     64c:	f8 01       	movw	r30, r16
     64e:	80 83       	st	Z, r24
     650:	91 83       	std	Z+1, r25	; 0x01
     652:	a2 83       	std	Z+2, r26	; 0x02
     654:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     656:	fe 01       	movw	r30, r28
     658:	ff 96       	adiw	r30, 0x3f	; 63
     65a:	60 81       	ld	r22, Z
     65c:	71 81       	ldd	r23, Z+1	; 0x01
     65e:	82 81       	ldd	r24, Z+2	; 0x02
     660:	93 81       	ldd	r25, Z+3	; 0x03
     662:	20 e0       	ldi	r18, 0x00	; 0
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	40 e8       	ldi	r20, 0x80	; 128
     668:	5f e3       	ldi	r21, 0x3F	; 63
     66a:	0e 94 68 22 	call	0x44d0	; 0x44d0 <__ltsf2>
     66e:	88 23       	and	r24, r24
     670:	2c f4       	brge	.+10     	; 0x67c <lcd_set_4bit+0x528>
		__ticks = 1;
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	9e af       	std	Y+62, r25	; 0x3e
     678:	8d af       	std	Y+61, r24	; 0x3d
     67a:	46 c0       	rjmp	.+140    	; 0x708 <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
     67c:	fe 01       	movw	r30, r28
     67e:	ff 96       	adiw	r30, 0x3f	; 63
     680:	60 81       	ld	r22, Z
     682:	71 81       	ldd	r23, Z+1	; 0x01
     684:	82 81       	ldd	r24, Z+2	; 0x02
     686:	93 81       	ldd	r25, Z+3	; 0x03
     688:	20 e0       	ldi	r18, 0x00	; 0
     68a:	3f ef       	ldi	r19, 0xFF	; 255
     68c:	4f e7       	ldi	r20, 0x7F	; 127
     68e:	57 e4       	ldi	r21, 0x47	; 71
     690:	0e 94 08 22 	call	0x4410	; 0x4410 <__gtsf2>
     694:	18 16       	cp	r1, r24
     696:	64 f5       	brge	.+88     	; 0x6f0 <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     698:	fe 01       	movw	r30, r28
     69a:	ed 5b       	subi	r30, 0xBD	; 189
     69c:	ff 4f       	sbci	r31, 0xFF	; 255
     69e:	60 81       	ld	r22, Z
     6a0:	71 81       	ldd	r23, Z+1	; 0x01
     6a2:	82 81       	ldd	r24, Z+2	; 0x02
     6a4:	93 81       	ldd	r25, Z+3	; 0x03
     6a6:	20 e0       	ldi	r18, 0x00	; 0
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	40 e2       	ldi	r20, 0x20	; 32
     6ac:	51 e4       	ldi	r21, 0x41	; 65
     6ae:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
     6b2:	dc 01       	movw	r26, r24
     6b4:	cb 01       	movw	r24, r22
     6b6:	bc 01       	movw	r22, r24
     6b8:	cd 01       	movw	r24, r26
     6ba:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
     6be:	dc 01       	movw	r26, r24
     6c0:	cb 01       	movw	r24, r22
     6c2:	9e af       	std	Y+62, r25	; 0x3e
     6c4:	8d af       	std	Y+61, r24	; 0x3d
     6c6:	0f c0       	rjmp	.+30     	; 0x6e6 <lcd_set_4bit+0x592>
     6c8:	80 e7       	ldi	r24, 0x70	; 112
     6ca:	91 e0       	ldi	r25, 0x01	; 1
     6cc:	9c af       	std	Y+60, r25	; 0x3c
     6ce:	8b af       	std	Y+59, r24	; 0x3b
     6d0:	8b ad       	ldd	r24, Y+59	; 0x3b
     6d2:	9c ad       	ldd	r25, Y+60	; 0x3c
     6d4:	01 97       	sbiw	r24, 0x01	; 1
     6d6:	f1 f7       	brne	.-4      	; 0x6d4 <lcd_set_4bit+0x580>
     6d8:	9c af       	std	Y+60, r25	; 0x3c
     6da:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6dc:	8d ad       	ldd	r24, Y+61	; 0x3d
     6de:	9e ad       	ldd	r25, Y+62	; 0x3e
     6e0:	01 97       	sbiw	r24, 0x01	; 1
     6e2:	9e af       	std	Y+62, r25	; 0x3e
     6e4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6e6:	8d ad       	ldd	r24, Y+61	; 0x3d
     6e8:	9e ad       	ldd	r25, Y+62	; 0x3e
     6ea:	00 97       	sbiw	r24, 0x00	; 0
     6ec:	69 f7       	brne	.-38     	; 0x6c8 <lcd_set_4bit+0x574>
     6ee:	16 c0       	rjmp	.+44     	; 0x71c <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6f0:	fe 01       	movw	r30, r28
     6f2:	ff 96       	adiw	r30, 0x3f	; 63
     6f4:	60 81       	ld	r22, Z
     6f6:	71 81       	ldd	r23, Z+1	; 0x01
     6f8:	82 81       	ldd	r24, Z+2	; 0x02
     6fa:	93 81       	ldd	r25, Z+3	; 0x03
     6fc:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
     700:	dc 01       	movw	r26, r24
     702:	cb 01       	movw	r24, r22
     704:	9e af       	std	Y+62, r25	; 0x3e
     706:	8d af       	std	Y+61, r24	; 0x3d
     708:	8d ad       	ldd	r24, Y+61	; 0x3d
     70a:	9e ad       	ldd	r25, Y+62	; 0x3e
     70c:	9a af       	std	Y+58, r25	; 0x3a
     70e:	89 af       	std	Y+57, r24	; 0x39
     710:	89 ad       	ldd	r24, Y+57	; 0x39
     712:	9a ad       	ldd	r25, Y+58	; 0x3a
     714:	01 97       	sbiw	r24, 0x01	; 1
     716:	f1 f7       	brne	.-4      	; 0x714 <lcd_set_4bit+0x5c0>
     718:	9a af       	std	Y+58, r25	; 0x3a
     71a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     71c:	a8 e2       	ldi	r26, 0x28	; 40
     71e:	b0 e0       	ldi	r27, 0x00	; 0
     720:	e8 e2       	ldi	r30, 0x28	; 40
     722:	f0 e0       	ldi	r31, 0x00	; 0
     724:	80 81       	ld	r24, Z
     726:	8b 7f       	andi	r24, 0xFB	; 251
     728:	8c 93       	st	X, r24
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	a0 e8       	ldi	r26, 0x80	; 128
     730:	bf e3       	ldi	r27, 0x3F	; 63
     732:	8d ab       	std	Y+53, r24	; 0x35
     734:	9e ab       	std	Y+54, r25	; 0x36
     736:	af ab       	std	Y+55, r26	; 0x37
     738:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     73a:	6d a9       	ldd	r22, Y+53	; 0x35
     73c:	7e a9       	ldd	r23, Y+54	; 0x36
     73e:	8f a9       	ldd	r24, Y+55	; 0x37
     740:	98 ad       	ldd	r25, Y+56	; 0x38
     742:	26 e6       	ldi	r18, 0x66	; 102
     744:	36 e6       	ldi	r19, 0x66	; 102
     746:	46 e6       	ldi	r20, 0x66	; 102
     748:	55 e4       	ldi	r21, 0x45	; 69
     74a:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
     74e:	dc 01       	movw	r26, r24
     750:	cb 01       	movw	r24, r22
     752:	89 ab       	std	Y+49, r24	; 0x31
     754:	9a ab       	std	Y+50, r25	; 0x32
     756:	ab ab       	std	Y+51, r26	; 0x33
     758:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     75a:	69 a9       	ldd	r22, Y+49	; 0x31
     75c:	7a a9       	ldd	r23, Y+50	; 0x32
     75e:	8b a9       	ldd	r24, Y+51	; 0x33
     760:	9c a9       	ldd	r25, Y+52	; 0x34
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	40 e8       	ldi	r20, 0x80	; 128
     768:	5f e3       	ldi	r21, 0x3F	; 63
     76a:	0e 94 68 22 	call	0x44d0	; 0x44d0 <__ltsf2>
     76e:	88 23       	and	r24, r24
     770:	2c f4       	brge	.+10     	; 0x77c <lcd_set_4bit+0x628>
		__ticks = 1;
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	98 ab       	std	Y+48, r25	; 0x30
     778:	8f a7       	std	Y+47, r24	; 0x2f
     77a:	3f c0       	rjmp	.+126    	; 0x7fa <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
     77c:	69 a9       	ldd	r22, Y+49	; 0x31
     77e:	7a a9       	ldd	r23, Y+50	; 0x32
     780:	8b a9       	ldd	r24, Y+51	; 0x33
     782:	9c a9       	ldd	r25, Y+52	; 0x34
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	3f ef       	ldi	r19, 0xFF	; 255
     788:	4f e7       	ldi	r20, 0x7F	; 127
     78a:	57 e4       	ldi	r21, 0x47	; 71
     78c:	0e 94 08 22 	call	0x4410	; 0x4410 <__gtsf2>
     790:	18 16       	cp	r1, r24
     792:	4c f5       	brge	.+82     	; 0x7e6 <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     794:	6d a9       	ldd	r22, Y+53	; 0x35
     796:	7e a9       	ldd	r23, Y+54	; 0x36
     798:	8f a9       	ldd	r24, Y+55	; 0x37
     79a:	98 ad       	ldd	r25, Y+56	; 0x38
     79c:	20 e0       	ldi	r18, 0x00	; 0
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	40 e2       	ldi	r20, 0x20	; 32
     7a2:	51 e4       	ldi	r21, 0x41	; 65
     7a4:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
     7a8:	dc 01       	movw	r26, r24
     7aa:	cb 01       	movw	r24, r22
     7ac:	bc 01       	movw	r22, r24
     7ae:	cd 01       	movw	r24, r26
     7b0:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
     7b4:	dc 01       	movw	r26, r24
     7b6:	cb 01       	movw	r24, r22
     7b8:	98 ab       	std	Y+48, r25	; 0x30
     7ba:	8f a7       	std	Y+47, r24	; 0x2f
     7bc:	0f c0       	rjmp	.+30     	; 0x7dc <lcd_set_4bit+0x688>
     7be:	80 e7       	ldi	r24, 0x70	; 112
     7c0:	91 e0       	ldi	r25, 0x01	; 1
     7c2:	9e a7       	std	Y+46, r25	; 0x2e
     7c4:	8d a7       	std	Y+45, r24	; 0x2d
     7c6:	8d a5       	ldd	r24, Y+45	; 0x2d
     7c8:	9e a5       	ldd	r25, Y+46	; 0x2e
     7ca:	01 97       	sbiw	r24, 0x01	; 1
     7cc:	f1 f7       	brne	.-4      	; 0x7ca <lcd_set_4bit+0x676>
     7ce:	9e a7       	std	Y+46, r25	; 0x2e
     7d0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7d2:	8f a5       	ldd	r24, Y+47	; 0x2f
     7d4:	98 a9       	ldd	r25, Y+48	; 0x30
     7d6:	01 97       	sbiw	r24, 0x01	; 1
     7d8:	98 ab       	std	Y+48, r25	; 0x30
     7da:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7dc:	8f a5       	ldd	r24, Y+47	; 0x2f
     7de:	98 a9       	ldd	r25, Y+48	; 0x30
     7e0:	00 97       	sbiw	r24, 0x00	; 0
     7e2:	69 f7       	brne	.-38     	; 0x7be <lcd_set_4bit+0x66a>
     7e4:	14 c0       	rjmp	.+40     	; 0x80e <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7e6:	69 a9       	ldd	r22, Y+49	; 0x31
     7e8:	7a a9       	ldd	r23, Y+50	; 0x32
     7ea:	8b a9       	ldd	r24, Y+51	; 0x33
     7ec:	9c a9       	ldd	r25, Y+52	; 0x34
     7ee:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
     7f2:	dc 01       	movw	r26, r24
     7f4:	cb 01       	movw	r24, r22
     7f6:	98 ab       	std	Y+48, r25	; 0x30
     7f8:	8f a7       	std	Y+47, r24	; 0x2f
     7fa:	8f a5       	ldd	r24, Y+47	; 0x2f
     7fc:	98 a9       	ldd	r25, Y+48	; 0x30
     7fe:	9c a7       	std	Y+44, r25	; 0x2c
     800:	8b a7       	std	Y+43, r24	; 0x2b
     802:	8b a5       	ldd	r24, Y+43	; 0x2b
     804:	9c a5       	ldd	r25, Y+44	; 0x2c
     806:	01 97       	sbiw	r24, 0x01	; 1
     808:	f1 f7       	brne	.-4      	; 0x806 <lcd_set_4bit+0x6b2>
     80a:	9c a7       	std	Y+44, r25	; 0x2c
     80c:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     80e:	a8 e2       	ldi	r26, 0x28	; 40
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	e8 e2       	ldi	r30, 0x28	; 40
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	80 81       	ld	r24, Z
     818:	8e 7f       	andi	r24, 0xFE	; 254
     81a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     81c:	a8 e2       	ldi	r26, 0x28	; 40
     81e:	b0 e0       	ldi	r27, 0x00	; 0
     820:	e8 e2       	ldi	r30, 0x28	; 40
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	80 81       	ld	r24, Z
     826:	8d 7f       	andi	r24, 0xFD	; 253
     828:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     82a:	e8 e2       	ldi	r30, 0x28	; 40
     82c:	f0 e0       	ldi	r31, 0x00	; 0
     82e:	80 e3       	ldi	r24, 0x30	; 48
     830:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     832:	a8 e2       	ldi	r26, 0x28	; 40
     834:	b0 e0       	ldi	r27, 0x00	; 0
     836:	e8 e2       	ldi	r30, 0x28	; 40
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	80 81       	ld	r24, Z
     83c:	84 60       	ori	r24, 0x04	; 4
     83e:	8c 93       	st	X, r24
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	a0 ea       	ldi	r26, 0xA0	; 160
     846:	b0 e4       	ldi	r27, 0x40	; 64
     848:	8f a3       	std	Y+39, r24	; 0x27
     84a:	98 a7       	std	Y+40, r25	; 0x28
     84c:	a9 a7       	std	Y+41, r26	; 0x29
     84e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     850:	6f a1       	ldd	r22, Y+39	; 0x27
     852:	78 a5       	ldd	r23, Y+40	; 0x28
     854:	89 a5       	ldd	r24, Y+41	; 0x29
     856:	9a a5       	ldd	r25, Y+42	; 0x2a
     858:	26 e6       	ldi	r18, 0x66	; 102
     85a:	36 e6       	ldi	r19, 0x66	; 102
     85c:	46 e6       	ldi	r20, 0x66	; 102
     85e:	55 e4       	ldi	r21, 0x45	; 69
     860:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
     864:	dc 01       	movw	r26, r24
     866:	cb 01       	movw	r24, r22
     868:	8b a3       	std	Y+35, r24	; 0x23
     86a:	9c a3       	std	Y+36, r25	; 0x24
     86c:	ad a3       	std	Y+37, r26	; 0x25
     86e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     870:	6b a1       	ldd	r22, Y+35	; 0x23
     872:	7c a1       	ldd	r23, Y+36	; 0x24
     874:	8d a1       	ldd	r24, Y+37	; 0x25
     876:	9e a1       	ldd	r25, Y+38	; 0x26
     878:	20 e0       	ldi	r18, 0x00	; 0
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	40 e8       	ldi	r20, 0x80	; 128
     87e:	5f e3       	ldi	r21, 0x3F	; 63
     880:	0e 94 68 22 	call	0x44d0	; 0x44d0 <__ltsf2>
     884:	88 23       	and	r24, r24
     886:	2c f4       	brge	.+10     	; 0x892 <lcd_set_4bit+0x73e>
		__ticks = 1;
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	9a a3       	std	Y+34, r25	; 0x22
     88e:	89 a3       	std	Y+33, r24	; 0x21
     890:	3f c0       	rjmp	.+126    	; 0x910 <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
     892:	6b a1       	ldd	r22, Y+35	; 0x23
     894:	7c a1       	ldd	r23, Y+36	; 0x24
     896:	8d a1       	ldd	r24, Y+37	; 0x25
     898:	9e a1       	ldd	r25, Y+38	; 0x26
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	3f ef       	ldi	r19, 0xFF	; 255
     89e:	4f e7       	ldi	r20, 0x7F	; 127
     8a0:	57 e4       	ldi	r21, 0x47	; 71
     8a2:	0e 94 08 22 	call	0x4410	; 0x4410 <__gtsf2>
     8a6:	18 16       	cp	r1, r24
     8a8:	4c f5       	brge	.+82     	; 0x8fc <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8aa:	6f a1       	ldd	r22, Y+39	; 0x27
     8ac:	78 a5       	ldd	r23, Y+40	; 0x28
     8ae:	89 a5       	ldd	r24, Y+41	; 0x29
     8b0:	9a a5       	ldd	r25, Y+42	; 0x2a
     8b2:	20 e0       	ldi	r18, 0x00	; 0
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	40 e2       	ldi	r20, 0x20	; 32
     8b8:	51 e4       	ldi	r21, 0x41	; 65
     8ba:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
     8be:	dc 01       	movw	r26, r24
     8c0:	cb 01       	movw	r24, r22
     8c2:	bc 01       	movw	r22, r24
     8c4:	cd 01       	movw	r24, r26
     8c6:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
     8ca:	dc 01       	movw	r26, r24
     8cc:	cb 01       	movw	r24, r22
     8ce:	9a a3       	std	Y+34, r25	; 0x22
     8d0:	89 a3       	std	Y+33, r24	; 0x21
     8d2:	0f c0       	rjmp	.+30     	; 0x8f2 <lcd_set_4bit+0x79e>
     8d4:	80 e7       	ldi	r24, 0x70	; 112
     8d6:	91 e0       	ldi	r25, 0x01	; 1
     8d8:	98 a3       	std	Y+32, r25	; 0x20
     8da:	8f 8f       	std	Y+31, r24	; 0x1f
     8dc:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8de:	98 a1       	ldd	r25, Y+32	; 0x20
     8e0:	01 97       	sbiw	r24, 0x01	; 1
     8e2:	f1 f7       	brne	.-4      	; 0x8e0 <lcd_set_4bit+0x78c>
     8e4:	98 a3       	std	Y+32, r25	; 0x20
     8e6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8e8:	89 a1       	ldd	r24, Y+33	; 0x21
     8ea:	9a a1       	ldd	r25, Y+34	; 0x22
     8ec:	01 97       	sbiw	r24, 0x01	; 1
     8ee:	9a a3       	std	Y+34, r25	; 0x22
     8f0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8f2:	89 a1       	ldd	r24, Y+33	; 0x21
     8f4:	9a a1       	ldd	r25, Y+34	; 0x22
     8f6:	00 97       	sbiw	r24, 0x00	; 0
     8f8:	69 f7       	brne	.-38     	; 0x8d4 <lcd_set_4bit+0x780>
     8fa:	14 c0       	rjmp	.+40     	; 0x924 <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8fc:	6b a1       	ldd	r22, Y+35	; 0x23
     8fe:	7c a1       	ldd	r23, Y+36	; 0x24
     900:	8d a1       	ldd	r24, Y+37	; 0x25
     902:	9e a1       	ldd	r25, Y+38	; 0x26
     904:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
     908:	dc 01       	movw	r26, r24
     90a:	cb 01       	movw	r24, r22
     90c:	9a a3       	std	Y+34, r25	; 0x22
     90e:	89 a3       	std	Y+33, r24	; 0x21
     910:	89 a1       	ldd	r24, Y+33	; 0x21
     912:	9a a1       	ldd	r25, Y+34	; 0x22
     914:	9e 8f       	std	Y+30, r25	; 0x1e
     916:	8d 8f       	std	Y+29, r24	; 0x1d
     918:	8d 8d       	ldd	r24, Y+29	; 0x1d
     91a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	f1 f7       	brne	.-4      	; 0x91c <lcd_set_4bit+0x7c8>
     920:	9e 8f       	std	Y+30, r25	; 0x1e
     922:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     924:	a8 e2       	ldi	r26, 0x28	; 40
     926:	b0 e0       	ldi	r27, 0x00	; 0
     928:	e8 e2       	ldi	r30, 0x28	; 40
     92a:	f0 e0       	ldi	r31, 0x00	; 0
     92c:	80 81       	ld	r24, Z
     92e:	8b 7f       	andi	r24, 0xFB	; 251
     930:	8c 93       	st	X, r24
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	a0 e8       	ldi	r26, 0x80	; 128
     938:	bf e3       	ldi	r27, 0x3F	; 63
     93a:	89 8f       	std	Y+25, r24	; 0x19
     93c:	9a 8f       	std	Y+26, r25	; 0x1a
     93e:	ab 8f       	std	Y+27, r26	; 0x1b
     940:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     942:	69 8d       	ldd	r22, Y+25	; 0x19
     944:	7a 8d       	ldd	r23, Y+26	; 0x1a
     946:	8b 8d       	ldd	r24, Y+27	; 0x1b
     948:	9c 8d       	ldd	r25, Y+28	; 0x1c
     94a:	26 e6       	ldi	r18, 0x66	; 102
     94c:	36 e6       	ldi	r19, 0x66	; 102
     94e:	46 e6       	ldi	r20, 0x66	; 102
     950:	55 e4       	ldi	r21, 0x45	; 69
     952:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
     956:	dc 01       	movw	r26, r24
     958:	cb 01       	movw	r24, r22
     95a:	8d 8b       	std	Y+21, r24	; 0x15
     95c:	9e 8b       	std	Y+22, r25	; 0x16
     95e:	af 8b       	std	Y+23, r26	; 0x17
     960:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     962:	6d 89       	ldd	r22, Y+21	; 0x15
     964:	7e 89       	ldd	r23, Y+22	; 0x16
     966:	8f 89       	ldd	r24, Y+23	; 0x17
     968:	98 8d       	ldd	r25, Y+24	; 0x18
     96a:	20 e0       	ldi	r18, 0x00	; 0
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	40 e8       	ldi	r20, 0x80	; 128
     970:	5f e3       	ldi	r21, 0x3F	; 63
     972:	0e 94 68 22 	call	0x44d0	; 0x44d0 <__ltsf2>
     976:	88 23       	and	r24, r24
     978:	2c f4       	brge	.+10     	; 0x984 <lcd_set_4bit+0x830>
		__ticks = 1;
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	9c 8b       	std	Y+20, r25	; 0x14
     980:	8b 8b       	std	Y+19, r24	; 0x13
     982:	3f c0       	rjmp	.+126    	; 0xa02 <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
     984:	6d 89       	ldd	r22, Y+21	; 0x15
     986:	7e 89       	ldd	r23, Y+22	; 0x16
     988:	8f 89       	ldd	r24, Y+23	; 0x17
     98a:	98 8d       	ldd	r25, Y+24	; 0x18
     98c:	20 e0       	ldi	r18, 0x00	; 0
     98e:	3f ef       	ldi	r19, 0xFF	; 255
     990:	4f e7       	ldi	r20, 0x7F	; 127
     992:	57 e4       	ldi	r21, 0x47	; 71
     994:	0e 94 08 22 	call	0x4410	; 0x4410 <__gtsf2>
     998:	18 16       	cp	r1, r24
     99a:	4c f5       	brge	.+82     	; 0x9ee <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     99c:	69 8d       	ldd	r22, Y+25	; 0x19
     99e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     9a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9a4:	20 e0       	ldi	r18, 0x00	; 0
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	40 e2       	ldi	r20, 0x20	; 32
     9aa:	51 e4       	ldi	r21, 0x41	; 65
     9ac:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
     9b0:	dc 01       	movw	r26, r24
     9b2:	cb 01       	movw	r24, r22
     9b4:	bc 01       	movw	r22, r24
     9b6:	cd 01       	movw	r24, r26
     9b8:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
     9bc:	dc 01       	movw	r26, r24
     9be:	cb 01       	movw	r24, r22
     9c0:	9c 8b       	std	Y+20, r25	; 0x14
     9c2:	8b 8b       	std	Y+19, r24	; 0x13
     9c4:	0f c0       	rjmp	.+30     	; 0x9e4 <lcd_set_4bit+0x890>
     9c6:	80 e7       	ldi	r24, 0x70	; 112
     9c8:	91 e0       	ldi	r25, 0x01	; 1
     9ca:	9a 8b       	std	Y+18, r25	; 0x12
     9cc:	89 8b       	std	Y+17, r24	; 0x11
     9ce:	89 89       	ldd	r24, Y+17	; 0x11
     9d0:	9a 89       	ldd	r25, Y+18	; 0x12
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	f1 f7       	brne	.-4      	; 0x9d2 <lcd_set_4bit+0x87e>
     9d6:	9a 8b       	std	Y+18, r25	; 0x12
     9d8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9da:	8b 89       	ldd	r24, Y+19	; 0x13
     9dc:	9c 89       	ldd	r25, Y+20	; 0x14
     9de:	01 97       	sbiw	r24, 0x01	; 1
     9e0:	9c 8b       	std	Y+20, r25	; 0x14
     9e2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9e4:	8b 89       	ldd	r24, Y+19	; 0x13
     9e6:	9c 89       	ldd	r25, Y+20	; 0x14
     9e8:	00 97       	sbiw	r24, 0x00	; 0
     9ea:	69 f7       	brne	.-38     	; 0x9c6 <lcd_set_4bit+0x872>
     9ec:	14 c0       	rjmp	.+40     	; 0xa16 <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9ee:	6d 89       	ldd	r22, Y+21	; 0x15
     9f0:	7e 89       	ldd	r23, Y+22	; 0x16
     9f2:	8f 89       	ldd	r24, Y+23	; 0x17
     9f4:	98 8d       	ldd	r25, Y+24	; 0x18
     9f6:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
     9fa:	dc 01       	movw	r26, r24
     9fc:	cb 01       	movw	r24, r22
     9fe:	9c 8b       	std	Y+20, r25	; 0x14
     a00:	8b 8b       	std	Y+19, r24	; 0x13
     a02:	8b 89       	ldd	r24, Y+19	; 0x13
     a04:	9c 89       	ldd	r25, Y+20	; 0x14
     a06:	98 8b       	std	Y+16, r25	; 0x10
     a08:	8f 87       	std	Y+15, r24	; 0x0f
     a0a:	8f 85       	ldd	r24, Y+15	; 0x0f
     a0c:	98 89       	ldd	r25, Y+16	; 0x10
     a0e:	01 97       	sbiw	r24, 0x01	; 1
     a10:	f1 f7       	brne	.-4      	; 0xa0e <lcd_set_4bit+0x8ba>
     a12:	98 8b       	std	Y+16, r25	; 0x10
     a14:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     a16:	a8 e2       	ldi	r26, 0x28	; 40
     a18:	b0 e0       	ldi	r27, 0x00	; 0
     a1a:	e8 e2       	ldi	r30, 0x28	; 40
     a1c:	f0 e0       	ldi	r31, 0x00	; 0
     a1e:	80 81       	ld	r24, Z
     a20:	8e 7f       	andi	r24, 0xFE	; 254
     a22:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     a24:	a8 e2       	ldi	r26, 0x28	; 40
     a26:	b0 e0       	ldi	r27, 0x00	; 0
     a28:	e8 e2       	ldi	r30, 0x28	; 40
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	80 81       	ld	r24, Z
     a2e:	8d 7f       	andi	r24, 0xFD	; 253
     a30:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     a32:	e8 e2       	ldi	r30, 0x28	; 40
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	80 e2       	ldi	r24, 0x20	; 32
     a38:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     a3a:	a8 e2       	ldi	r26, 0x28	; 40
     a3c:	b0 e0       	ldi	r27, 0x00	; 0
     a3e:	e8 e2       	ldi	r30, 0x28	; 40
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	80 81       	ld	r24, Z
     a44:	84 60       	ori	r24, 0x04	; 4
     a46:	8c 93       	st	X, r24
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	a0 ea       	ldi	r26, 0xA0	; 160
     a4e:	b0 e4       	ldi	r27, 0x40	; 64
     a50:	8b 87       	std	Y+11, r24	; 0x0b
     a52:	9c 87       	std	Y+12, r25	; 0x0c
     a54:	ad 87       	std	Y+13, r26	; 0x0d
     a56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a58:	6b 85       	ldd	r22, Y+11	; 0x0b
     a5a:	7c 85       	ldd	r23, Y+12	; 0x0c
     a5c:	8d 85       	ldd	r24, Y+13	; 0x0d
     a5e:	9e 85       	ldd	r25, Y+14	; 0x0e
     a60:	26 e6       	ldi	r18, 0x66	; 102
     a62:	36 e6       	ldi	r19, 0x66	; 102
     a64:	46 e6       	ldi	r20, 0x66	; 102
     a66:	55 e4       	ldi	r21, 0x45	; 69
     a68:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
     a6c:	dc 01       	movw	r26, r24
     a6e:	cb 01       	movw	r24, r22
     a70:	8f 83       	std	Y+7, r24	; 0x07
     a72:	98 87       	std	Y+8, r25	; 0x08
     a74:	a9 87       	std	Y+9, r26	; 0x09
     a76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     a78:	6f 81       	ldd	r22, Y+7	; 0x07
     a7a:	78 85       	ldd	r23, Y+8	; 0x08
     a7c:	89 85       	ldd	r24, Y+9	; 0x09
     a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     a80:	20 e0       	ldi	r18, 0x00	; 0
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	40 e8       	ldi	r20, 0x80	; 128
     a86:	5f e3       	ldi	r21, 0x3F	; 63
     a88:	0e 94 68 22 	call	0x44d0	; 0x44d0 <__ltsf2>
     a8c:	88 23       	and	r24, r24
     a8e:	2c f4       	brge	.+10     	; 0xa9a <lcd_set_4bit+0x946>
		__ticks = 1;
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	9e 83       	std	Y+6, r25	; 0x06
     a96:	8d 83       	std	Y+5, r24	; 0x05
     a98:	3f c0       	rjmp	.+126    	; 0xb18 <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
     a9a:	6f 81       	ldd	r22, Y+7	; 0x07
     a9c:	78 85       	ldd	r23, Y+8	; 0x08
     a9e:	89 85       	ldd	r24, Y+9	; 0x09
     aa0:	9a 85       	ldd	r25, Y+10	; 0x0a
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	3f ef       	ldi	r19, 0xFF	; 255
     aa6:	4f e7       	ldi	r20, 0x7F	; 127
     aa8:	57 e4       	ldi	r21, 0x47	; 71
     aaa:	0e 94 08 22 	call	0x4410	; 0x4410 <__gtsf2>
     aae:	18 16       	cp	r1, r24
     ab0:	4c f5       	brge	.+82     	; 0xb04 <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ab2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ab4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ab6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ab8:	9e 85       	ldd	r25, Y+14	; 0x0e
     aba:	20 e0       	ldi	r18, 0x00	; 0
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	40 e2       	ldi	r20, 0x20	; 32
     ac0:	51 e4       	ldi	r21, 0x41	; 65
     ac2:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
     ac6:	dc 01       	movw	r26, r24
     ac8:	cb 01       	movw	r24, r22
     aca:	bc 01       	movw	r22, r24
     acc:	cd 01       	movw	r24, r26
     ace:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
     ad2:	dc 01       	movw	r26, r24
     ad4:	cb 01       	movw	r24, r22
     ad6:	9e 83       	std	Y+6, r25	; 0x06
     ad8:	8d 83       	std	Y+5, r24	; 0x05
     ada:	0f c0       	rjmp	.+30     	; 0xafa <lcd_set_4bit+0x9a6>
     adc:	80 e7       	ldi	r24, 0x70	; 112
     ade:	91 e0       	ldi	r25, 0x01	; 1
     ae0:	9c 83       	std	Y+4, r25	; 0x04
     ae2:	8b 83       	std	Y+3, r24	; 0x03
     ae4:	8b 81       	ldd	r24, Y+3	; 0x03
     ae6:	9c 81       	ldd	r25, Y+4	; 0x04
     ae8:	01 97       	sbiw	r24, 0x01	; 1
     aea:	f1 f7       	brne	.-4      	; 0xae8 <lcd_set_4bit+0x994>
     aec:	9c 83       	std	Y+4, r25	; 0x04
     aee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     af0:	8d 81       	ldd	r24, Y+5	; 0x05
     af2:	9e 81       	ldd	r25, Y+6	; 0x06
     af4:	01 97       	sbiw	r24, 0x01	; 1
     af6:	9e 83       	std	Y+6, r25	; 0x06
     af8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     afa:	8d 81       	ldd	r24, Y+5	; 0x05
     afc:	9e 81       	ldd	r25, Y+6	; 0x06
     afe:	00 97       	sbiw	r24, 0x00	; 0
     b00:	69 f7       	brne	.-38     	; 0xadc <lcd_set_4bit+0x988>
     b02:	14 c0       	rjmp	.+40     	; 0xb2c <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b04:	6f 81       	ldd	r22, Y+7	; 0x07
     b06:	78 85       	ldd	r23, Y+8	; 0x08
     b08:	89 85       	ldd	r24, Y+9	; 0x09
     b0a:	9a 85       	ldd	r25, Y+10	; 0x0a
     b0c:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
     b10:	dc 01       	movw	r26, r24
     b12:	cb 01       	movw	r24, r22
     b14:	9e 83       	std	Y+6, r25	; 0x06
     b16:	8d 83       	std	Y+5, r24	; 0x05
     b18:	8d 81       	ldd	r24, Y+5	; 0x05
     b1a:	9e 81       	ldd	r25, Y+6	; 0x06
     b1c:	9a 83       	std	Y+2, r25	; 0x02
     b1e:	89 83       	std	Y+1, r24	; 0x01
     b20:	89 81       	ldd	r24, Y+1	; 0x01
     b22:	9a 81       	ldd	r25, Y+2	; 0x02
     b24:	01 97       	sbiw	r24, 0x01	; 1
     b26:	f1 f7       	brne	.-4      	; 0xb24 <lcd_set_4bit+0x9d0>
     b28:	9a 83       	std	Y+2, r25	; 0x02
     b2a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     b2c:	a8 e2       	ldi	r26, 0x28	; 40
     b2e:	b0 e0       	ldi	r27, 0x00	; 0
     b30:	e8 e2       	ldi	r30, 0x28	; 40
     b32:	f0 e0       	ldi	r31, 0x00	; 0
     b34:	80 81       	ld	r24, Z
     b36:	8b 7f       	andi	r24, 0xFB	; 251
     b38:	8c 93       	st	X, r24

	
}
     b3a:	c0 59       	subi	r28, 0x90	; 144
     b3c:	df 4f       	sbci	r29, 0xFF	; 255
     b3e:	0f b6       	in	r0, 0x3f	; 63
     b40:	f8 94       	cli
     b42:	de bf       	out	0x3e, r29	; 62
     b44:	0f be       	out	0x3f, r0	; 63
     b46:	cd bf       	out	0x3d, r28	; 61
     b48:	cf 91       	pop	r28
     b4a:	df 91       	pop	r29
     b4c:	1f 91       	pop	r17
     b4e:	0f 91       	pop	r16
     b50:	08 95       	ret

00000b52 <lcd_init>:

//Function to Initialize LCD
void lcd_init()
{
     b52:	df 93       	push	r29
     b54:	cf 93       	push	r28
     b56:	cd b7       	in	r28, 0x3d	; 61
     b58:	de b7       	in	r29, 0x3e	; 62
     b5a:	2e 97       	sbiw	r28, 0x0e	; 14
     b5c:	0f b6       	in	r0, 0x3f	; 63
     b5e:	f8 94       	cli
     b60:	de bf       	out	0x3e, r29	; 62
     b62:	0f be       	out	0x3f, r0	; 63
     b64:	cd bf       	out	0x3d, r28	; 61
	lcd_set_4bit();
     b66:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_set_4bit>
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	a0 e8       	ldi	r26, 0x80	; 128
     b70:	bf e3       	ldi	r27, 0x3F	; 63
     b72:	8b 87       	std	Y+11, r24	; 0x0b
     b74:	9c 87       	std	Y+12, r25	; 0x0c
     b76:	ad 87       	std	Y+13, r26	; 0x0d
     b78:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b7a:	6b 85       	ldd	r22, Y+11	; 0x0b
     b7c:	7c 85       	ldd	r23, Y+12	; 0x0c
     b7e:	8d 85       	ldd	r24, Y+13	; 0x0d
     b80:	9e 85       	ldd	r25, Y+14	; 0x0e
     b82:	26 e6       	ldi	r18, 0x66	; 102
     b84:	36 e6       	ldi	r19, 0x66	; 102
     b86:	46 e6       	ldi	r20, 0x66	; 102
     b88:	55 e4       	ldi	r21, 0x45	; 69
     b8a:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
     b8e:	dc 01       	movw	r26, r24
     b90:	cb 01       	movw	r24, r22
     b92:	8f 83       	std	Y+7, r24	; 0x07
     b94:	98 87       	std	Y+8, r25	; 0x08
     b96:	a9 87       	std	Y+9, r26	; 0x09
     b98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b9a:	6f 81       	ldd	r22, Y+7	; 0x07
     b9c:	78 85       	ldd	r23, Y+8	; 0x08
     b9e:	89 85       	ldd	r24, Y+9	; 0x09
     ba0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	40 e8       	ldi	r20, 0x80	; 128
     ba8:	5f e3       	ldi	r21, 0x3F	; 63
     baa:	0e 94 68 22 	call	0x44d0	; 0x44d0 <__ltsf2>
     bae:	88 23       	and	r24, r24
     bb0:	2c f4       	brge	.+10     	; 0xbbc <lcd_init+0x6a>
		__ticks = 1;
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	9e 83       	std	Y+6, r25	; 0x06
     bb8:	8d 83       	std	Y+5, r24	; 0x05
     bba:	3f c0       	rjmp	.+126    	; 0xc3a <lcd_init+0xe8>
	else if (__tmp > 65535)
     bbc:	6f 81       	ldd	r22, Y+7	; 0x07
     bbe:	78 85       	ldd	r23, Y+8	; 0x08
     bc0:	89 85       	ldd	r24, Y+9	; 0x09
     bc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	3f ef       	ldi	r19, 0xFF	; 255
     bc8:	4f e7       	ldi	r20, 0x7F	; 127
     bca:	57 e4       	ldi	r21, 0x47	; 71
     bcc:	0e 94 08 22 	call	0x4410	; 0x4410 <__gtsf2>
     bd0:	18 16       	cp	r1, r24
     bd2:	4c f5       	brge	.+82     	; 0xc26 <lcd_init+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bd4:	6b 85       	ldd	r22, Y+11	; 0x0b
     bd6:	7c 85       	ldd	r23, Y+12	; 0x0c
     bd8:	8d 85       	ldd	r24, Y+13	; 0x0d
     bda:	9e 85       	ldd	r25, Y+14	; 0x0e
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	40 e2       	ldi	r20, 0x20	; 32
     be2:	51 e4       	ldi	r21, 0x41	; 65
     be4:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
     be8:	dc 01       	movw	r26, r24
     bea:	cb 01       	movw	r24, r22
     bec:	bc 01       	movw	r22, r24
     bee:	cd 01       	movw	r24, r26
     bf0:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
     bf4:	dc 01       	movw	r26, r24
     bf6:	cb 01       	movw	r24, r22
     bf8:	9e 83       	std	Y+6, r25	; 0x06
     bfa:	8d 83       	std	Y+5, r24	; 0x05
     bfc:	0f c0       	rjmp	.+30     	; 0xc1c <lcd_init+0xca>
     bfe:	80 e7       	ldi	r24, 0x70	; 112
     c00:	91 e0       	ldi	r25, 0x01	; 1
     c02:	9c 83       	std	Y+4, r25	; 0x04
     c04:	8b 83       	std	Y+3, r24	; 0x03
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	9c 81       	ldd	r25, Y+4	; 0x04
     c0a:	01 97       	sbiw	r24, 0x01	; 1
     c0c:	f1 f7       	brne	.-4      	; 0xc0a <lcd_init+0xb8>
     c0e:	9c 83       	std	Y+4, r25	; 0x04
     c10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c12:	8d 81       	ldd	r24, Y+5	; 0x05
     c14:	9e 81       	ldd	r25, Y+6	; 0x06
     c16:	01 97       	sbiw	r24, 0x01	; 1
     c18:	9e 83       	std	Y+6, r25	; 0x06
     c1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c1c:	8d 81       	ldd	r24, Y+5	; 0x05
     c1e:	9e 81       	ldd	r25, Y+6	; 0x06
     c20:	00 97       	sbiw	r24, 0x00	; 0
     c22:	69 f7       	brne	.-38     	; 0xbfe <lcd_init+0xac>
     c24:	14 c0       	rjmp	.+40     	; 0xc4e <lcd_init+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c26:	6f 81       	ldd	r22, Y+7	; 0x07
     c28:	78 85       	ldd	r23, Y+8	; 0x08
     c2a:	89 85       	ldd	r24, Y+9	; 0x09
     c2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c2e:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
     c32:	dc 01       	movw	r26, r24
     c34:	cb 01       	movw	r24, r22
     c36:	9e 83       	std	Y+6, r25	; 0x06
     c38:	8d 83       	std	Y+5, r24	; 0x05
     c3a:	8d 81       	ldd	r24, Y+5	; 0x05
     c3c:	9e 81       	ldd	r25, Y+6	; 0x06
     c3e:	9a 83       	std	Y+2, r25	; 0x02
     c40:	89 83       	std	Y+1, r24	; 0x01
     c42:	89 81       	ldd	r24, Y+1	; 0x01
     c44:	9a 81       	ldd	r25, Y+2	; 0x02
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	f1 f7       	brne	.-4      	; 0xc46 <lcd_init+0xf4>
     c4a:	9a 83       	std	Y+2, r25	; 0x02
     c4c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     c4e:	88 e2       	ldi	r24, 0x28	; 40
     c50:	0e 94 3f 06 	call	0xc7e	; 0xc7e <lcd_wr_command>
	lcd_wr_command(0x01);
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	0e 94 3f 06 	call	0xc7e	; 0xc7e <lcd_wr_command>
	lcd_wr_command(0x06);
     c5a:	86 e0       	ldi	r24, 0x06	; 6
     c5c:	0e 94 3f 06 	call	0xc7e	; 0xc7e <lcd_wr_command>
	lcd_wr_command(0x0E);
     c60:	8e e0       	ldi	r24, 0x0E	; 14
     c62:	0e 94 3f 06 	call	0xc7e	; 0xc7e <lcd_wr_command>
	lcd_wr_command(0x80);
     c66:	80 e8       	ldi	r24, 0x80	; 128
     c68:	0e 94 3f 06 	call	0xc7e	; 0xc7e <lcd_wr_command>
		
}
     c6c:	2e 96       	adiw	r28, 0x0e	; 14
     c6e:	0f b6       	in	r0, 0x3f	; 63
     c70:	f8 94       	cli
     c72:	de bf       	out	0x3e, r29	; 62
     c74:	0f be       	out	0x3f, r0	; 63
     c76:	cd bf       	out	0x3d, r28	; 61
     c78:	cf 91       	pop	r28
     c7a:	df 91       	pop	r29
     c7c:	08 95       	ret

00000c7e <lcd_wr_command>:

	 
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
     c7e:	df 93       	push	r29
     c80:	cf 93       	push	r28
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
     c86:	6e 97       	sbiw	r28, 0x1e	; 30
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	f8 94       	cli
     c8c:	de bf       	out	0x3e, r29	; 62
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	cd bf       	out	0x3d, r28	; 61
     c92:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
     c94:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c96:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
     c98:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c9a:	80 7f       	andi	r24, 0xF0	; 240
     c9c:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     c9e:	a8 e2       	ldi	r26, 0x28	; 40
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	e8 e2       	ldi	r30, 0x28	; 40
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	8f 70       	andi	r24, 0x0F	; 15
     caa:	8c 93       	st	X, r24
	lcd_port |= temp;
     cac:	a8 e2       	ldi	r26, 0x28	; 40
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e8 e2       	ldi	r30, 0x28	; 40
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	90 81       	ld	r25, Z
     cb6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cb8:	89 2b       	or	r24, r25
     cba:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     cbc:	a8 e2       	ldi	r26, 0x28	; 40
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e8 e2       	ldi	r30, 0x28	; 40
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	8e 7f       	andi	r24, 0xFE	; 254
     cc8:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     cca:	a8 e2       	ldi	r26, 0x28	; 40
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e8 e2       	ldi	r30, 0x28	; 40
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	8d 7f       	andi	r24, 0xFD	; 253
     cd6:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     cd8:	a8 e2       	ldi	r26, 0x28	; 40
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	e8 e2       	ldi	r30, 0x28	; 40
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	84 60       	ori	r24, 0x04	; 4
     ce4:	8c 93       	st	X, r24
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	a0 ea       	ldi	r26, 0xA0	; 160
     cec:	b0 e4       	ldi	r27, 0x40	; 64
     cee:	89 8f       	std	Y+25, r24	; 0x19
     cf0:	9a 8f       	std	Y+26, r25	; 0x1a
     cf2:	ab 8f       	std	Y+27, r26	; 0x1b
     cf4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cf6:	69 8d       	ldd	r22, Y+25	; 0x19
     cf8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cfa:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cfc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cfe:	26 e6       	ldi	r18, 0x66	; 102
     d00:	36 e6       	ldi	r19, 0x66	; 102
     d02:	46 e6       	ldi	r20, 0x66	; 102
     d04:	55 e4       	ldi	r21, 0x45	; 69
     d06:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
     d0a:	dc 01       	movw	r26, r24
     d0c:	cb 01       	movw	r24, r22
     d0e:	8d 8b       	std	Y+21, r24	; 0x15
     d10:	9e 8b       	std	Y+22, r25	; 0x16
     d12:	af 8b       	std	Y+23, r26	; 0x17
     d14:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d16:	6d 89       	ldd	r22, Y+21	; 0x15
     d18:	7e 89       	ldd	r23, Y+22	; 0x16
     d1a:	8f 89       	ldd	r24, Y+23	; 0x17
     d1c:	98 8d       	ldd	r25, Y+24	; 0x18
     d1e:	20 e0       	ldi	r18, 0x00	; 0
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	40 e8       	ldi	r20, 0x80	; 128
     d24:	5f e3       	ldi	r21, 0x3F	; 63
     d26:	0e 94 68 22 	call	0x44d0	; 0x44d0 <__ltsf2>
     d2a:	88 23       	and	r24, r24
     d2c:	2c f4       	brge	.+10     	; 0xd38 <lcd_wr_command+0xba>
		__ticks = 1;
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	9c 8b       	std	Y+20, r25	; 0x14
     d34:	8b 8b       	std	Y+19, r24	; 0x13
     d36:	3f c0       	rjmp	.+126    	; 0xdb6 <lcd_wr_command+0x138>
	else if (__tmp > 65535)
     d38:	6d 89       	ldd	r22, Y+21	; 0x15
     d3a:	7e 89       	ldd	r23, Y+22	; 0x16
     d3c:	8f 89       	ldd	r24, Y+23	; 0x17
     d3e:	98 8d       	ldd	r25, Y+24	; 0x18
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	3f ef       	ldi	r19, 0xFF	; 255
     d44:	4f e7       	ldi	r20, 0x7F	; 127
     d46:	57 e4       	ldi	r21, 0x47	; 71
     d48:	0e 94 08 22 	call	0x4410	; 0x4410 <__gtsf2>
     d4c:	18 16       	cp	r1, r24
     d4e:	4c f5       	brge	.+82     	; 0xda2 <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d50:	69 8d       	ldd	r22, Y+25	; 0x19
     d52:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d54:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d56:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	40 e2       	ldi	r20, 0x20	; 32
     d5e:	51 e4       	ldi	r21, 0x41	; 65
     d60:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
     d64:	dc 01       	movw	r26, r24
     d66:	cb 01       	movw	r24, r22
     d68:	bc 01       	movw	r22, r24
     d6a:	cd 01       	movw	r24, r26
     d6c:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
     d70:	dc 01       	movw	r26, r24
     d72:	cb 01       	movw	r24, r22
     d74:	9c 8b       	std	Y+20, r25	; 0x14
     d76:	8b 8b       	std	Y+19, r24	; 0x13
     d78:	0f c0       	rjmp	.+30     	; 0xd98 <lcd_wr_command+0x11a>
     d7a:	80 e7       	ldi	r24, 0x70	; 112
     d7c:	91 e0       	ldi	r25, 0x01	; 1
     d7e:	9a 8b       	std	Y+18, r25	; 0x12
     d80:	89 8b       	std	Y+17, r24	; 0x11
     d82:	89 89       	ldd	r24, Y+17	; 0x11
     d84:	9a 89       	ldd	r25, Y+18	; 0x12
     d86:	01 97       	sbiw	r24, 0x01	; 1
     d88:	f1 f7       	brne	.-4      	; 0xd86 <lcd_wr_command+0x108>
     d8a:	9a 8b       	std	Y+18, r25	; 0x12
     d8c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d8e:	8b 89       	ldd	r24, Y+19	; 0x13
     d90:	9c 89       	ldd	r25, Y+20	; 0x14
     d92:	01 97       	sbiw	r24, 0x01	; 1
     d94:	9c 8b       	std	Y+20, r25	; 0x14
     d96:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d98:	8b 89       	ldd	r24, Y+19	; 0x13
     d9a:	9c 89       	ldd	r25, Y+20	; 0x14
     d9c:	00 97       	sbiw	r24, 0x00	; 0
     d9e:	69 f7       	brne	.-38     	; 0xd7a <lcd_wr_command+0xfc>
     da0:	14 c0       	rjmp	.+40     	; 0xdca <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     da2:	6d 89       	ldd	r22, Y+21	; 0x15
     da4:	7e 89       	ldd	r23, Y+22	; 0x16
     da6:	8f 89       	ldd	r24, Y+23	; 0x17
     da8:	98 8d       	ldd	r25, Y+24	; 0x18
     daa:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
     dae:	dc 01       	movw	r26, r24
     db0:	cb 01       	movw	r24, r22
     db2:	9c 8b       	std	Y+20, r25	; 0x14
     db4:	8b 8b       	std	Y+19, r24	; 0x13
     db6:	8b 89       	ldd	r24, Y+19	; 0x13
     db8:	9c 89       	ldd	r25, Y+20	; 0x14
     dba:	98 8b       	std	Y+16, r25	; 0x10
     dbc:	8f 87       	std	Y+15, r24	; 0x0f
     dbe:	8f 85       	ldd	r24, Y+15	; 0x0f
     dc0:	98 89       	ldd	r25, Y+16	; 0x10
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	f1 f7       	brne	.-4      	; 0xdc2 <lcd_wr_command+0x144>
     dc6:	98 8b       	std	Y+16, r25	; 0x10
     dc8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
     dca:	a8 e2       	ldi	r26, 0x28	; 40
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	e8 e2       	ldi	r30, 0x28	; 40
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	8b 7f       	andi	r24, 0xFB	; 251
     dd6:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
     dd8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dda:	8f 70       	andi	r24, 0x0F	; 15
     ddc:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
     dde:	8e 8d       	ldd	r24, Y+30	; 0x1e
     de0:	82 95       	swap	r24
     de2:	80 7f       	andi	r24, 0xF0	; 240
     de4:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
     de6:	a8 e2       	ldi	r26, 0x28	; 40
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e8 e2       	ldi	r30, 0x28	; 40
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	8f 70       	andi	r24, 0x0F	; 15
     df2:	8c 93       	st	X, r24
	lcd_port |= cmd;
     df4:	a8 e2       	ldi	r26, 0x28	; 40
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e8 e2       	ldi	r30, 0x28	; 40
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	90 81       	ld	r25, Z
     dfe:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e00:	89 2b       	or	r24, r25
     e02:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     e04:	a8 e2       	ldi	r26, 0x28	; 40
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e8 e2       	ldi	r30, 0x28	; 40
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	8e 7f       	andi	r24, 0xFE	; 254
     e10:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     e12:	a8 e2       	ldi	r26, 0x28	; 40
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e8 e2       	ldi	r30, 0x28	; 40
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	8d 7f       	andi	r24, 0xFD	; 253
     e1e:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     e20:	a8 e2       	ldi	r26, 0x28	; 40
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e8 e2       	ldi	r30, 0x28	; 40
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	84 60       	ori	r24, 0x04	; 4
     e2c:	8c 93       	st	X, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	a0 ea       	ldi	r26, 0xA0	; 160
     e34:	b0 e4       	ldi	r27, 0x40	; 64
     e36:	8b 87       	std	Y+11, r24	; 0x0b
     e38:	9c 87       	std	Y+12, r25	; 0x0c
     e3a:	ad 87       	std	Y+13, r26	; 0x0d
     e3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e3e:	6b 85       	ldd	r22, Y+11	; 0x0b
     e40:	7c 85       	ldd	r23, Y+12	; 0x0c
     e42:	8d 85       	ldd	r24, Y+13	; 0x0d
     e44:	9e 85       	ldd	r25, Y+14	; 0x0e
     e46:	26 e6       	ldi	r18, 0x66	; 102
     e48:	36 e6       	ldi	r19, 0x66	; 102
     e4a:	46 e6       	ldi	r20, 0x66	; 102
     e4c:	55 e4       	ldi	r21, 0x45	; 69
     e4e:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	8f 83       	std	Y+7, r24	; 0x07
     e58:	98 87       	std	Y+8, r25	; 0x08
     e5a:	a9 87       	std	Y+9, r26	; 0x09
     e5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e5e:	6f 81       	ldd	r22, Y+7	; 0x07
     e60:	78 85       	ldd	r23, Y+8	; 0x08
     e62:	89 85       	ldd	r24, Y+9	; 0x09
     e64:	9a 85       	ldd	r25, Y+10	; 0x0a
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	40 e8       	ldi	r20, 0x80	; 128
     e6c:	5f e3       	ldi	r21, 0x3F	; 63
     e6e:	0e 94 68 22 	call	0x44d0	; 0x44d0 <__ltsf2>
     e72:	88 23       	and	r24, r24
     e74:	2c f4       	brge	.+10     	; 0xe80 <lcd_wr_command+0x202>
		__ticks = 1;
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	9e 83       	std	Y+6, r25	; 0x06
     e7c:	8d 83       	std	Y+5, r24	; 0x05
     e7e:	3f c0       	rjmp	.+126    	; 0xefe <lcd_wr_command+0x280>
	else if (__tmp > 65535)
     e80:	6f 81       	ldd	r22, Y+7	; 0x07
     e82:	78 85       	ldd	r23, Y+8	; 0x08
     e84:	89 85       	ldd	r24, Y+9	; 0x09
     e86:	9a 85       	ldd	r25, Y+10	; 0x0a
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	3f ef       	ldi	r19, 0xFF	; 255
     e8c:	4f e7       	ldi	r20, 0x7F	; 127
     e8e:	57 e4       	ldi	r21, 0x47	; 71
     e90:	0e 94 08 22 	call	0x4410	; 0x4410 <__gtsf2>
     e94:	18 16       	cp	r1, r24
     e96:	4c f5       	brge	.+82     	; 0xeea <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e98:	6b 85       	ldd	r22, Y+11	; 0x0b
     e9a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e9c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e9e:	9e 85       	ldd	r25, Y+14	; 0x0e
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	40 e2       	ldi	r20, 0x20	; 32
     ea6:	51 e4       	ldi	r21, 0x41	; 65
     ea8:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
     eac:	dc 01       	movw	r26, r24
     eae:	cb 01       	movw	r24, r22
     eb0:	bc 01       	movw	r22, r24
     eb2:	cd 01       	movw	r24, r26
     eb4:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
     eb8:	dc 01       	movw	r26, r24
     eba:	cb 01       	movw	r24, r22
     ebc:	9e 83       	std	Y+6, r25	; 0x06
     ebe:	8d 83       	std	Y+5, r24	; 0x05
     ec0:	0f c0       	rjmp	.+30     	; 0xee0 <lcd_wr_command+0x262>
     ec2:	80 e7       	ldi	r24, 0x70	; 112
     ec4:	91 e0       	ldi	r25, 0x01	; 1
     ec6:	9c 83       	std	Y+4, r25	; 0x04
     ec8:	8b 83       	std	Y+3, r24	; 0x03
     eca:	8b 81       	ldd	r24, Y+3	; 0x03
     ecc:	9c 81       	ldd	r25, Y+4	; 0x04
     ece:	01 97       	sbiw	r24, 0x01	; 1
     ed0:	f1 f7       	brne	.-4      	; 0xece <lcd_wr_command+0x250>
     ed2:	9c 83       	std	Y+4, r25	; 0x04
     ed4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ed6:	8d 81       	ldd	r24, Y+5	; 0x05
     ed8:	9e 81       	ldd	r25, Y+6	; 0x06
     eda:	01 97       	sbiw	r24, 0x01	; 1
     edc:	9e 83       	std	Y+6, r25	; 0x06
     ede:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee0:	8d 81       	ldd	r24, Y+5	; 0x05
     ee2:	9e 81       	ldd	r25, Y+6	; 0x06
     ee4:	00 97       	sbiw	r24, 0x00	; 0
     ee6:	69 f7       	brne	.-38     	; 0xec2 <lcd_wr_command+0x244>
     ee8:	14 c0       	rjmp	.+40     	; 0xf12 <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eea:	6f 81       	ldd	r22, Y+7	; 0x07
     eec:	78 85       	ldd	r23, Y+8	; 0x08
     eee:	89 85       	ldd	r24, Y+9	; 0x09
     ef0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef2:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	9e 83       	std	Y+6, r25	; 0x06
     efc:	8d 83       	std	Y+5, r24	; 0x05
     efe:	8d 81       	ldd	r24, Y+5	; 0x05
     f00:	9e 81       	ldd	r25, Y+6	; 0x06
     f02:	9a 83       	std	Y+2, r25	; 0x02
     f04:	89 83       	std	Y+1, r24	; 0x01
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	9a 81       	ldd	r25, Y+2	; 0x02
     f0a:	01 97       	sbiw	r24, 0x01	; 1
     f0c:	f1 f7       	brne	.-4      	; 0xf0a <lcd_wr_command+0x28c>
     f0e:	9a 83       	std	Y+2, r25	; 0x02
     f10:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
     f12:	a8 e2       	ldi	r26, 0x28	; 40
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	e8 e2       	ldi	r30, 0x28	; 40
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	8b 7f       	andi	r24, 0xFB	; 251
     f1e:	8c 93       	st	X, r24
}
     f20:	6e 96       	adiw	r28, 0x1e	; 30
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	f8 94       	cli
     f26:	de bf       	out	0x3e, r29	; 62
     f28:	0f be       	out	0x3f, r0	; 63
     f2a:	cd bf       	out	0x3d, r28	; 61
     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	08 95       	ret

00000f32 <lcd_wr_char>:

//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
     f3a:	6e 97       	sbiw	r28, 0x1e	; 30
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	f8 94       	cli
     f40:	de bf       	out	0x3e, r29	; 62
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	cd bf       	out	0x3d, r28	; 61
     f46:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
     f48:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f4a:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
     f4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f4e:	80 7f       	andi	r24, 0xF0	; 240
     f50:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     f52:	a8 e2       	ldi	r26, 0x28	; 40
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e8 e2       	ldi	r30, 0x28	; 40
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	8f 70       	andi	r24, 0x0F	; 15
     f5e:	8c 93       	st	X, r24
	lcd_port |= temp;
     f60:	a8 e2       	ldi	r26, 0x28	; 40
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e8 e2       	ldi	r30, 0x28	; 40
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	90 81       	ld	r25, Z
     f6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f6c:	89 2b       	or	r24, r25
     f6e:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
     f70:	a8 e2       	ldi	r26, 0x28	; 40
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e8 e2       	ldi	r30, 0x28	; 40
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	81 60       	ori	r24, 0x01	; 1
     f7c:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     f7e:	a8 e2       	ldi	r26, 0x28	; 40
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e8 e2       	ldi	r30, 0x28	; 40
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	8d 7f       	andi	r24, 0xFD	; 253
     f8a:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     f8c:	a8 e2       	ldi	r26, 0x28	; 40
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e8 e2       	ldi	r30, 0x28	; 40
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	84 60       	ori	r24, 0x04	; 4
     f98:	8c 93       	st	X, r24
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	a0 ea       	ldi	r26, 0xA0	; 160
     fa0:	b0 e4       	ldi	r27, 0x40	; 64
     fa2:	89 8f       	std	Y+25, r24	; 0x19
     fa4:	9a 8f       	std	Y+26, r25	; 0x1a
     fa6:	ab 8f       	std	Y+27, r26	; 0x1b
     fa8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     faa:	69 8d       	ldd	r22, Y+25	; 0x19
     fac:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fae:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fb2:	26 e6       	ldi	r18, 0x66	; 102
     fb4:	36 e6       	ldi	r19, 0x66	; 102
     fb6:	46 e6       	ldi	r20, 0x66	; 102
     fb8:	55 e4       	ldi	r21, 0x45	; 69
     fba:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
     fbe:	dc 01       	movw	r26, r24
     fc0:	cb 01       	movw	r24, r22
     fc2:	8d 8b       	std	Y+21, r24	; 0x15
     fc4:	9e 8b       	std	Y+22, r25	; 0x16
     fc6:	af 8b       	std	Y+23, r26	; 0x17
     fc8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fca:	6d 89       	ldd	r22, Y+21	; 0x15
     fcc:	7e 89       	ldd	r23, Y+22	; 0x16
     fce:	8f 89       	ldd	r24, Y+23	; 0x17
     fd0:	98 8d       	ldd	r25, Y+24	; 0x18
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	40 e8       	ldi	r20, 0x80	; 128
     fd8:	5f e3       	ldi	r21, 0x3F	; 63
     fda:	0e 94 68 22 	call	0x44d0	; 0x44d0 <__ltsf2>
     fde:	88 23       	and	r24, r24
     fe0:	2c f4       	brge	.+10     	; 0xfec <lcd_wr_char+0xba>
		__ticks = 1;
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	9c 8b       	std	Y+20, r25	; 0x14
     fe8:	8b 8b       	std	Y+19, r24	; 0x13
     fea:	3f c0       	rjmp	.+126    	; 0x106a <lcd_wr_char+0x138>
	else if (__tmp > 65535)
     fec:	6d 89       	ldd	r22, Y+21	; 0x15
     fee:	7e 89       	ldd	r23, Y+22	; 0x16
     ff0:	8f 89       	ldd	r24, Y+23	; 0x17
     ff2:	98 8d       	ldd	r25, Y+24	; 0x18
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	3f ef       	ldi	r19, 0xFF	; 255
     ff8:	4f e7       	ldi	r20, 0x7F	; 127
     ffa:	57 e4       	ldi	r21, 0x47	; 71
     ffc:	0e 94 08 22 	call	0x4410	; 0x4410 <__gtsf2>
    1000:	18 16       	cp	r1, r24
    1002:	4c f5       	brge	.+82     	; 0x1056 <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1004:	69 8d       	ldd	r22, Y+25	; 0x19
    1006:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1008:	8b 8d       	ldd	r24, Y+27	; 0x1b
    100a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	40 e2       	ldi	r20, 0x20	; 32
    1012:	51 e4       	ldi	r21, 0x41	; 65
    1014:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
    1018:	dc 01       	movw	r26, r24
    101a:	cb 01       	movw	r24, r22
    101c:	bc 01       	movw	r22, r24
    101e:	cd 01       	movw	r24, r26
    1020:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
    1024:	dc 01       	movw	r26, r24
    1026:	cb 01       	movw	r24, r22
    1028:	9c 8b       	std	Y+20, r25	; 0x14
    102a:	8b 8b       	std	Y+19, r24	; 0x13
    102c:	0f c0       	rjmp	.+30     	; 0x104c <lcd_wr_char+0x11a>
    102e:	80 e7       	ldi	r24, 0x70	; 112
    1030:	91 e0       	ldi	r25, 0x01	; 1
    1032:	9a 8b       	std	Y+18, r25	; 0x12
    1034:	89 8b       	std	Y+17, r24	; 0x11
    1036:	89 89       	ldd	r24, Y+17	; 0x11
    1038:	9a 89       	ldd	r25, Y+18	; 0x12
    103a:	01 97       	sbiw	r24, 0x01	; 1
    103c:	f1 f7       	brne	.-4      	; 0x103a <lcd_wr_char+0x108>
    103e:	9a 8b       	std	Y+18, r25	; 0x12
    1040:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1042:	8b 89       	ldd	r24, Y+19	; 0x13
    1044:	9c 89       	ldd	r25, Y+20	; 0x14
    1046:	01 97       	sbiw	r24, 0x01	; 1
    1048:	9c 8b       	std	Y+20, r25	; 0x14
    104a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    104c:	8b 89       	ldd	r24, Y+19	; 0x13
    104e:	9c 89       	ldd	r25, Y+20	; 0x14
    1050:	00 97       	sbiw	r24, 0x00	; 0
    1052:	69 f7       	brne	.-38     	; 0x102e <lcd_wr_char+0xfc>
    1054:	14 c0       	rjmp	.+40     	; 0x107e <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1056:	6d 89       	ldd	r22, Y+21	; 0x15
    1058:	7e 89       	ldd	r23, Y+22	; 0x16
    105a:	8f 89       	ldd	r24, Y+23	; 0x17
    105c:	98 8d       	ldd	r25, Y+24	; 0x18
    105e:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
    1062:	dc 01       	movw	r26, r24
    1064:	cb 01       	movw	r24, r22
    1066:	9c 8b       	std	Y+20, r25	; 0x14
    1068:	8b 8b       	std	Y+19, r24	; 0x13
    106a:	8b 89       	ldd	r24, Y+19	; 0x13
    106c:	9c 89       	ldd	r25, Y+20	; 0x14
    106e:	98 8b       	std	Y+16, r25	; 0x10
    1070:	8f 87       	std	Y+15, r24	; 0x0f
    1072:	8f 85       	ldd	r24, Y+15	; 0x0f
    1074:	98 89       	ldd	r25, Y+16	; 0x10
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	f1 f7       	brne	.-4      	; 0x1076 <lcd_wr_char+0x144>
    107a:	98 8b       	std	Y+16, r25	; 0x10
    107c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    107e:	a8 e2       	ldi	r26, 0x28	; 40
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	e8 e2       	ldi	r30, 0x28	; 40
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	8b 7f       	andi	r24, 0xFB	; 251
    108a:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    108c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    108e:	8f 70       	andi	r24, 0x0F	; 15
    1090:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    1092:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1094:	82 95       	swap	r24
    1096:	80 7f       	andi	r24, 0xF0	; 240
    1098:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    109a:	a8 e2       	ldi	r26, 0x28	; 40
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e8 e2       	ldi	r30, 0x28	; 40
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	8f 70       	andi	r24, 0x0F	; 15
    10a6:	8c 93       	st	X, r24
	lcd_port |= letter;
    10a8:	a8 e2       	ldi	r26, 0x28	; 40
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e8 e2       	ldi	r30, 0x28	; 40
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	90 81       	ld	r25, Z
    10b2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10b4:	89 2b       	or	r24, r25
    10b6:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    10b8:	a8 e2       	ldi	r26, 0x28	; 40
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e8 e2       	ldi	r30, 0x28	; 40
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	81 60       	ori	r24, 0x01	; 1
    10c4:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    10c6:	a8 e2       	ldi	r26, 0x28	; 40
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e8 e2       	ldi	r30, 0x28	; 40
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	8d 7f       	andi	r24, 0xFD	; 253
    10d2:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    10d4:	a8 e2       	ldi	r26, 0x28	; 40
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e8 e2       	ldi	r30, 0x28	; 40
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	84 60       	ori	r24, 0x04	; 4
    10e0:	8c 93       	st	X, r24
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	a0 ea       	ldi	r26, 0xA0	; 160
    10e8:	b0 e4       	ldi	r27, 0x40	; 64
    10ea:	8b 87       	std	Y+11, r24	; 0x0b
    10ec:	9c 87       	std	Y+12, r25	; 0x0c
    10ee:	ad 87       	std	Y+13, r26	; 0x0d
    10f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    10f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    10f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    10f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    10fa:	26 e6       	ldi	r18, 0x66	; 102
    10fc:	36 e6       	ldi	r19, 0x66	; 102
    10fe:	46 e6       	ldi	r20, 0x66	; 102
    1100:	55 e4       	ldi	r21, 0x45	; 69
    1102:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
    1106:	dc 01       	movw	r26, r24
    1108:	cb 01       	movw	r24, r22
    110a:	8f 83       	std	Y+7, r24	; 0x07
    110c:	98 87       	std	Y+8, r25	; 0x08
    110e:	a9 87       	std	Y+9, r26	; 0x09
    1110:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1112:	6f 81       	ldd	r22, Y+7	; 0x07
    1114:	78 85       	ldd	r23, Y+8	; 0x08
    1116:	89 85       	ldd	r24, Y+9	; 0x09
    1118:	9a 85       	ldd	r25, Y+10	; 0x0a
    111a:	20 e0       	ldi	r18, 0x00	; 0
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	40 e8       	ldi	r20, 0x80	; 128
    1120:	5f e3       	ldi	r21, 0x3F	; 63
    1122:	0e 94 68 22 	call	0x44d0	; 0x44d0 <__ltsf2>
    1126:	88 23       	and	r24, r24
    1128:	2c f4       	brge	.+10     	; 0x1134 <lcd_wr_char+0x202>
		__ticks = 1;
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	9e 83       	std	Y+6, r25	; 0x06
    1130:	8d 83       	std	Y+5, r24	; 0x05
    1132:	3f c0       	rjmp	.+126    	; 0x11b2 <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    1134:	6f 81       	ldd	r22, Y+7	; 0x07
    1136:	78 85       	ldd	r23, Y+8	; 0x08
    1138:	89 85       	ldd	r24, Y+9	; 0x09
    113a:	9a 85       	ldd	r25, Y+10	; 0x0a
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	3f ef       	ldi	r19, 0xFF	; 255
    1140:	4f e7       	ldi	r20, 0x7F	; 127
    1142:	57 e4       	ldi	r21, 0x47	; 71
    1144:	0e 94 08 22 	call	0x4410	; 0x4410 <__gtsf2>
    1148:	18 16       	cp	r1, r24
    114a:	4c f5       	brge	.+82     	; 0x119e <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    114c:	6b 85       	ldd	r22, Y+11	; 0x0b
    114e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1150:	8d 85       	ldd	r24, Y+13	; 0x0d
    1152:	9e 85       	ldd	r25, Y+14	; 0x0e
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	40 e2       	ldi	r20, 0x20	; 32
    115a:	51 e4       	ldi	r21, 0x41	; 65
    115c:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
    1160:	dc 01       	movw	r26, r24
    1162:	cb 01       	movw	r24, r22
    1164:	bc 01       	movw	r22, r24
    1166:	cd 01       	movw	r24, r26
    1168:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
    116c:	dc 01       	movw	r26, r24
    116e:	cb 01       	movw	r24, r22
    1170:	9e 83       	std	Y+6, r25	; 0x06
    1172:	8d 83       	std	Y+5, r24	; 0x05
    1174:	0f c0       	rjmp	.+30     	; 0x1194 <lcd_wr_char+0x262>
    1176:	80 e7       	ldi	r24, 0x70	; 112
    1178:	91 e0       	ldi	r25, 0x01	; 1
    117a:	9c 83       	std	Y+4, r25	; 0x04
    117c:	8b 83       	std	Y+3, r24	; 0x03
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	9c 81       	ldd	r25, Y+4	; 0x04
    1182:	01 97       	sbiw	r24, 0x01	; 1
    1184:	f1 f7       	brne	.-4      	; 0x1182 <lcd_wr_char+0x250>
    1186:	9c 83       	std	Y+4, r25	; 0x04
    1188:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    118a:	8d 81       	ldd	r24, Y+5	; 0x05
    118c:	9e 81       	ldd	r25, Y+6	; 0x06
    118e:	01 97       	sbiw	r24, 0x01	; 1
    1190:	9e 83       	std	Y+6, r25	; 0x06
    1192:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1194:	8d 81       	ldd	r24, Y+5	; 0x05
    1196:	9e 81       	ldd	r25, Y+6	; 0x06
    1198:	00 97       	sbiw	r24, 0x00	; 0
    119a:	69 f7       	brne	.-38     	; 0x1176 <lcd_wr_char+0x244>
    119c:	14 c0       	rjmp	.+40     	; 0x11c6 <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    119e:	6f 81       	ldd	r22, Y+7	; 0x07
    11a0:	78 85       	ldd	r23, Y+8	; 0x08
    11a2:	89 85       	ldd	r24, Y+9	; 0x09
    11a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a6:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	9e 83       	std	Y+6, r25	; 0x06
    11b0:	8d 83       	std	Y+5, r24	; 0x05
    11b2:	8d 81       	ldd	r24, Y+5	; 0x05
    11b4:	9e 81       	ldd	r25, Y+6	; 0x06
    11b6:	9a 83       	std	Y+2, r25	; 0x02
    11b8:	89 83       	std	Y+1, r24	; 0x01
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	9a 81       	ldd	r25, Y+2	; 0x02
    11be:	01 97       	sbiw	r24, 0x01	; 1
    11c0:	f1 f7       	brne	.-4      	; 0x11be <lcd_wr_char+0x28c>
    11c2:	9a 83       	std	Y+2, r25	; 0x02
    11c4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    11c6:	a8 e2       	ldi	r26, 0x28	; 40
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e8 e2       	ldi	r30, 0x28	; 40
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	8b 7f       	andi	r24, 0xFB	; 251
    11d2:	8c 93       	st	X, r24
}
    11d4:	6e 96       	adiw	r28, 0x1e	; 30
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	f8 94       	cli
    11da:	de bf       	out	0x3e, r29	; 62
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	cd bf       	out	0x3d, r28	; 61
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    11ee:	80 e8       	ldi	r24, 0x80	; 128
    11f0:	0e 94 3f 06 	call	0xc7e	; 0xc7e <lcd_wr_command>
}
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	08 95       	ret

000011fa <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	0f 92       	push	r0
    1200:	0f 92       	push	r0
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
    1206:	9a 83       	std	Y+2, r25	; 0x02
    1208:	89 83       	std	Y+1, r24	; 0x01
    120a:	0a c0       	rjmp	.+20     	; 0x1220 <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    120c:	e9 81       	ldd	r30, Y+1	; 0x01
    120e:	fa 81       	ldd	r31, Y+2	; 0x02
    1210:	80 81       	ld	r24, Z
    1212:	0e 94 99 07 	call	0xf32	; 0xf32 <lcd_wr_char>
		str++;
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	9a 81       	ldd	r25, Y+2	; 0x02
    121a:	01 96       	adiw	r24, 0x01	; 1
    121c:	9a 83       	std	Y+2, r25	; 0x02
    121e:	89 83       	std	Y+1, r24	; 0x01


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
    1220:	e9 81       	ldd	r30, Y+1	; 0x01
    1222:	fa 81       	ldd	r31, Y+2	; 0x02
    1224:	80 81       	ld	r24, Z
    1226:	88 23       	and	r24, r24
    1228:	89 f7       	brne	.-30     	; 0x120c <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	cf 91       	pop	r28
    1230:	df 91       	pop	r29
    1232:	08 95       	ret

00001234 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	00 d0       	rcall	.+0      	; 0x123a <lcd_cursor+0x6>
    123a:	0f 92       	push	r0
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
    1240:	89 83       	std	Y+1, r24	; 0x01
    1242:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	3c 83       	std	Y+4, r19	; 0x04
    124c:	2b 83       	std	Y+3, r18	; 0x03
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	9c 81       	ldd	r25, Y+4	; 0x04
    1252:	82 30       	cpi	r24, 0x02	; 2
    1254:	91 05       	cpc	r25, r1
    1256:	d9 f0       	breq	.+54     	; 0x128e <lcd_cursor+0x5a>
    1258:	2b 81       	ldd	r18, Y+3	; 0x03
    125a:	3c 81       	ldd	r19, Y+4	; 0x04
    125c:	23 30       	cpi	r18, 0x03	; 3
    125e:	31 05       	cpc	r19, r1
    1260:	34 f4       	brge	.+12     	; 0x126e <lcd_cursor+0x3a>
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	9c 81       	ldd	r25, Y+4	; 0x04
    1266:	81 30       	cpi	r24, 0x01	; 1
    1268:	91 05       	cpc	r25, r1
    126a:	61 f0       	breq	.+24     	; 0x1284 <lcd_cursor+0x50>
    126c:	1e c0       	rjmp	.+60     	; 0x12aa <lcd_cursor+0x76>
    126e:	2b 81       	ldd	r18, Y+3	; 0x03
    1270:	3c 81       	ldd	r19, Y+4	; 0x04
    1272:	23 30       	cpi	r18, 0x03	; 3
    1274:	31 05       	cpc	r19, r1
    1276:	81 f0       	breq	.+32     	; 0x1298 <lcd_cursor+0x64>
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	9c 81       	ldd	r25, Y+4	; 0x04
    127c:	84 30       	cpi	r24, 0x04	; 4
    127e:	91 05       	cpc	r25, r1
    1280:	81 f0       	breq	.+32     	; 0x12a2 <lcd_cursor+0x6e>
    1282:	13 c0       	rjmp	.+38     	; 0x12aa <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	81 58       	subi	r24, 0x81	; 129
    1288:	0e 94 3f 06 	call	0xc7e	; 0xc7e <lcd_wr_command>
    128c:	0e c0       	rjmp	.+28     	; 0x12aa <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	81 54       	subi	r24, 0x41	; 65
    1292:	0e 94 3f 06 	call	0xc7e	; 0xc7e <lcd_wr_command>
    1296:	09 c0       	rjmp	.+18     	; 0x12aa <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	8d 56       	subi	r24, 0x6D	; 109
    129c:	0e 94 3f 06 	call	0xc7e	; 0xc7e <lcd_wr_command>
    12a0:	04 c0       	rjmp	.+8      	; 0x12aa <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	8d 52       	subi	r24, 0x2D	; 45
    12a6:	0e 94 3f 06 	call	0xc7e	; 0xc7e <lcd_wr_command>
		default: break;
	}
}
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	cf 91       	pop	r28
    12b4:	df 91       	pop	r29
    12b6:	08 95       	ret

000012b8 <lcd_print>:

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    12b8:	df 93       	push	r29
    12ba:	cf 93       	push	r28
    12bc:	cd b7       	in	r28, 0x3d	; 61
    12be:	de b7       	in	r29, 0x3e	; 62
    12c0:	27 97       	sbiw	r28, 0x07	; 7
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	f8 94       	cli
    12c6:	de bf       	out	0x3e, r29	; 62
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	cd bf       	out	0x3d, r28	; 61
    12cc:	8a 83       	std	Y+2, r24	; 0x02
    12ce:	6b 83       	std	Y+3, r22	; 0x03
    12d0:	5d 83       	std	Y+5, r21	; 0x05
    12d2:	4c 83       	std	Y+4, r20	; 0x04
    12d4:	3f 83       	std	Y+7, r19	; 0x07
    12d6:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    12d8:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    12da:	8a 81       	ldd	r24, Y+2	; 0x02
    12dc:	88 23       	and	r24, r24
    12de:	19 f0       	breq	.+6      	; 0x12e6 <lcd_print+0x2e>
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
    12e2:	88 23       	and	r24, r24
    12e4:	19 f4       	brne	.+6      	; 0x12ec <lcd_print+0x34>
	{
		lcd_home();
    12e6:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <lcd_home>
    12ea:	04 c0       	rjmp	.+8      	; 0x12f4 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	6b 81       	ldd	r22, Y+3	; 0x03
    12f0:	0e 94 1a 09 	call	0x1234	; 0x1234 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    12f4:	8e 81       	ldd	r24, Y+6	; 0x06
    12f6:	9f 81       	ldd	r25, Y+7	; 0x07
    12f8:	85 30       	cpi	r24, 0x05	; 5
    12fa:	91 05       	cpc	r25, r1
    12fc:	19 f0       	breq	.+6      	; 0x1304 <lcd_print+0x4c>
    12fe:	89 81       	ldd	r24, Y+1	; 0x01
    1300:	81 30       	cpi	r24, 0x01	; 1
    1302:	a9 f4       	brne	.+42     	; 0x132e <lcd_print+0x76>
	{
		million=value/10000+48;
    1304:	8c 81       	ldd	r24, Y+4	; 0x04
    1306:	9d 81       	ldd	r25, Y+5	; 0x05
    1308:	20 e1       	ldi	r18, 0x10	; 16
    130a:	37 e2       	ldi	r19, 0x27	; 39
    130c:	b9 01       	movw	r22, r18
    130e:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <__udivmodhi4>
    1312:	cb 01       	movw	r24, r22
    1314:	c0 96       	adiw	r24, 0x30	; 48
    1316:	90 93 4d 04 	sts	0x044D, r25
    131a:	80 93 4c 04 	sts	0x044C, r24
		lcd_wr_char(million);
    131e:	80 91 4c 04 	lds	r24, 0x044C
    1322:	90 91 4d 04 	lds	r25, 0x044D
    1326:	0e 94 99 07 	call	0xf32	; 0xf32 <lcd_wr_char>
		flag=1;
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    132e:	8e 81       	ldd	r24, Y+6	; 0x06
    1330:	9f 81       	ldd	r25, Y+7	; 0x07
    1332:	84 30       	cpi	r24, 0x04	; 4
    1334:	91 05       	cpc	r25, r1
    1336:	19 f0       	breq	.+6      	; 0x133e <lcd_print+0x86>
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	81 30       	cpi	r24, 0x01	; 1
    133c:	11 f5       	brne	.+68     	; 0x1382 <lcd_print+0xca>
	{
		temp = value/1000;
    133e:	8c 81       	ldd	r24, Y+4	; 0x04
    1340:	9d 81       	ldd	r25, Y+5	; 0x05
    1342:	28 ee       	ldi	r18, 0xE8	; 232
    1344:	33 e0       	ldi	r19, 0x03	; 3
    1346:	b9 01       	movw	r22, r18
    1348:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <__udivmodhi4>
    134c:	cb 01       	movw	r24, r22
    134e:	90 93 51 04 	sts	0x0451, r25
    1352:	80 93 50 04 	sts	0x0450, r24
		thousand = temp%10 + 48;
    1356:	80 91 50 04 	lds	r24, 0x0450
    135a:	90 91 51 04 	lds	r25, 0x0451
    135e:	2a e0       	ldi	r18, 0x0A	; 10
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	b9 01       	movw	r22, r18
    1364:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <__udivmodhi4>
    1368:	c0 96       	adiw	r24, 0x30	; 48
    136a:	90 93 61 04 	sts	0x0461, r25
    136e:	80 93 60 04 	sts	0x0460, r24
		lcd_wr_char(thousand);
    1372:	80 91 60 04 	lds	r24, 0x0460
    1376:	90 91 61 04 	lds	r25, 0x0461
    137a:	0e 94 99 07 	call	0xf32	; 0xf32 <lcd_wr_char>
		flag=1;
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    1382:	8e 81       	ldd	r24, Y+6	; 0x06
    1384:	9f 81       	ldd	r25, Y+7	; 0x07
    1386:	83 30       	cpi	r24, 0x03	; 3
    1388:	91 05       	cpc	r25, r1
    138a:	19 f0       	breq	.+6      	; 0x1392 <lcd_print+0xda>
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	81 30       	cpi	r24, 0x01	; 1
    1390:	11 f5       	brne	.+68     	; 0x13d6 <lcd_print+0x11e>
	{
		temp = value/100;
    1392:	8c 81       	ldd	r24, Y+4	; 0x04
    1394:	9d 81       	ldd	r25, Y+5	; 0x05
    1396:	24 e6       	ldi	r18, 0x64	; 100
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	b9 01       	movw	r22, r18
    139c:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <__udivmodhi4>
    13a0:	cb 01       	movw	r24, r22
    13a2:	90 93 51 04 	sts	0x0451, r25
    13a6:	80 93 50 04 	sts	0x0450, r24
		hundred = temp%10 + 48;
    13aa:	80 91 50 04 	lds	r24, 0x0450
    13ae:	90 91 51 04 	lds	r25, 0x0451
    13b2:	2a e0       	ldi	r18, 0x0A	; 10
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	b9 01       	movw	r22, r18
    13b8:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <__udivmodhi4>
    13bc:	c0 96       	adiw	r24, 0x30	; 48
    13be:	90 93 5d 04 	sts	0x045D, r25
    13c2:	80 93 5c 04 	sts	0x045C, r24
		lcd_wr_char(hundred);
    13c6:	80 91 5c 04 	lds	r24, 0x045C
    13ca:	90 91 5d 04 	lds	r25, 0x045D
    13ce:	0e 94 99 07 	call	0xf32	; 0xf32 <lcd_wr_char>
		flag=1;
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    13d6:	8e 81       	ldd	r24, Y+6	; 0x06
    13d8:	9f 81       	ldd	r25, Y+7	; 0x07
    13da:	82 30       	cpi	r24, 0x02	; 2
    13dc:	91 05       	cpc	r25, r1
    13de:	19 f0       	breq	.+6      	; 0x13e6 <lcd_print+0x12e>
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	81 30       	cpi	r24, 0x01	; 1
    13e4:	11 f5       	brne	.+68     	; 0x142a <lcd_print+0x172>
	{
		temp = value/10;
    13e6:	8c 81       	ldd	r24, Y+4	; 0x04
    13e8:	9d 81       	ldd	r25, Y+5	; 0x05
    13ea:	2a e0       	ldi	r18, 0x0A	; 10
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	b9 01       	movw	r22, r18
    13f0:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <__udivmodhi4>
    13f4:	cb 01       	movw	r24, r22
    13f6:	90 93 51 04 	sts	0x0451, r25
    13fa:	80 93 50 04 	sts	0x0450, r24
		tens = temp%10 + 48;
    13fe:	80 91 50 04 	lds	r24, 0x0450
    1402:	90 91 51 04 	lds	r25, 0x0451
    1406:	2a e0       	ldi	r18, 0x0A	; 10
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	b9 01       	movw	r22, r18
    140c:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <__udivmodhi4>
    1410:	c0 96       	adiw	r24, 0x30	; 48
    1412:	90 93 54 04 	sts	0x0454, r25
    1416:	80 93 53 04 	sts	0x0453, r24
		lcd_wr_char(tens);
    141a:	80 91 53 04 	lds	r24, 0x0453
    141e:	90 91 54 04 	lds	r25, 0x0454
    1422:	0e 94 99 07 	call	0xf32	; 0xf32 <lcd_wr_char>
		flag=1;
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    142a:	8e 81       	ldd	r24, Y+6	; 0x06
    142c:	9f 81       	ldd	r25, Y+7	; 0x07
    142e:	81 30       	cpi	r24, 0x01	; 1
    1430:	91 05       	cpc	r25, r1
    1432:	19 f0       	breq	.+6      	; 0x143a <lcd_print+0x182>
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	81 30       	cpi	r24, 0x01	; 1
    1438:	91 f4       	brne	.+36     	; 0x145e <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    143a:	8c 81       	ldd	r24, Y+4	; 0x04
    143c:	9d 81       	ldd	r25, Y+5	; 0x05
    143e:	2a e0       	ldi	r18, 0x0A	; 10
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	b9 01       	movw	r22, r18
    1444:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <__udivmodhi4>
    1448:	c0 96       	adiw	r24, 0x30	; 48
    144a:	90 93 5f 04 	sts	0x045F, r25
    144e:	80 93 5e 04 	sts	0x045E, r24
		lcd_wr_char(unit);
    1452:	80 91 5e 04 	lds	r24, 0x045E
    1456:	90 91 5f 04 	lds	r25, 0x045F
    145a:	0e 94 99 07 	call	0xf32	; 0xf32 <lcd_wr_char>
	}
	if(digits>5)
    145e:	8e 81       	ldd	r24, Y+6	; 0x06
    1460:	9f 81       	ldd	r25, Y+7	; 0x07
    1462:	86 30       	cpi	r24, 0x06	; 6
    1464:	91 05       	cpc	r25, r1
    1466:	1c f0       	brlt	.+6      	; 0x146e <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    1468:	85 e4       	ldi	r24, 0x45	; 69
    146a:	0e 94 99 07 	call	0xf32	; 0xf32 <lcd_wr_char>
	}
	
}
    146e:	27 96       	adiw	r28, 0x07	; 7
    1470:	0f b6       	in	r0, 0x3f	; 63
    1472:	f8 94       	cli
    1474:	de bf       	out	0x3e, r29	; 62
    1476:	0f be       	out	0x3f, r0	; 63
    1478:	cd bf       	out	0x3d, r28	; 61
    147a:	cf 91       	pop	r28
    147c:	df 91       	pop	r29
    147e:	08 95       	ret

00001480 <adc_pin_config>:
int temp_switch=0;
int *actionlist;


void adc_pin_config()
{
    1480:	df 93       	push	r29
    1482:	cf 93       	push	r28
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
	DDRF = 0x00;
    1488:	e0 e3       	ldi	r30, 0x30	; 48
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	10 82       	st	Z, r1
	DDRK = 0x00;
    148e:	e7 e0       	ldi	r30, 0x07	; 7
    1490:	f1 e0       	ldi	r31, 0x01	; 1
    1492:	10 82       	st	Z, r1
}
    1494:	cf 91       	pop	r28
    1496:	df 91       	pop	r29
    1498:	08 95       	ret

0000149a <adc_init>:

void adc_init()
{
    149a:	df 93       	push	r29
    149c:	cf 93       	push	r28
    149e:	cd b7       	in	r28, 0x3d	; 61
    14a0:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x86;
    14a2:	ea e7       	ldi	r30, 0x7A	; 122
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	86 e8       	ldi	r24, 0x86	; 134
    14a8:	80 83       	st	Z, r24
	ADCSRB = 0x00;
    14aa:	eb e7       	ldi	r30, 0x7B	; 123
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	10 82       	st	Z, r1
	ADMUX = 0x20;
    14b0:	ec e7       	ldi	r30, 0x7C	; 124
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 e2       	ldi	r24, 0x20	; 32
    14b6:	80 83       	st	Z, r24
	ACSR = 0x80;
    14b8:	e0 e5       	ldi	r30, 0x50	; 80
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 e8       	ldi	r24, 0x80	; 128
    14be:	80 83       	st	Z, r24
}
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	08 95       	ret

000014c6 <velocity>:

void velocity(unsigned char left_vel, unsigned char right_vel)
{
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	0f 92       	push	r0
    14cc:	0f 92       	push	r0
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62
    14d2:	89 83       	std	Y+1, r24	; 0x01
    14d4:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = left_vel;
    14d6:	e8 e2       	ldi	r30, 0x28	; 40
    14d8:	f1 e0       	ldi	r31, 0x01	; 1
    14da:	89 81       	ldd	r24, Y+1	; 0x01
    14dc:	80 83       	st	Z, r24
	OCR5BL = right_vel;
    14de:	ea e2       	ldi	r30, 0x2A	; 42
    14e0:	f1 e0       	ldi	r31, 0x01	; 1
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	80 83       	st	Z, r24
}
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	08 95       	ret

000014f0 <adc_convert>:

unsigned char adc_convert(unsigned char channel)
{
    14f0:	df 93       	push	r29
    14f2:	cf 93       	push	r28
    14f4:	0f 92       	push	r0
    14f6:	0f 92       	push	r0
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
    14fc:	8a 83       	std	Y+2, r24	; 0x02
	if(channel > 7)
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	88 30       	cpi	r24, 0x08	; 8
    1502:	38 f0       	brcs	.+14     	; 0x1512 <adc_convert+0x22>
	{
		ADCSRB |= 0x08;
    1504:	ab e7       	ldi	r26, 0x7B	; 123
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	eb e7       	ldi	r30, 0x7B	; 123
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	88 60       	ori	r24, 0x08	; 8
    1510:	8c 93       	st	X, r24
	}
	ADMUX |= (channel&7);
    1512:	ac e7       	ldi	r26, 0x7C	; 124
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	ec e7       	ldi	r30, 0x7C	; 124
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	98 2f       	mov	r25, r24
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	87 70       	andi	r24, 0x07	; 7
    1522:	89 2b       	or	r24, r25
    1524:	8c 93       	st	X, r24
	ADCSRA |= 0x40;
    1526:	aa e7       	ldi	r26, 0x7A	; 122
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	ea e7       	ldi	r30, 0x7A	; 122
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	80 64       	ori	r24, 0x40	; 64
    1532:	8c 93       	st	X, r24
	while((ADCSRA & 0x10) == 0);
    1534:	ea e7       	ldi	r30, 0x7A	; 122
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	88 2f       	mov	r24, r24
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	80 71       	andi	r24, 0x10	; 16
    1540:	90 70       	andi	r25, 0x00	; 0
    1542:	00 97       	sbiw	r24, 0x00	; 0
    1544:	b9 f3       	breq	.-18     	; 0x1534 <adc_convert+0x44>
	unsigned char a = ADCH;
    1546:	e9 e7       	ldi	r30, 0x79	; 121
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	89 83       	std	Y+1, r24	; 0x01
	adc_init();
    154e:	0e 94 4d 0a 	call	0x149a	; 0x149a <adc_init>
	return a;
    1552:	89 81       	ldd	r24, Y+1	; 0x01
}
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	08 95       	ret

0000155e <servo1_pin_config>:

void servo1_pin_config (void)
{
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x20;  
    1566:	a4 e2       	ldi	r26, 0x24	; 36
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e4 e2       	ldi	r30, 0x24	; 36
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	80 62       	ori	r24, 0x20	; 32
    1572:	8c 93       	st	X, r24
 PORTB = PORTB | 0x20; 
    1574:	a5 e2       	ldi	r26, 0x25	; 37
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e5 e2       	ldi	r30, 0x25	; 37
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	80 62       	ori	r24, 0x20	; 32
    1580:	8c 93       	st	X, r24
}
    1582:	cf 91       	pop	r28
    1584:	df 91       	pop	r29
    1586:	08 95       	ret

00001588 <servo2_pin_config>:


void servo2_pin_config (void)
{
    1588:	df 93       	push	r29
    158a:	cf 93       	push	r28
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x40;  
    1590:	a4 e2       	ldi	r26, 0x24	; 36
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	e4 e2       	ldi	r30, 0x24	; 36
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	80 64       	ori	r24, 0x40	; 64
    159c:	8c 93       	st	X, r24
 PORTB = PORTB | 0x40; 
    159e:	a5 e2       	ldi	r26, 0x25	; 37
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e5 e2       	ldi	r30, 0x25	; 37
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	80 64       	ori	r24, 0x40	; 64
    15aa:	8c 93       	st	X, r24
}
    15ac:	cf 91       	pop	r28
    15ae:	df 91       	pop	r29
    15b0:	08 95       	ret

000015b2 <timer1_init>:

void timer1_init(void)
{
    15b2:	df 93       	push	r29
    15b4:	cf 93       	push	r28
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = 0x00; 
    15ba:	e1 e8       	ldi	r30, 0x81	; 129
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	10 82       	st	Z, r1
	TCNT1H = 0xFC; 
    15c0:	e5 e8       	ldi	r30, 0x85	; 133
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	8c ef       	ldi	r24, 0xFC	; 252
    15c6:	80 83       	st	Z, r24
	TCNT1L = 0x01;	
    15c8:	e4 e8       	ldi	r30, 0x84	; 132
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	80 83       	st	Z, r24
	OCR1AH = 0x03;	
    15d0:	e9 e8       	ldi	r30, 0x89	; 137
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	83 e0       	ldi	r24, 0x03	; 3
    15d6:	80 83       	st	Z, r24
	OCR1AL = 0xFF;	
    15d8:	e8 e8       	ldi	r30, 0x88	; 136
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	8f ef       	ldi	r24, 0xFF	; 255
    15de:	80 83       	st	Z, r24
	OCR1BH = 0x03;	
    15e0:	eb e8       	ldi	r30, 0x8B	; 139
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	83 e0       	ldi	r24, 0x03	; 3
    15e6:	80 83       	st	Z, r24
	OCR1BL = 0xFF;	
    15e8:	ea e8       	ldi	r30, 0x8A	; 138
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	8f ef       	ldi	r24, 0xFF	; 255
    15ee:	80 83       	st	Z, r24
	OCR1CH = 0x03;
    15f0:	ed e8       	ldi	r30, 0x8D	; 141
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	83 e0       	ldi	r24, 0x03	; 3
    15f6:	80 83       	st	Z, r24
	OCR1CL = 0xFF;	
    15f8:	ec e8       	ldi	r30, 0x8C	; 140
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	8f ef       	ldi	r24, 0xFF	; 255
    15fe:	80 83       	st	Z, r24
	ICR1H  = 0x03;	
    1600:	e7 e8       	ldi	r30, 0x87	; 135
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	83 e0       	ldi	r24, 0x03	; 3
    1606:	80 83       	st	Z, r24
	ICR1L  = 0xFF;
    1608:	e6 e8       	ldi	r30, 0x86	; 134
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	8f ef       	ldi	r24, 0xFF	; 255
    160e:	80 83       	st	Z, r24
	TCCR1A = 0xAB; 
    1610:	e0 e8       	ldi	r30, 0x80	; 128
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	8b ea       	ldi	r24, 0xAB	; 171
    1616:	80 83       	st	Z, r24
	TCCR1C = 0x00;
    1618:	e2 e8       	ldi	r30, 0x82	; 130
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	10 82       	st	Z, r1
	TCCR1B = 0x0C; 
    161e:	e1 e8       	ldi	r30, 0x81	; 129
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	8c e0       	ldi	r24, 0x0C	; 12
    1624:	80 83       	st	Z, r24
}
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	08 95       	ret

0000162c <servo_init>:

void servo_init()
{
    162c:	df 93       	push	r29
    162e:	cf 93       	push	r28
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
	servo1_pin_config();
    1634:	0e 94 af 0a 	call	0x155e	; 0x155e <servo1_pin_config>
	servo2_pin_config();
    1638:	0e 94 c4 0a 	call	0x1588	; 0x1588 <servo2_pin_config>
	timer1_init();
    163c:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <timer1_init>
}
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	08 95       	ret

00001646 <servo_1>:


void servo_1(unsigned char degrees)  
{
    1646:	0f 93       	push	r16
    1648:	1f 93       	push	r17
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	00 d0       	rcall	.+0      	; 0x1650 <servo_1+0xa>
    1650:	0f 92       	push	r0
    1652:	0f 92       	push	r0
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62
    1658:	8d 83       	std	Y+5, r24	; 0x05
	float PositionPanServo = 0;
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	a0 e0       	ldi	r26, 0x00	; 0
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	89 83       	std	Y+1, r24	; 0x01
    1664:	9a 83       	std	Y+2, r25	; 0x02
    1666:	ab 83       	std	Y+3, r26	; 0x03
    1668:	bc 83       	std	Y+4, r27	; 0x04
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
    166a:	8d 81       	ldd	r24, Y+5	; 0x05
    166c:	88 2f       	mov	r24, r24
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	a0 e0       	ldi	r26, 0x00	; 0
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	bc 01       	movw	r22, r24
    1676:	cd 01       	movw	r24, r26
    1678:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <__floatunsisf>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	bc 01       	movw	r22, r24
    1682:	cd 01       	movw	r24, r26
    1684:	2b e7       	ldi	r18, 0x7B	; 123
    1686:	34 e1       	ldi	r19, 0x14	; 20
    1688:	4e ee       	ldi	r20, 0xEE	; 238
    168a:	5f e3       	ldi	r21, 0x3F	; 63
    168c:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <__divsf3>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	bc 01       	movw	r22, r24
    1696:	cd 01       	movw	r24, r26
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	4c e0       	ldi	r20, 0x0C	; 12
    169e:	52 e4       	ldi	r21, 0x42	; 66
    16a0:	0e 94 35 20 	call	0x406a	; 0x406a <__addsf3>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	89 83       	std	Y+1, r24	; 0x01
    16aa:	9a 83       	std	Y+2, r25	; 0x02
    16ac:	ab 83       	std	Y+3, r26	; 0x03
    16ae:	bc 83       	std	Y+4, r27	; 0x04
	OCR1AH = 0x00;
    16b0:	e9 e8       	ldi	r30, 0x89	; 137
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	10 82       	st	Z, r1
	OCR1AL = (unsigned char) PositionPanServo;
    16b6:	08 e8       	ldi	r16, 0x88	; 136
    16b8:	10 e0       	ldi	r17, 0x00	; 0
    16ba:	69 81       	ldd	r22, Y+1	; 0x01
    16bc:	7a 81       	ldd	r23, Y+2	; 0x02
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	9c 81       	ldd	r25, Y+4	; 0x04
    16c2:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
    16c6:	dc 01       	movw	r26, r24
    16c8:	cb 01       	movw	r24, r22
    16ca:	f8 01       	movw	r30, r16
    16cc:	80 83       	st	Z, r24
}
    16ce:	0f 90       	pop	r0
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	cf 91       	pop	r28
    16da:	df 91       	pop	r29
    16dc:	1f 91       	pop	r17
    16de:	0f 91       	pop	r16
    16e0:	08 95       	ret

000016e2 <servo_2>:


void servo_2(unsigned char degrees)
{
    16e2:	0f 93       	push	r16
    16e4:	1f 93       	push	r17
    16e6:	df 93       	push	r29
    16e8:	cf 93       	push	r28
    16ea:	00 d0       	rcall	.+0      	; 0x16ec <servo_2+0xa>
    16ec:	0f 92       	push	r0
    16ee:	0f 92       	push	r0
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
    16f4:	8d 83       	std	Y+5, r24	; 0x05
	float PositionTiltServo = 0;
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	a0 e0       	ldi	r26, 0x00	; 0
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	89 83       	std	Y+1, r24	; 0x01
    1700:	9a 83       	std	Y+2, r25	; 0x02
    1702:	ab 83       	std	Y+3, r26	; 0x03
    1704:	bc 83       	std	Y+4, r27	; 0x04
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
    1706:	8d 81       	ldd	r24, Y+5	; 0x05
    1708:	88 2f       	mov	r24, r24
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	a0 e0       	ldi	r26, 0x00	; 0
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	bc 01       	movw	r22, r24
    1712:	cd 01       	movw	r24, r26
    1714:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <__floatunsisf>
    1718:	dc 01       	movw	r26, r24
    171a:	cb 01       	movw	r24, r22
    171c:	bc 01       	movw	r22, r24
    171e:	cd 01       	movw	r24, r26
    1720:	2b e7       	ldi	r18, 0x7B	; 123
    1722:	34 e1       	ldi	r19, 0x14	; 20
    1724:	4e ee       	ldi	r20, 0xEE	; 238
    1726:	5f e3       	ldi	r21, 0x3F	; 63
    1728:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <__divsf3>
    172c:	dc 01       	movw	r26, r24
    172e:	cb 01       	movw	r24, r22
    1730:	bc 01       	movw	r22, r24
    1732:	cd 01       	movw	r24, r26
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	4c e0       	ldi	r20, 0x0C	; 12
    173a:	52 e4       	ldi	r21, 0x42	; 66
    173c:	0e 94 35 20 	call	0x406a	; 0x406a <__addsf3>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	89 83       	std	Y+1, r24	; 0x01
    1746:	9a 83       	std	Y+2, r25	; 0x02
    1748:	ab 83       	std	Y+3, r26	; 0x03
    174a:	bc 83       	std	Y+4, r27	; 0x04
	OCR1BH = 0x00;
    174c:	eb e8       	ldi	r30, 0x8B	; 139
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	10 82       	st	Z, r1
	OCR1BL = (unsigned char) PositionTiltServo;
    1752:	0a e8       	ldi	r16, 0x8A	; 138
    1754:	10 e0       	ldi	r17, 0x00	; 0
    1756:	69 81       	ldd	r22, Y+1	; 0x01
    1758:	7a 81       	ldd	r23, Y+2	; 0x02
    175a:	8b 81       	ldd	r24, Y+3	; 0x03
    175c:	9c 81       	ldd	r25, Y+4	; 0x04
    175e:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
    1762:	dc 01       	movw	r26, r24
    1764:	cb 01       	movw	r24, r22
    1766:	f8 01       	movw	r30, r16
    1768:	80 83       	st	Z, r24
}
    176a:	0f 90       	pop	r0
    176c:	0f 90       	pop	r0
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	1f 91       	pop	r17
    177a:	0f 91       	pop	r16
    177c:	08 95       	ret

0000177e <pick_up_cone>:

void pick_up_cone()
{
    177e:	df 93       	push	r29
    1780:	cf 93       	push	r28
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62
    1786:	e8 97       	sbiw	r28, 0x38	; 56
    1788:	0f b6       	in	r0, 0x3f	; 63
    178a:	f8 94       	cli
    178c:	de bf       	out	0x3e, r29	; 62
    178e:	0f be       	out	0x3f, r0	; 63
    1790:	cd bf       	out	0x3d, r28	; 61
	
	servo_2(40);
    1792:	88 e2       	ldi	r24, 0x28	; 40
    1794:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <servo_2>
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	a6 e1       	ldi	r26, 0x16	; 22
    179e:	b4 e4       	ldi	r27, 0x44	; 68
    17a0:	8d ab       	std	Y+53, r24	; 0x35
    17a2:	9e ab       	std	Y+54, r25	; 0x36
    17a4:	af ab       	std	Y+55, r26	; 0x37
    17a6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a8:	6d a9       	ldd	r22, Y+53	; 0x35
    17aa:	7e a9       	ldd	r23, Y+54	; 0x36
    17ac:	8f a9       	ldd	r24, Y+55	; 0x37
    17ae:	98 ad       	ldd	r25, Y+56	; 0x38
    17b0:	26 e6       	ldi	r18, 0x66	; 102
    17b2:	36 e6       	ldi	r19, 0x66	; 102
    17b4:	46 e6       	ldi	r20, 0x66	; 102
    17b6:	55 e4       	ldi	r21, 0x45	; 69
    17b8:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
    17bc:	dc 01       	movw	r26, r24
    17be:	cb 01       	movw	r24, r22
    17c0:	89 ab       	std	Y+49, r24	; 0x31
    17c2:	9a ab       	std	Y+50, r25	; 0x32
    17c4:	ab ab       	std	Y+51, r26	; 0x33
    17c6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17c8:	69 a9       	ldd	r22, Y+49	; 0x31
    17ca:	7a a9       	ldd	r23, Y+50	; 0x32
    17cc:	8b a9       	ldd	r24, Y+51	; 0x33
    17ce:	9c a9       	ldd	r25, Y+52	; 0x34
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	40 e8       	ldi	r20, 0x80	; 128
    17d6:	5f e3       	ldi	r21, 0x3F	; 63
    17d8:	0e 94 68 22 	call	0x44d0	; 0x44d0 <__ltsf2>
    17dc:	88 23       	and	r24, r24
    17de:	2c f4       	brge	.+10     	; 0x17ea <pick_up_cone+0x6c>
		__ticks = 1;
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	98 ab       	std	Y+48, r25	; 0x30
    17e6:	8f a7       	std	Y+47, r24	; 0x2f
    17e8:	3f c0       	rjmp	.+126    	; 0x1868 <pick_up_cone+0xea>
	else if (__tmp > 65535)
    17ea:	69 a9       	ldd	r22, Y+49	; 0x31
    17ec:	7a a9       	ldd	r23, Y+50	; 0x32
    17ee:	8b a9       	ldd	r24, Y+51	; 0x33
    17f0:	9c a9       	ldd	r25, Y+52	; 0x34
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	3f ef       	ldi	r19, 0xFF	; 255
    17f6:	4f e7       	ldi	r20, 0x7F	; 127
    17f8:	57 e4       	ldi	r21, 0x47	; 71
    17fa:	0e 94 08 22 	call	0x4410	; 0x4410 <__gtsf2>
    17fe:	18 16       	cp	r1, r24
    1800:	4c f5       	brge	.+82     	; 0x1854 <pick_up_cone+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1802:	6d a9       	ldd	r22, Y+53	; 0x35
    1804:	7e a9       	ldd	r23, Y+54	; 0x36
    1806:	8f a9       	ldd	r24, Y+55	; 0x37
    1808:	98 ad       	ldd	r25, Y+56	; 0x38
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	40 e2       	ldi	r20, 0x20	; 32
    1810:	51 e4       	ldi	r21, 0x41	; 65
    1812:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	bc 01       	movw	r22, r24
    181c:	cd 01       	movw	r24, r26
    181e:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	98 ab       	std	Y+48, r25	; 0x30
    1828:	8f a7       	std	Y+47, r24	; 0x2f
    182a:	0f c0       	rjmp	.+30     	; 0x184a <pick_up_cone+0xcc>
    182c:	80 e7       	ldi	r24, 0x70	; 112
    182e:	91 e0       	ldi	r25, 0x01	; 1
    1830:	9e a7       	std	Y+46, r25	; 0x2e
    1832:	8d a7       	std	Y+45, r24	; 0x2d
    1834:	8d a5       	ldd	r24, Y+45	; 0x2d
    1836:	9e a5       	ldd	r25, Y+46	; 0x2e
    1838:	01 97       	sbiw	r24, 0x01	; 1
    183a:	f1 f7       	brne	.-4      	; 0x1838 <pick_up_cone+0xba>
    183c:	9e a7       	std	Y+46, r25	; 0x2e
    183e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1840:	8f a5       	ldd	r24, Y+47	; 0x2f
    1842:	98 a9       	ldd	r25, Y+48	; 0x30
    1844:	01 97       	sbiw	r24, 0x01	; 1
    1846:	98 ab       	std	Y+48, r25	; 0x30
    1848:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    184a:	8f a5       	ldd	r24, Y+47	; 0x2f
    184c:	98 a9       	ldd	r25, Y+48	; 0x30
    184e:	00 97       	sbiw	r24, 0x00	; 0
    1850:	69 f7       	brne	.-38     	; 0x182c <pick_up_cone+0xae>
    1852:	14 c0       	rjmp	.+40     	; 0x187c <pick_up_cone+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1854:	69 a9       	ldd	r22, Y+49	; 0x31
    1856:	7a a9       	ldd	r23, Y+50	; 0x32
    1858:	8b a9       	ldd	r24, Y+51	; 0x33
    185a:	9c a9       	ldd	r25, Y+52	; 0x34
    185c:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
    1860:	dc 01       	movw	r26, r24
    1862:	cb 01       	movw	r24, r22
    1864:	98 ab       	std	Y+48, r25	; 0x30
    1866:	8f a7       	std	Y+47, r24	; 0x2f
    1868:	8f a5       	ldd	r24, Y+47	; 0x2f
    186a:	98 a9       	ldd	r25, Y+48	; 0x30
    186c:	9c a7       	std	Y+44, r25	; 0x2c
    186e:	8b a7       	std	Y+43, r24	; 0x2b
    1870:	8b a5       	ldd	r24, Y+43	; 0x2b
    1872:	9c a5       	ldd	r25, Y+44	; 0x2c
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	f1 f7       	brne	.-4      	; 0x1874 <pick_up_cone+0xf6>
    1878:	9c a7       	std	Y+44, r25	; 0x2c
    187a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(600);
	
	servo_1(130);
    187c:	82 e8       	ldi	r24, 0x82	; 130
    187e:	0e 94 23 0b 	call	0x1646	; 0x1646 <servo_1>
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	a6 e1       	ldi	r26, 0x16	; 22
    1888:	b4 e4       	ldi	r27, 0x44	; 68
    188a:	8f a3       	std	Y+39, r24	; 0x27
    188c:	98 a7       	std	Y+40, r25	; 0x28
    188e:	a9 a7       	std	Y+41, r26	; 0x29
    1890:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1892:	6f a1       	ldd	r22, Y+39	; 0x27
    1894:	78 a5       	ldd	r23, Y+40	; 0x28
    1896:	89 a5       	ldd	r24, Y+41	; 0x29
    1898:	9a a5       	ldd	r25, Y+42	; 0x2a
    189a:	26 e6       	ldi	r18, 0x66	; 102
    189c:	36 e6       	ldi	r19, 0x66	; 102
    189e:	46 e6       	ldi	r20, 0x66	; 102
    18a0:	55 e4       	ldi	r21, 0x45	; 69
    18a2:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	8b a3       	std	Y+35, r24	; 0x23
    18ac:	9c a3       	std	Y+36, r25	; 0x24
    18ae:	ad a3       	std	Y+37, r26	; 0x25
    18b0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18b2:	6b a1       	ldd	r22, Y+35	; 0x23
    18b4:	7c a1       	ldd	r23, Y+36	; 0x24
    18b6:	8d a1       	ldd	r24, Y+37	; 0x25
    18b8:	9e a1       	ldd	r25, Y+38	; 0x26
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	40 e8       	ldi	r20, 0x80	; 128
    18c0:	5f e3       	ldi	r21, 0x3F	; 63
    18c2:	0e 94 68 22 	call	0x44d0	; 0x44d0 <__ltsf2>
    18c6:	88 23       	and	r24, r24
    18c8:	2c f4       	brge	.+10     	; 0x18d4 <pick_up_cone+0x156>
		__ticks = 1;
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	9a a3       	std	Y+34, r25	; 0x22
    18d0:	89 a3       	std	Y+33, r24	; 0x21
    18d2:	3f c0       	rjmp	.+126    	; 0x1952 <pick_up_cone+0x1d4>
	else if (__tmp > 65535)
    18d4:	6b a1       	ldd	r22, Y+35	; 0x23
    18d6:	7c a1       	ldd	r23, Y+36	; 0x24
    18d8:	8d a1       	ldd	r24, Y+37	; 0x25
    18da:	9e a1       	ldd	r25, Y+38	; 0x26
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	3f ef       	ldi	r19, 0xFF	; 255
    18e0:	4f e7       	ldi	r20, 0x7F	; 127
    18e2:	57 e4       	ldi	r21, 0x47	; 71
    18e4:	0e 94 08 22 	call	0x4410	; 0x4410 <__gtsf2>
    18e8:	18 16       	cp	r1, r24
    18ea:	4c f5       	brge	.+82     	; 0x193e <pick_up_cone+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ec:	6f a1       	ldd	r22, Y+39	; 0x27
    18ee:	78 a5       	ldd	r23, Y+40	; 0x28
    18f0:	89 a5       	ldd	r24, Y+41	; 0x29
    18f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	40 e2       	ldi	r20, 0x20	; 32
    18fa:	51 e4       	ldi	r21, 0x41	; 65
    18fc:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	bc 01       	movw	r22, r24
    1906:	cd 01       	movw	r24, r26
    1908:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	9a a3       	std	Y+34, r25	; 0x22
    1912:	89 a3       	std	Y+33, r24	; 0x21
    1914:	0f c0       	rjmp	.+30     	; 0x1934 <pick_up_cone+0x1b6>
    1916:	80 e7       	ldi	r24, 0x70	; 112
    1918:	91 e0       	ldi	r25, 0x01	; 1
    191a:	98 a3       	std	Y+32, r25	; 0x20
    191c:	8f 8f       	std	Y+31, r24	; 0x1f
    191e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1920:	98 a1       	ldd	r25, Y+32	; 0x20
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	f1 f7       	brne	.-4      	; 0x1922 <pick_up_cone+0x1a4>
    1926:	98 a3       	std	Y+32, r25	; 0x20
    1928:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    192a:	89 a1       	ldd	r24, Y+33	; 0x21
    192c:	9a a1       	ldd	r25, Y+34	; 0x22
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	9a a3       	std	Y+34, r25	; 0x22
    1932:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1934:	89 a1       	ldd	r24, Y+33	; 0x21
    1936:	9a a1       	ldd	r25, Y+34	; 0x22
    1938:	00 97       	sbiw	r24, 0x00	; 0
    193a:	69 f7       	brne	.-38     	; 0x1916 <pick_up_cone+0x198>
    193c:	14 c0       	rjmp	.+40     	; 0x1966 <pick_up_cone+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    193e:	6b a1       	ldd	r22, Y+35	; 0x23
    1940:	7c a1       	ldd	r23, Y+36	; 0x24
    1942:	8d a1       	ldd	r24, Y+37	; 0x25
    1944:	9e a1       	ldd	r25, Y+38	; 0x26
    1946:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	9a a3       	std	Y+34, r25	; 0x22
    1950:	89 a3       	std	Y+33, r24	; 0x21
    1952:	89 a1       	ldd	r24, Y+33	; 0x21
    1954:	9a a1       	ldd	r25, Y+34	; 0x22
    1956:	9e 8f       	std	Y+30, r25	; 0x1e
    1958:	8d 8f       	std	Y+29, r24	; 0x1d
    195a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    195c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    195e:	01 97       	sbiw	r24, 0x01	; 1
    1960:	f1 f7       	brne	.-4      	; 0x195e <pick_up_cone+0x1e0>
    1962:	9e 8f       	std	Y+30, r25	; 0x1e
    1964:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(600);
	
	servo_2(0);
    1966:	80 e0       	ldi	r24, 0x00	; 0
    1968:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <servo_2>
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	a6 e1       	ldi	r26, 0x16	; 22
    1972:	b4 e4       	ldi	r27, 0x44	; 68
    1974:	89 8f       	std	Y+25, r24	; 0x19
    1976:	9a 8f       	std	Y+26, r25	; 0x1a
    1978:	ab 8f       	std	Y+27, r26	; 0x1b
    197a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    197c:	69 8d       	ldd	r22, Y+25	; 0x19
    197e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1980:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1982:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1984:	26 e6       	ldi	r18, 0x66	; 102
    1986:	36 e6       	ldi	r19, 0x66	; 102
    1988:	46 e6       	ldi	r20, 0x66	; 102
    198a:	55 e4       	ldi	r21, 0x45	; 69
    198c:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	8d 8b       	std	Y+21, r24	; 0x15
    1996:	9e 8b       	std	Y+22, r25	; 0x16
    1998:	af 8b       	std	Y+23, r26	; 0x17
    199a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    199c:	6d 89       	ldd	r22, Y+21	; 0x15
    199e:	7e 89       	ldd	r23, Y+22	; 0x16
    19a0:	8f 89       	ldd	r24, Y+23	; 0x17
    19a2:	98 8d       	ldd	r25, Y+24	; 0x18
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	40 e8       	ldi	r20, 0x80	; 128
    19aa:	5f e3       	ldi	r21, 0x3F	; 63
    19ac:	0e 94 68 22 	call	0x44d0	; 0x44d0 <__ltsf2>
    19b0:	88 23       	and	r24, r24
    19b2:	2c f4       	brge	.+10     	; 0x19be <pick_up_cone+0x240>
		__ticks = 1;
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	9c 8b       	std	Y+20, r25	; 0x14
    19ba:	8b 8b       	std	Y+19, r24	; 0x13
    19bc:	3f c0       	rjmp	.+126    	; 0x1a3c <pick_up_cone+0x2be>
	else if (__tmp > 65535)
    19be:	6d 89       	ldd	r22, Y+21	; 0x15
    19c0:	7e 89       	ldd	r23, Y+22	; 0x16
    19c2:	8f 89       	ldd	r24, Y+23	; 0x17
    19c4:	98 8d       	ldd	r25, Y+24	; 0x18
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	3f ef       	ldi	r19, 0xFF	; 255
    19ca:	4f e7       	ldi	r20, 0x7F	; 127
    19cc:	57 e4       	ldi	r21, 0x47	; 71
    19ce:	0e 94 08 22 	call	0x4410	; 0x4410 <__gtsf2>
    19d2:	18 16       	cp	r1, r24
    19d4:	4c f5       	brge	.+82     	; 0x1a28 <pick_up_cone+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d6:	69 8d       	ldd	r22, Y+25	; 0x19
    19d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19de:	20 e0       	ldi	r18, 0x00	; 0
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	40 e2       	ldi	r20, 0x20	; 32
    19e4:	51 e4       	ldi	r21, 0x41	; 65
    19e6:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
    19ea:	dc 01       	movw	r26, r24
    19ec:	cb 01       	movw	r24, r22
    19ee:	bc 01       	movw	r22, r24
    19f0:	cd 01       	movw	r24, r26
    19f2:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	9c 8b       	std	Y+20, r25	; 0x14
    19fc:	8b 8b       	std	Y+19, r24	; 0x13
    19fe:	0f c0       	rjmp	.+30     	; 0x1a1e <pick_up_cone+0x2a0>
    1a00:	80 e7       	ldi	r24, 0x70	; 112
    1a02:	91 e0       	ldi	r25, 0x01	; 1
    1a04:	9a 8b       	std	Y+18, r25	; 0x12
    1a06:	89 8b       	std	Y+17, r24	; 0x11
    1a08:	89 89       	ldd	r24, Y+17	; 0x11
    1a0a:	9a 89       	ldd	r25, Y+18	; 0x12
    1a0c:	01 97       	sbiw	r24, 0x01	; 1
    1a0e:	f1 f7       	brne	.-4      	; 0x1a0c <pick_up_cone+0x28e>
    1a10:	9a 8b       	std	Y+18, r25	; 0x12
    1a12:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a14:	8b 89       	ldd	r24, Y+19	; 0x13
    1a16:	9c 89       	ldd	r25, Y+20	; 0x14
    1a18:	01 97       	sbiw	r24, 0x01	; 1
    1a1a:	9c 8b       	std	Y+20, r25	; 0x14
    1a1c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a1e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a20:	9c 89       	ldd	r25, Y+20	; 0x14
    1a22:	00 97       	sbiw	r24, 0x00	; 0
    1a24:	69 f7       	brne	.-38     	; 0x1a00 <pick_up_cone+0x282>
    1a26:	14 c0       	rjmp	.+40     	; 0x1a50 <pick_up_cone+0x2d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a28:	6d 89       	ldd	r22, Y+21	; 0x15
    1a2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a30:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	9c 8b       	std	Y+20, r25	; 0x14
    1a3a:	8b 8b       	std	Y+19, r24	; 0x13
    1a3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a40:	98 8b       	std	Y+16, r25	; 0x10
    1a42:	8f 87       	std	Y+15, r24	; 0x0f
    1a44:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a46:	98 89       	ldd	r25, Y+16	; 0x10
    1a48:	01 97       	sbiw	r24, 0x01	; 1
    1a4a:	f1 f7       	brne	.-4      	; 0x1a48 <pick_up_cone+0x2ca>
    1a4c:	98 8b       	std	Y+16, r25	; 0x10
    1a4e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(600);
	servo_1(90);
    1a50:	8a e5       	ldi	r24, 0x5A	; 90
    1a52:	0e 94 23 0b 	call	0x1646	; 0x1646 <servo_1>
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	a6 e9       	ldi	r26, 0x96	; 150
    1a5c:	b3 e4       	ldi	r27, 0x43	; 67
    1a5e:	8b 87       	std	Y+11, r24	; 0x0b
    1a60:	9c 87       	std	Y+12, r25	; 0x0c
    1a62:	ad 87       	std	Y+13, r26	; 0x0d
    1a64:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a66:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a68:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a6e:	26 e6       	ldi	r18, 0x66	; 102
    1a70:	36 e6       	ldi	r19, 0x66	; 102
    1a72:	46 e6       	ldi	r20, 0x66	; 102
    1a74:	55 e4       	ldi	r21, 0x45	; 69
    1a76:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	8f 83       	std	Y+7, r24	; 0x07
    1a80:	98 87       	std	Y+8, r25	; 0x08
    1a82:	a9 87       	std	Y+9, r26	; 0x09
    1a84:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a86:	6f 81       	ldd	r22, Y+7	; 0x07
    1a88:	78 85       	ldd	r23, Y+8	; 0x08
    1a8a:	89 85       	ldd	r24, Y+9	; 0x09
    1a8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	40 e8       	ldi	r20, 0x80	; 128
    1a94:	5f e3       	ldi	r21, 0x3F	; 63
    1a96:	0e 94 68 22 	call	0x44d0	; 0x44d0 <__ltsf2>
    1a9a:	88 23       	and	r24, r24
    1a9c:	2c f4       	brge	.+10     	; 0x1aa8 <pick_up_cone+0x32a>
		__ticks = 1;
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	9e 83       	std	Y+6, r25	; 0x06
    1aa4:	8d 83       	std	Y+5, r24	; 0x05
    1aa6:	3f c0       	rjmp	.+126    	; 0x1b26 <pick_up_cone+0x3a8>
	else if (__tmp > 65535)
    1aa8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aaa:	78 85       	ldd	r23, Y+8	; 0x08
    1aac:	89 85       	ldd	r24, Y+9	; 0x09
    1aae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	3f ef       	ldi	r19, 0xFF	; 255
    1ab4:	4f e7       	ldi	r20, 0x7F	; 127
    1ab6:	57 e4       	ldi	r21, 0x47	; 71
    1ab8:	0e 94 08 22 	call	0x4410	; 0x4410 <__gtsf2>
    1abc:	18 16       	cp	r1, r24
    1abe:	4c f5       	brge	.+82     	; 0x1b12 <pick_up_cone+0x394>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ac2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ac4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ac6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	40 e2       	ldi	r20, 0x20	; 32
    1ace:	51 e4       	ldi	r21, 0x41	; 65
    1ad0:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	bc 01       	movw	r22, r24
    1ada:	cd 01       	movw	r24, r26
    1adc:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	9e 83       	std	Y+6, r25	; 0x06
    1ae6:	8d 83       	std	Y+5, r24	; 0x05
    1ae8:	0f c0       	rjmp	.+30     	; 0x1b08 <pick_up_cone+0x38a>
    1aea:	80 e7       	ldi	r24, 0x70	; 112
    1aec:	91 e0       	ldi	r25, 0x01	; 1
    1aee:	9c 83       	std	Y+4, r25	; 0x04
    1af0:	8b 83       	std	Y+3, r24	; 0x03
    1af2:	8b 81       	ldd	r24, Y+3	; 0x03
    1af4:	9c 81       	ldd	r25, Y+4	; 0x04
    1af6:	01 97       	sbiw	r24, 0x01	; 1
    1af8:	f1 f7       	brne	.-4      	; 0x1af6 <pick_up_cone+0x378>
    1afa:	9c 83       	std	Y+4, r25	; 0x04
    1afc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1afe:	8d 81       	ldd	r24, Y+5	; 0x05
    1b00:	9e 81       	ldd	r25, Y+6	; 0x06
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	9e 83       	std	Y+6, r25	; 0x06
    1b06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b08:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b0c:	00 97       	sbiw	r24, 0x00	; 0
    1b0e:	69 f7       	brne	.-38     	; 0x1aea <pick_up_cone+0x36c>
    1b10:	14 c0       	rjmp	.+40     	; 0x1b3a <pick_up_cone+0x3bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b12:	6f 81       	ldd	r22, Y+7	; 0x07
    1b14:	78 85       	ldd	r23, Y+8	; 0x08
    1b16:	89 85       	ldd	r24, Y+9	; 0x09
    1b18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b1a:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	9e 83       	std	Y+6, r25	; 0x06
    1b24:	8d 83       	std	Y+5, r24	; 0x05
    1b26:	8d 81       	ldd	r24, Y+5	; 0x05
    1b28:	9e 81       	ldd	r25, Y+6	; 0x06
    1b2a:	9a 83       	std	Y+2, r25	; 0x02
    1b2c:	89 83       	std	Y+1, r24	; 0x01
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
    1b30:	9a 81       	ldd	r25, Y+2	; 0x02
    1b32:	01 97       	sbiw	r24, 0x01	; 1
    1b34:	f1 f7       	brne	.-4      	; 0x1b32 <pick_up_cone+0x3b4>
    1b36:	9a 83       	std	Y+2, r25	; 0x02
    1b38:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);
}
    1b3a:	e8 96       	adiw	r28, 0x38	; 56
    1b3c:	0f b6       	in	r0, 0x3f	; 63
    1b3e:	f8 94       	cli
    1b40:	de bf       	out	0x3e, r29	; 62
    1b42:	0f be       	out	0x3f, r0	; 63
    1b44:	cd bf       	out	0x3d, r28	; 61
    1b46:	cf 91       	pop	r28
    1b48:	df 91       	pop	r29
    1b4a:	08 95       	ret

00001b4c <drop_cone>:

void drop_cone()
{
    1b4c:	df 93       	push	r29
    1b4e:	cf 93       	push	r28
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
    1b54:	e8 97       	sbiw	r28, 0x38	; 56
    1b56:	0f b6       	in	r0, 0x3f	; 63
    1b58:	f8 94       	cli
    1b5a:	de bf       	out	0x3e, r29	; 62
    1b5c:	0f be       	out	0x3f, r0	; 63
    1b5e:	cd bf       	out	0x3d, r28	; 61
	servo_1(130);
    1b60:	82 e8       	ldi	r24, 0x82	; 130
    1b62:	0e 94 23 0b 	call	0x1646	; 0x1646 <servo_1>
    1b66:	80 e0       	ldi	r24, 0x00	; 0
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	aa ef       	ldi	r26, 0xFA	; 250
    1b6c:	b3 e4       	ldi	r27, 0x43	; 67
    1b6e:	8d ab       	std	Y+53, r24	; 0x35
    1b70:	9e ab       	std	Y+54, r25	; 0x36
    1b72:	af ab       	std	Y+55, r26	; 0x37
    1b74:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b76:	6d a9       	ldd	r22, Y+53	; 0x35
    1b78:	7e a9       	ldd	r23, Y+54	; 0x36
    1b7a:	8f a9       	ldd	r24, Y+55	; 0x37
    1b7c:	98 ad       	ldd	r25, Y+56	; 0x38
    1b7e:	26 e6       	ldi	r18, 0x66	; 102
    1b80:	36 e6       	ldi	r19, 0x66	; 102
    1b82:	46 e6       	ldi	r20, 0x66	; 102
    1b84:	55 e4       	ldi	r21, 0x45	; 69
    1b86:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	89 ab       	std	Y+49, r24	; 0x31
    1b90:	9a ab       	std	Y+50, r25	; 0x32
    1b92:	ab ab       	std	Y+51, r26	; 0x33
    1b94:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b96:	69 a9       	ldd	r22, Y+49	; 0x31
    1b98:	7a a9       	ldd	r23, Y+50	; 0x32
    1b9a:	8b a9       	ldd	r24, Y+51	; 0x33
    1b9c:	9c a9       	ldd	r25, Y+52	; 0x34
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	40 e8       	ldi	r20, 0x80	; 128
    1ba4:	5f e3       	ldi	r21, 0x3F	; 63
    1ba6:	0e 94 68 22 	call	0x44d0	; 0x44d0 <__ltsf2>
    1baa:	88 23       	and	r24, r24
    1bac:	2c f4       	brge	.+10     	; 0x1bb8 <drop_cone+0x6c>
		__ticks = 1;
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	98 ab       	std	Y+48, r25	; 0x30
    1bb4:	8f a7       	std	Y+47, r24	; 0x2f
    1bb6:	3f c0       	rjmp	.+126    	; 0x1c36 <drop_cone+0xea>
	else if (__tmp > 65535)
    1bb8:	69 a9       	ldd	r22, Y+49	; 0x31
    1bba:	7a a9       	ldd	r23, Y+50	; 0x32
    1bbc:	8b a9       	ldd	r24, Y+51	; 0x33
    1bbe:	9c a9       	ldd	r25, Y+52	; 0x34
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	3f ef       	ldi	r19, 0xFF	; 255
    1bc4:	4f e7       	ldi	r20, 0x7F	; 127
    1bc6:	57 e4       	ldi	r21, 0x47	; 71
    1bc8:	0e 94 08 22 	call	0x4410	; 0x4410 <__gtsf2>
    1bcc:	18 16       	cp	r1, r24
    1bce:	4c f5       	brge	.+82     	; 0x1c22 <drop_cone+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd0:	6d a9       	ldd	r22, Y+53	; 0x35
    1bd2:	7e a9       	ldd	r23, Y+54	; 0x36
    1bd4:	8f a9       	ldd	r24, Y+55	; 0x37
    1bd6:	98 ad       	ldd	r25, Y+56	; 0x38
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	40 e2       	ldi	r20, 0x20	; 32
    1bde:	51 e4       	ldi	r21, 0x41	; 65
    1be0:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	bc 01       	movw	r22, r24
    1bea:	cd 01       	movw	r24, r26
    1bec:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	98 ab       	std	Y+48, r25	; 0x30
    1bf6:	8f a7       	std	Y+47, r24	; 0x2f
    1bf8:	0f c0       	rjmp	.+30     	; 0x1c18 <drop_cone+0xcc>
    1bfa:	80 e7       	ldi	r24, 0x70	; 112
    1bfc:	91 e0       	ldi	r25, 0x01	; 1
    1bfe:	9e a7       	std	Y+46, r25	; 0x2e
    1c00:	8d a7       	std	Y+45, r24	; 0x2d
    1c02:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c04:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c06:	01 97       	sbiw	r24, 0x01	; 1
    1c08:	f1 f7       	brne	.-4      	; 0x1c06 <drop_cone+0xba>
    1c0a:	9e a7       	std	Y+46, r25	; 0x2e
    1c0c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c10:	98 a9       	ldd	r25, Y+48	; 0x30
    1c12:	01 97       	sbiw	r24, 0x01	; 1
    1c14:	98 ab       	std	Y+48, r25	; 0x30
    1c16:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c18:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c1a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c1c:	00 97       	sbiw	r24, 0x00	; 0
    1c1e:	69 f7       	brne	.-38     	; 0x1bfa <drop_cone+0xae>
    1c20:	14 c0       	rjmp	.+40     	; 0x1c4a <drop_cone+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c22:	69 a9       	ldd	r22, Y+49	; 0x31
    1c24:	7a a9       	ldd	r23, Y+50	; 0x32
    1c26:	8b a9       	ldd	r24, Y+51	; 0x33
    1c28:	9c a9       	ldd	r25, Y+52	; 0x34
    1c2a:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	98 ab       	std	Y+48, r25	; 0x30
    1c34:	8f a7       	std	Y+47, r24	; 0x2f
    1c36:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c38:	98 a9       	ldd	r25, Y+48	; 0x30
    1c3a:	9c a7       	std	Y+44, r25	; 0x2c
    1c3c:	8b a7       	std	Y+43, r24	; 0x2b
    1c3e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c40:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c42:	01 97       	sbiw	r24, 0x01	; 1
    1c44:	f1 f7       	brne	.-4      	; 0x1c42 <drop_cone+0xf6>
    1c46:	9c a7       	std	Y+44, r25	; 0x2c
    1c48:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(500);
	servo_2(40);
    1c4a:	88 e2       	ldi	r24, 0x28	; 40
    1c4c:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <servo_2>
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	a6 e1       	ldi	r26, 0x16	; 22
    1c56:	b4 e4       	ldi	r27, 0x44	; 68
    1c58:	8f a3       	std	Y+39, r24	; 0x27
    1c5a:	98 a7       	std	Y+40, r25	; 0x28
    1c5c:	a9 a7       	std	Y+41, r26	; 0x29
    1c5e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c60:	6f a1       	ldd	r22, Y+39	; 0x27
    1c62:	78 a5       	ldd	r23, Y+40	; 0x28
    1c64:	89 a5       	ldd	r24, Y+41	; 0x29
    1c66:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c68:	26 e6       	ldi	r18, 0x66	; 102
    1c6a:	36 e6       	ldi	r19, 0x66	; 102
    1c6c:	46 e6       	ldi	r20, 0x66	; 102
    1c6e:	55 e4       	ldi	r21, 0x45	; 69
    1c70:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	8b a3       	std	Y+35, r24	; 0x23
    1c7a:	9c a3       	std	Y+36, r25	; 0x24
    1c7c:	ad a3       	std	Y+37, r26	; 0x25
    1c7e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c80:	6b a1       	ldd	r22, Y+35	; 0x23
    1c82:	7c a1       	ldd	r23, Y+36	; 0x24
    1c84:	8d a1       	ldd	r24, Y+37	; 0x25
    1c86:	9e a1       	ldd	r25, Y+38	; 0x26
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	40 e8       	ldi	r20, 0x80	; 128
    1c8e:	5f e3       	ldi	r21, 0x3F	; 63
    1c90:	0e 94 68 22 	call	0x44d0	; 0x44d0 <__ltsf2>
    1c94:	88 23       	and	r24, r24
    1c96:	2c f4       	brge	.+10     	; 0x1ca2 <drop_cone+0x156>
		__ticks = 1;
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	9a a3       	std	Y+34, r25	; 0x22
    1c9e:	89 a3       	std	Y+33, r24	; 0x21
    1ca0:	3f c0       	rjmp	.+126    	; 0x1d20 <drop_cone+0x1d4>
	else if (__tmp > 65535)
    1ca2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ca4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ca6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ca8:	9e a1       	ldd	r25, Y+38	; 0x26
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	3f ef       	ldi	r19, 0xFF	; 255
    1cae:	4f e7       	ldi	r20, 0x7F	; 127
    1cb0:	57 e4       	ldi	r21, 0x47	; 71
    1cb2:	0e 94 08 22 	call	0x4410	; 0x4410 <__gtsf2>
    1cb6:	18 16       	cp	r1, r24
    1cb8:	4c f5       	brge	.+82     	; 0x1d0c <drop_cone+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cba:	6f a1       	ldd	r22, Y+39	; 0x27
    1cbc:	78 a5       	ldd	r23, Y+40	; 0x28
    1cbe:	89 a5       	ldd	r24, Y+41	; 0x29
    1cc0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	40 e2       	ldi	r20, 0x20	; 32
    1cc8:	51 e4       	ldi	r21, 0x41	; 65
    1cca:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	bc 01       	movw	r22, r24
    1cd4:	cd 01       	movw	r24, r26
    1cd6:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	9a a3       	std	Y+34, r25	; 0x22
    1ce0:	89 a3       	std	Y+33, r24	; 0x21
    1ce2:	0f c0       	rjmp	.+30     	; 0x1d02 <drop_cone+0x1b6>
    1ce4:	80 e7       	ldi	r24, 0x70	; 112
    1ce6:	91 e0       	ldi	r25, 0x01	; 1
    1ce8:	98 a3       	std	Y+32, r25	; 0x20
    1cea:	8f 8f       	std	Y+31, r24	; 0x1f
    1cec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cee:	98 a1       	ldd	r25, Y+32	; 0x20
    1cf0:	01 97       	sbiw	r24, 0x01	; 1
    1cf2:	f1 f7       	brne	.-4      	; 0x1cf0 <drop_cone+0x1a4>
    1cf4:	98 a3       	std	Y+32, r25	; 0x20
    1cf6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf8:	89 a1       	ldd	r24, Y+33	; 0x21
    1cfa:	9a a1       	ldd	r25, Y+34	; 0x22
    1cfc:	01 97       	sbiw	r24, 0x01	; 1
    1cfe:	9a a3       	std	Y+34, r25	; 0x22
    1d00:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d02:	89 a1       	ldd	r24, Y+33	; 0x21
    1d04:	9a a1       	ldd	r25, Y+34	; 0x22
    1d06:	00 97       	sbiw	r24, 0x00	; 0
    1d08:	69 f7       	brne	.-38     	; 0x1ce4 <drop_cone+0x198>
    1d0a:	14 c0       	rjmp	.+40     	; 0x1d34 <drop_cone+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d0c:	6b a1       	ldd	r22, Y+35	; 0x23
    1d0e:	7c a1       	ldd	r23, Y+36	; 0x24
    1d10:	8d a1       	ldd	r24, Y+37	; 0x25
    1d12:	9e a1       	ldd	r25, Y+38	; 0x26
    1d14:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	9a a3       	std	Y+34, r25	; 0x22
    1d1e:	89 a3       	std	Y+33, r24	; 0x21
    1d20:	89 a1       	ldd	r24, Y+33	; 0x21
    1d22:	9a a1       	ldd	r25, Y+34	; 0x22
    1d24:	9e 8f       	std	Y+30, r25	; 0x1e
    1d26:	8d 8f       	std	Y+29, r24	; 0x1d
    1d28:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d2a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d2c:	01 97       	sbiw	r24, 0x01	; 1
    1d2e:	f1 f7       	brne	.-4      	; 0x1d2c <drop_cone+0x1e0>
    1d30:	9e 8f       	std	Y+30, r25	; 0x1e
    1d32:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(600);
	
	servo_2(0);
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <servo_2>
    1d3a:	80 e0       	ldi	r24, 0x00	; 0
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	a6 e1       	ldi	r26, 0x16	; 22
    1d40:	b4 e4       	ldi	r27, 0x44	; 68
    1d42:	89 8f       	std	Y+25, r24	; 0x19
    1d44:	9a 8f       	std	Y+26, r25	; 0x1a
    1d46:	ab 8f       	std	Y+27, r26	; 0x1b
    1d48:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d4a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d52:	26 e6       	ldi	r18, 0x66	; 102
    1d54:	36 e6       	ldi	r19, 0x66	; 102
    1d56:	46 e6       	ldi	r20, 0x66	; 102
    1d58:	55 e4       	ldi	r21, 0x45	; 69
    1d5a:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	8d 8b       	std	Y+21, r24	; 0x15
    1d64:	9e 8b       	std	Y+22, r25	; 0x16
    1d66:	af 8b       	std	Y+23, r26	; 0x17
    1d68:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d6a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d6c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d70:	98 8d       	ldd	r25, Y+24	; 0x18
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	40 e8       	ldi	r20, 0x80	; 128
    1d78:	5f e3       	ldi	r21, 0x3F	; 63
    1d7a:	0e 94 68 22 	call	0x44d0	; 0x44d0 <__ltsf2>
    1d7e:	88 23       	and	r24, r24
    1d80:	2c f4       	brge	.+10     	; 0x1d8c <drop_cone+0x240>
		__ticks = 1;
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	9c 8b       	std	Y+20, r25	; 0x14
    1d88:	8b 8b       	std	Y+19, r24	; 0x13
    1d8a:	3f c0       	rjmp	.+126    	; 0x1e0a <drop_cone+0x2be>
	else if (__tmp > 65535)
    1d8c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d8e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d90:	8f 89       	ldd	r24, Y+23	; 0x17
    1d92:	98 8d       	ldd	r25, Y+24	; 0x18
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	3f ef       	ldi	r19, 0xFF	; 255
    1d98:	4f e7       	ldi	r20, 0x7F	; 127
    1d9a:	57 e4       	ldi	r21, 0x47	; 71
    1d9c:	0e 94 08 22 	call	0x4410	; 0x4410 <__gtsf2>
    1da0:	18 16       	cp	r1, r24
    1da2:	4c f5       	brge	.+82     	; 0x1df6 <drop_cone+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da4:	69 8d       	ldd	r22, Y+25	; 0x19
    1da6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1da8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1daa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	40 e2       	ldi	r20, 0x20	; 32
    1db2:	51 e4       	ldi	r21, 0x41	; 65
    1db4:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	bc 01       	movw	r22, r24
    1dbe:	cd 01       	movw	r24, r26
    1dc0:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	9c 8b       	std	Y+20, r25	; 0x14
    1dca:	8b 8b       	std	Y+19, r24	; 0x13
    1dcc:	0f c0       	rjmp	.+30     	; 0x1dec <drop_cone+0x2a0>
    1dce:	80 e7       	ldi	r24, 0x70	; 112
    1dd0:	91 e0       	ldi	r25, 0x01	; 1
    1dd2:	9a 8b       	std	Y+18, r25	; 0x12
    1dd4:	89 8b       	std	Y+17, r24	; 0x11
    1dd6:	89 89       	ldd	r24, Y+17	; 0x11
    1dd8:	9a 89       	ldd	r25, Y+18	; 0x12
    1dda:	01 97       	sbiw	r24, 0x01	; 1
    1ddc:	f1 f7       	brne	.-4      	; 0x1dda <drop_cone+0x28e>
    1dde:	9a 8b       	std	Y+18, r25	; 0x12
    1de0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de2:	8b 89       	ldd	r24, Y+19	; 0x13
    1de4:	9c 89       	ldd	r25, Y+20	; 0x14
    1de6:	01 97       	sbiw	r24, 0x01	; 1
    1de8:	9c 8b       	std	Y+20, r25	; 0x14
    1dea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dec:	8b 89       	ldd	r24, Y+19	; 0x13
    1dee:	9c 89       	ldd	r25, Y+20	; 0x14
    1df0:	00 97       	sbiw	r24, 0x00	; 0
    1df2:	69 f7       	brne	.-38     	; 0x1dce <drop_cone+0x282>
    1df4:	14 c0       	rjmp	.+40     	; 0x1e1e <drop_cone+0x2d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df6:	6d 89       	ldd	r22, Y+21	; 0x15
    1df8:	7e 89       	ldd	r23, Y+22	; 0x16
    1dfa:	8f 89       	ldd	r24, Y+23	; 0x17
    1dfc:	98 8d       	ldd	r25, Y+24	; 0x18
    1dfe:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	9c 8b       	std	Y+20, r25	; 0x14
    1e08:	8b 8b       	std	Y+19, r24	; 0x13
    1e0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e0c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e0e:	98 8b       	std	Y+16, r25	; 0x10
    1e10:	8f 87       	std	Y+15, r24	; 0x0f
    1e12:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e14:	98 89       	ldd	r25, Y+16	; 0x10
    1e16:	01 97       	sbiw	r24, 0x01	; 1
    1e18:	f1 f7       	brne	.-4      	; 0x1e16 <drop_cone+0x2ca>
    1e1a:	98 8b       	std	Y+16, r25	; 0x10
    1e1c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(600);
	
	servo_1(60);
    1e1e:	8c e3       	ldi	r24, 0x3C	; 60
    1e20:	0e 94 23 0b 	call	0x1646	; 0x1646 <servo_1>
    1e24:	80 e0       	ldi	r24, 0x00	; 0
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	aa e7       	ldi	r26, 0x7A	; 122
    1e2a:	b4 e4       	ldi	r27, 0x44	; 68
    1e2c:	8b 87       	std	Y+11, r24	; 0x0b
    1e2e:	9c 87       	std	Y+12, r25	; 0x0c
    1e30:	ad 87       	std	Y+13, r26	; 0x0d
    1e32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e34:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e36:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e3c:	26 e6       	ldi	r18, 0x66	; 102
    1e3e:	36 e6       	ldi	r19, 0x66	; 102
    1e40:	46 e6       	ldi	r20, 0x66	; 102
    1e42:	55 e4       	ldi	r21, 0x45	; 69
    1e44:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	8f 83       	std	Y+7, r24	; 0x07
    1e4e:	98 87       	std	Y+8, r25	; 0x08
    1e50:	a9 87       	std	Y+9, r26	; 0x09
    1e52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e54:	6f 81       	ldd	r22, Y+7	; 0x07
    1e56:	78 85       	ldd	r23, Y+8	; 0x08
    1e58:	89 85       	ldd	r24, Y+9	; 0x09
    1e5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	40 e8       	ldi	r20, 0x80	; 128
    1e62:	5f e3       	ldi	r21, 0x3F	; 63
    1e64:	0e 94 68 22 	call	0x44d0	; 0x44d0 <__ltsf2>
    1e68:	88 23       	and	r24, r24
    1e6a:	2c f4       	brge	.+10     	; 0x1e76 <drop_cone+0x32a>
		__ticks = 1;
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	9e 83       	std	Y+6, r25	; 0x06
    1e72:	8d 83       	std	Y+5, r24	; 0x05
    1e74:	3f c0       	rjmp	.+126    	; 0x1ef4 <drop_cone+0x3a8>
	else if (__tmp > 65535)
    1e76:	6f 81       	ldd	r22, Y+7	; 0x07
    1e78:	78 85       	ldd	r23, Y+8	; 0x08
    1e7a:	89 85       	ldd	r24, Y+9	; 0x09
    1e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	3f ef       	ldi	r19, 0xFF	; 255
    1e82:	4f e7       	ldi	r20, 0x7F	; 127
    1e84:	57 e4       	ldi	r21, 0x47	; 71
    1e86:	0e 94 08 22 	call	0x4410	; 0x4410 <__gtsf2>
    1e8a:	18 16       	cp	r1, r24
    1e8c:	4c f5       	brge	.+82     	; 0x1ee0 <drop_cone+0x394>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	40 e2       	ldi	r20, 0x20	; 32
    1e9c:	51 e4       	ldi	r21, 0x41	; 65
    1e9e:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	bc 01       	movw	r22, r24
    1ea8:	cd 01       	movw	r24, r26
    1eaa:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
    1eae:	dc 01       	movw	r26, r24
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	9e 83       	std	Y+6, r25	; 0x06
    1eb4:	8d 83       	std	Y+5, r24	; 0x05
    1eb6:	0f c0       	rjmp	.+30     	; 0x1ed6 <drop_cone+0x38a>
    1eb8:	80 e7       	ldi	r24, 0x70	; 112
    1eba:	91 e0       	ldi	r25, 0x01	; 1
    1ebc:	9c 83       	std	Y+4, r25	; 0x04
    1ebe:	8b 83       	std	Y+3, r24	; 0x03
    1ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec4:	01 97       	sbiw	r24, 0x01	; 1
    1ec6:	f1 f7       	brne	.-4      	; 0x1ec4 <drop_cone+0x378>
    1ec8:	9c 83       	std	Y+4, r25	; 0x04
    1eca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ecc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ece:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed0:	01 97       	sbiw	r24, 0x01	; 1
    1ed2:	9e 83       	std	Y+6, r25	; 0x06
    1ed4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eda:	00 97       	sbiw	r24, 0x00	; 0
    1edc:	69 f7       	brne	.-38     	; 0x1eb8 <drop_cone+0x36c>
    1ede:	14 c0       	rjmp	.+40     	; 0x1f08 <drop_cone+0x3bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee2:	78 85       	ldd	r23, Y+8	; 0x08
    1ee4:	89 85       	ldd	r24, Y+9	; 0x09
    1ee6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee8:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	9e 83       	std	Y+6, r25	; 0x06
    1ef2:	8d 83       	std	Y+5, r24	; 0x05
    1ef4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef8:	9a 83       	std	Y+2, r25	; 0x02
    1efa:	89 83       	std	Y+1, r24	; 0x01
    1efc:	89 81       	ldd	r24, Y+1	; 0x01
    1efe:	9a 81       	ldd	r25, Y+2	; 0x02
    1f00:	01 97       	sbiw	r24, 0x01	; 1
    1f02:	f1 f7       	brne	.-4      	; 0x1f00 <drop_cone+0x3b4>
    1f04:	9a 83       	std	Y+2, r25	; 0x02
    1f06:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    1f08:	e8 96       	adiw	r28, 0x38	; 56
    1f0a:	0f b6       	in	r0, 0x3f	; 63
    1f0c:	f8 94       	cli
    1f0e:	de bf       	out	0x3e, r29	; 62
    1f10:	0f be       	out	0x3f, r0	; 63
    1f12:	cd bf       	out	0x3d, r28	; 61
    1f14:	cf 91       	pop	r28
    1f16:	df 91       	pop	r29
    1f18:	08 95       	ret

00001f1a <encoder_pin_config>:
unsigned long int ShaftCountRight = 0;
unsigned int Degrees;


void encoder_pin_config()
{	
    1f1a:	df 93       	push	r29
    1f1c:	cf 93       	push	r28
    1f1e:	cd b7       	in	r28, 0x3d	; 61
    1f20:	de b7       	in	r29, 0x3e	; 62
	DDRE &= 0xcf;
    1f22:	ad e2       	ldi	r26, 0x2D	; 45
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	ed e2       	ldi	r30, 0x2D	; 45
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 81       	ld	r24, Z
    1f2c:	8f 7c       	andi	r24, 0xCF	; 207
    1f2e:	8c 93       	st	X, r24
	PORTE |= 0x30;
    1f30:	ae e2       	ldi	r26, 0x2E	; 46
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	ee e2       	ldi	r30, 0x2E	; 46
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	80 63       	ori	r24, 0x30	; 48
    1f3c:	8c 93       	st	X, r24
}
    1f3e:	cf 91       	pop	r28
    1f40:	df 91       	pop	r29
    1f42:	08 95       	ret

00001f44 <interrupt_init>:

void interrupt_init()
{
    1f44:	df 93       	push	r29
    1f46:	cf 93       	push	r28
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62
	cli();
    1f4c:	f8 94       	cli
	EIMSK |= 0x30;
    1f4e:	ad e3       	ldi	r26, 0x3D	; 61
    1f50:	b0 e0       	ldi	r27, 0x00	; 0
    1f52:	ed e3       	ldi	r30, 0x3D	; 61
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 81       	ld	r24, Z
    1f58:	80 63       	ori	r24, 0x30	; 48
    1f5a:	8c 93       	st	X, r24
	EICRA = 0x00;
    1f5c:	e9 e6       	ldi	r30, 0x69	; 105
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	10 82       	st	Z, r1
	EICRB |= 0x0a;
    1f62:	aa e6       	ldi	r26, 0x6A	; 106
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	ea e6       	ldi	r30, 0x6A	; 106
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	8a 60       	ori	r24, 0x0A	; 10
    1f6e:	8c 93       	st	X, r24
	sei();
    1f70:	78 94       	sei
}
    1f72:	cf 91       	pop	r28
    1f74:	df 91       	pop	r29
    1f76:	08 95       	ret

00001f78 <__vector_5>:

ISR(INT4_vect)
{
    1f78:	1f 92       	push	r1
    1f7a:	0f 92       	push	r0
    1f7c:	0f b6       	in	r0, 0x3f	; 63
    1f7e:	0f 92       	push	r0
    1f80:	11 24       	eor	r1, r1
    1f82:	8f 93       	push	r24
    1f84:	9f 93       	push	r25
    1f86:	af 93       	push	r26
    1f88:	bf 93       	push	r27
    1f8a:	df 93       	push	r29
    1f8c:	cf 93       	push	r28
    1f8e:	cd b7       	in	r28, 0x3d	; 61
    1f90:	de b7       	in	r29, 0x3e	; 62
	ShaftCountLeft++;
    1f92:	80 91 3a 04 	lds	r24, 0x043A
    1f96:	90 91 3b 04 	lds	r25, 0x043B
    1f9a:	a0 91 3c 04 	lds	r26, 0x043C
    1f9e:	b0 91 3d 04 	lds	r27, 0x043D
    1fa2:	01 96       	adiw	r24, 0x01	; 1
    1fa4:	a1 1d       	adc	r26, r1
    1fa6:	b1 1d       	adc	r27, r1
    1fa8:	80 93 3a 04 	sts	0x043A, r24
    1fac:	90 93 3b 04 	sts	0x043B, r25
    1fb0:	a0 93 3c 04 	sts	0x043C, r26
    1fb4:	b0 93 3d 04 	sts	0x043D, r27
}
    1fb8:	cf 91       	pop	r28
    1fba:	df 91       	pop	r29
    1fbc:	bf 91       	pop	r27
    1fbe:	af 91       	pop	r26
    1fc0:	9f 91       	pop	r25
    1fc2:	8f 91       	pop	r24
    1fc4:	0f 90       	pop	r0
    1fc6:	0f be       	out	0x3f, r0	; 63
    1fc8:	0f 90       	pop	r0
    1fca:	1f 90       	pop	r1
    1fcc:	18 95       	reti

00001fce <__vector_6>:
ISR(INT5_vect)
{
    1fce:	1f 92       	push	r1
    1fd0:	0f 92       	push	r0
    1fd2:	0f b6       	in	r0, 0x3f	; 63
    1fd4:	0f 92       	push	r0
    1fd6:	11 24       	eor	r1, r1
    1fd8:	8f 93       	push	r24
    1fda:	9f 93       	push	r25
    1fdc:	af 93       	push	r26
    1fde:	bf 93       	push	r27
    1fe0:	df 93       	push	r29
    1fe2:	cf 93       	push	r28
    1fe4:	cd b7       	in	r28, 0x3d	; 61
    1fe6:	de b7       	in	r29, 0x3e	; 62
	ShaftCountRight++;
    1fe8:	80 91 3e 04 	lds	r24, 0x043E
    1fec:	90 91 3f 04 	lds	r25, 0x043F
    1ff0:	a0 91 40 04 	lds	r26, 0x0440
    1ff4:	b0 91 41 04 	lds	r27, 0x0441
    1ff8:	01 96       	adiw	r24, 0x01	; 1
    1ffa:	a1 1d       	adc	r26, r1
    1ffc:	b1 1d       	adc	r27, r1
    1ffe:	80 93 3e 04 	sts	0x043E, r24
    2002:	90 93 3f 04 	sts	0x043F, r25
    2006:	a0 93 40 04 	sts	0x0440, r26
    200a:	b0 93 41 04 	sts	0x0441, r27
}
    200e:	cf 91       	pop	r28
    2010:	df 91       	pop	r29
    2012:	bf 91       	pop	r27
    2014:	af 91       	pop	r26
    2016:	9f 91       	pop	r25
    2018:	8f 91       	pop	r24
    201a:	0f 90       	pop	r0
    201c:	0f be       	out	0x3f, r0	; 63
    201e:	0f 90       	pop	r0
    2020:	1f 90       	pop	r1
    2022:	18 95       	reti

00002024 <angle_rotate>:

void angle_rotate(char dir, unsigned int degrees)
{
    2024:	df 93       	push	r29
    2026:	cf 93       	push	r28
    2028:	cd b7       	in	r28, 0x3d	; 61
    202a:	de b7       	in	r29, 0x3e	; 62
    202c:	2b 97       	sbiw	r28, 0x0b	; 11
    202e:	0f b6       	in	r0, 0x3f	; 63
    2030:	f8 94       	cli
    2032:	de bf       	out	0x3e, r29	; 62
    2034:	0f be       	out	0x3f, r0	; 63
    2036:	cd bf       	out	0x3d, r28	; 61
    2038:	89 87       	std	Y+9, r24	; 0x09
    203a:	7b 87       	std	Y+11, r23	; 0x0b
    203c:	6a 87       	std	Y+10, r22	; 0x0a
	float ReqdShaftCount = 0;
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	a0 e0       	ldi	r26, 0x00	; 0
    2044:	b0 e0       	ldi	r27, 0x00	; 0
    2046:	8d 83       	std	Y+5, r24	; 0x05
    2048:	9e 83       	std	Y+6, r25	; 0x06
    204a:	af 83       	std	Y+7, r26	; 0x07
    204c:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
    204e:	19 82       	std	Y+1, r1	; 0x01
    2050:	1a 82       	std	Y+2, r1	; 0x02
    2052:	1b 82       	std	Y+3, r1	; 0x03
    2054:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = (float) Degrees/4.090;
    2056:	80 91 48 04 	lds	r24, 0x0448
    205a:	90 91 49 04 	lds	r25, 0x0449
    205e:	cc 01       	movw	r24, r24
    2060:	a0 e0       	ldi	r26, 0x00	; 0
    2062:	b0 e0       	ldi	r27, 0x00	; 0
    2064:	bc 01       	movw	r22, r24
    2066:	cd 01       	movw	r24, r26
    2068:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <__floatunsisf>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	bc 01       	movw	r22, r24
    2072:	cd 01       	movw	r24, r26
    2074:	28 e4       	ldi	r18, 0x48	; 72
    2076:	31 ee       	ldi	r19, 0xE1	; 225
    2078:	42 e8       	ldi	r20, 0x82	; 130
    207a:	50 e4       	ldi	r21, 0x40	; 64
    207c:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <__divsf3>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	8d 83       	std	Y+5, r24	; 0x05
    2086:	9e 83       	std	Y+6, r25	; 0x06
    2088:	af 83       	std	Y+7, r26	; 0x07
    208a:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
    208c:	6d 81       	ldd	r22, Y+5	; 0x05
    208e:	7e 81       	ldd	r23, Y+6	; 0x06
    2090:	8f 81       	ldd	r24, Y+7	; 0x07
    2092:	98 85       	ldd	r25, Y+8	; 0x08
    2094:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	cc 01       	movw	r24, r24
    209e:	a0 e0       	ldi	r26, 0x00	; 0
    20a0:	b0 e0       	ldi	r27, 0x00	; 0
    20a2:	89 83       	std	Y+1, r24	; 0x01
    20a4:	9a 83       	std	Y+2, r25	; 0x02
    20a6:	ab 83       	std	Y+3, r26	; 0x03
    20a8:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountRight = 0;
    20aa:	10 92 3e 04 	sts	0x043E, r1
    20ae:	10 92 3f 04 	sts	0x043F, r1
    20b2:	10 92 40 04 	sts	0x0440, r1
    20b6:	10 92 41 04 	sts	0x0441, r1
	ShaftCountLeft = 0;
    20ba:	10 92 3a 04 	sts	0x043A, r1
    20be:	10 92 3b 04 	sts	0x043B, r1
    20c2:	10 92 3c 04 	sts	0x043C, r1
    20c6:	10 92 3d 04 	sts	0x043D, r1

	if(dir == 'r')
    20ca:	89 85       	ldd	r24, Y+9	; 0x09
    20cc:	82 37       	cpi	r24, 0x72	; 114
    20ce:	19 f4       	brne	.+6      	; 0x20d6 <angle_rotate+0xb2>
	{
		rot_right();
    20d0:	0e 94 90 12 	call	0x2520	; 0x2520 <rot_right>
    20d4:	05 c0       	rjmp	.+10     	; 0x20e0 <angle_rotate+0xbc>
	}
	else if(dir == 'l')
    20d6:	89 85       	ldd	r24, Y+9	; 0x09
    20d8:	8c 36       	cpi	r24, 0x6C	; 108
    20da:	11 f4       	brne	.+4      	; 0x20e0 <angle_rotate+0xbc>
	{
		rot_left();
    20dc:	0e 94 86 12 	call	0x250c	; 0x250c <rot_left>
	}
	buzzer_on(1000);
    20e0:	88 ee       	ldi	r24, 0xE8	; 232
    20e2:	93 e0       	ldi	r25, 0x03	; 3
    20e4:	0e 94 86 11 	call	0x230c	; 0x230c <buzzer_on>
	while((ShaftCountRight < ReqdShaftCountInt) || (ShaftCountLeft < ReqdShaftCountInt));
    20e8:	20 91 3e 04 	lds	r18, 0x043E
    20ec:	30 91 3f 04 	lds	r19, 0x043F
    20f0:	40 91 40 04 	lds	r20, 0x0440
    20f4:	50 91 41 04 	lds	r21, 0x0441
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	9a 81       	ldd	r25, Y+2	; 0x02
    20fc:	ab 81       	ldd	r26, Y+3	; 0x03
    20fe:	bc 81       	ldd	r27, Y+4	; 0x04
    2100:	28 17       	cp	r18, r24
    2102:	39 07       	cpc	r19, r25
    2104:	4a 07       	cpc	r20, r26
    2106:	5b 07       	cpc	r21, r27
    2108:	78 f3       	brcs	.-34     	; 0x20e8 <angle_rotate+0xc4>
    210a:	20 91 3a 04 	lds	r18, 0x043A
    210e:	30 91 3b 04 	lds	r19, 0x043B
    2112:	40 91 3c 04 	lds	r20, 0x043C
    2116:	50 91 3d 04 	lds	r21, 0x043D
    211a:	89 81       	ldd	r24, Y+1	; 0x01
    211c:	9a 81       	ldd	r25, Y+2	; 0x02
    211e:	ab 81       	ldd	r26, Y+3	; 0x03
    2120:	bc 81       	ldd	r27, Y+4	; 0x04
    2122:	28 17       	cp	r18, r24
    2124:	39 07       	cpc	r19, r25
    2126:	4a 07       	cpc	r20, r26
    2128:	5b 07       	cpc	r21, r27
    212a:	f0 f2       	brcs	.-68     	; 0x20e8 <angle_rotate+0xc4>
//	while((ShaftCountRight < 0) || (ShaftCountLeft < 0));

	buzzer_off();
    212c:	0e 94 78 11 	call	0x22f0	; 0x22f0 <buzzer_off>
	stop();
    2130:	0e 94 72 12 	call	0x24e4	; 0x24e4 <stop>
}
    2134:	2b 96       	adiw	r28, 0x0b	; 11
    2136:	0f b6       	in	r0, 0x3f	; 63
    2138:	f8 94       	cli
    213a:	de bf       	out	0x3e, r29	; 62
    213c:	0f be       	out	0x3f, r0	; 63
    213e:	cd bf       	out	0x3d, r28	; 61
    2140:	cf 91       	pop	r28
    2142:	df 91       	pop	r29
    2144:	08 95       	ret

00002146 <distance_mm>:

void distance_mm(char dir, unsigned int distance)
{
    2146:	df 93       	push	r29
    2148:	cf 93       	push	r28
    214a:	cd b7       	in	r28, 0x3d	; 61
    214c:	de b7       	in	r29, 0x3e	; 62
    214e:	2b 97       	sbiw	r28, 0x0b	; 11
    2150:	0f b6       	in	r0, 0x3f	; 63
    2152:	f8 94       	cli
    2154:	de bf       	out	0x3e, r29	; 62
    2156:	0f be       	out	0x3f, r0	; 63
    2158:	cd bf       	out	0x3d, r28	; 61
    215a:	89 87       	std	Y+9, r24	; 0x09
    215c:	7b 87       	std	Y+11, r23	; 0x0b
    215e:	6a 87       	std	Y+10, r22	; 0x0a
	float ReqdShaftCount = 0;
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	a0 e0       	ldi	r26, 0x00	; 0
    2166:	b0 e0       	ldi	r27, 0x00	; 0
    2168:	8d 83       	std	Y+5, r24	; 0x05
    216a:	9e 83       	std	Y+6, r25	; 0x06
    216c:	af 83       	std	Y+7, r26	; 0x07
    216e:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
    2170:	19 82       	std	Y+1, r1	; 0x01
    2172:	1a 82       	std	Y+2, r1	; 0x02
    2174:	1b 82       	std	Y+3, r1	; 0x03
    2176:	1c 82       	std	Y+4, r1	; 0x04

	ReqdShaftCount = (float) distance/5.338;
    2178:	8a 85       	ldd	r24, Y+10	; 0x0a
    217a:	9b 85       	ldd	r25, Y+11	; 0x0b
    217c:	cc 01       	movw	r24, r24
    217e:	a0 e0       	ldi	r26, 0x00	; 0
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	bc 01       	movw	r22, r24
    2184:	cd 01       	movw	r24, r26
    2186:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <__floatunsisf>
    218a:	dc 01       	movw	r26, r24
    218c:	cb 01       	movw	r24, r22
    218e:	bc 01       	movw	r22, r24
    2190:	cd 01       	movw	r24, r26
    2192:	25 ee       	ldi	r18, 0xE5	; 229
    2194:	30 ed       	ldi	r19, 0xD0	; 208
    2196:	4a ea       	ldi	r20, 0xAA	; 170
    2198:	50 e4       	ldi	r21, 0x40	; 64
    219a:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <__divsf3>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	8d 83       	std	Y+5, r24	; 0x05
    21a4:	9e 83       	std	Y+6, r25	; 0x06
    21a6:	af 83       	std	Y+7, r26	; 0x07
    21a8:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
    21aa:	6d 81       	ldd	r22, Y+5	; 0x05
    21ac:	7e 81       	ldd	r23, Y+6	; 0x06
    21ae:	8f 81       	ldd	r24, Y+7	; 0x07
    21b0:	98 85       	ldd	r25, Y+8	; 0x08
    21b2:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	cc 01       	movw	r24, r24
    21bc:	a0 e0       	ldi	r26, 0x00	; 0
    21be:	b0 e0       	ldi	r27, 0x00	; 0
    21c0:	89 83       	std	Y+1, r24	; 0x01
    21c2:	9a 83       	std	Y+2, r25	; 0x02
    21c4:	ab 83       	std	Y+3, r26	; 0x03
    21c6:	bc 83       	std	Y+4, r27	; 0x04
	ShaftCountRight = 0;
    21c8:	10 92 3e 04 	sts	0x043E, r1
    21cc:	10 92 3f 04 	sts	0x043F, r1
    21d0:	10 92 40 04 	sts	0x0440, r1
    21d4:	10 92 41 04 	sts	0x0441, r1
	ShaftCountLeft = 0;
    21d8:	10 92 3a 04 	sts	0x043A, r1
    21dc:	10 92 3b 04 	sts	0x043B, r1
    21e0:	10 92 3c 04 	sts	0x043C, r1
    21e4:	10 92 3d 04 	sts	0x043D, r1

	if(dir == 'f')
    21e8:	89 85       	ldd	r24, Y+9	; 0x09
    21ea:	86 36       	cpi	r24, 0x66	; 102
    21ec:	19 f4       	brne	.+6      	; 0x21f4 <distance_mm+0xae>
	{
		forward();
    21ee:	0e 94 68 12 	call	0x24d0	; 0x24d0 <forward>
    21f2:	05 c0       	rjmp	.+10     	; 0x21fe <distance_mm+0xb8>
	}
	else if(dir == 'b')
    21f4:	89 85       	ldd	r24, Y+9	; 0x09
    21f6:	82 36       	cpi	r24, 0x62	; 98
    21f8:	11 f4       	brne	.+4      	; 0x21fe <distance_mm+0xb8>
	{
		backward();
    21fa:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <backward>
	}
	while((ShaftCountRight < ReqdShaftCountInt) || (ShaftCountLeft < ReqdShaftCountInt));
    21fe:	20 91 3e 04 	lds	r18, 0x043E
    2202:	30 91 3f 04 	lds	r19, 0x043F
    2206:	40 91 40 04 	lds	r20, 0x0440
    220a:	50 91 41 04 	lds	r21, 0x0441
    220e:	89 81       	ldd	r24, Y+1	; 0x01
    2210:	9a 81       	ldd	r25, Y+2	; 0x02
    2212:	ab 81       	ldd	r26, Y+3	; 0x03
    2214:	bc 81       	ldd	r27, Y+4	; 0x04
    2216:	28 17       	cp	r18, r24
    2218:	39 07       	cpc	r19, r25
    221a:	4a 07       	cpc	r20, r26
    221c:	5b 07       	cpc	r21, r27
    221e:	78 f3       	brcs	.-34     	; 0x21fe <distance_mm+0xb8>
    2220:	20 91 3a 04 	lds	r18, 0x043A
    2224:	30 91 3b 04 	lds	r19, 0x043B
    2228:	40 91 3c 04 	lds	r20, 0x043C
    222c:	50 91 3d 04 	lds	r21, 0x043D
    2230:	89 81       	ldd	r24, Y+1	; 0x01
    2232:	9a 81       	ldd	r25, Y+2	; 0x02
    2234:	ab 81       	ldd	r26, Y+3	; 0x03
    2236:	bc 81       	ldd	r27, Y+4	; 0x04
    2238:	28 17       	cp	r18, r24
    223a:	39 07       	cpc	r19, r25
    223c:	4a 07       	cpc	r20, r26
    223e:	5b 07       	cpc	r21, r27
    2240:	f0 f2       	brcs	.-68     	; 0x21fe <distance_mm+0xb8>
	stop();
    2242:	0e 94 72 12 	call	0x24e4	; 0x24e4 <stop>
}
    2246:	2b 96       	adiw	r28, 0x0b	; 11
    2248:	0f b6       	in	r0, 0x3f	; 63
    224a:	f8 94       	cli
    224c:	de bf       	out	0x3e, r29	; 62
    224e:	0f be       	out	0x3f, r0	; 63
    2250:	cd bf       	out	0x3d, r28	; 61
    2252:	cf 91       	pop	r28
    2254:	df 91       	pop	r29
    2256:	08 95       	ret

00002258 <init_devices>:

void init_devices()
{
    2258:	df 93       	push	r29
    225a:	cf 93       	push	r28
    225c:	cd b7       	in	r28, 0x3d	; 61
    225e:	de b7       	in	r29, 0x3e	; 62
	buzzer_pin_config();
    2260:	0e 94 63 11 	call	0x22c6	; 0x22c6 <buzzer_pin_config>
	motion_pin_config();
    2264:	0e 94 35 12 	call	0x246a	; 0x246a <motion_pin_config>
	lcd_port_config();
    2268:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_port_config>
	lcd_init();
    226c:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_init>
	timer5_init();
    2270:	0e 94 ae 12 	call	0x255c	; 0x255c <timer5_init>
	adc_pin_config();
    2274:	0e 94 40 0a 	call	0x1480	; 0x1480 <adc_pin_config>
	adc_init();
    2278:	0e 94 4d 0a 	call	0x149a	; 0x149a <adc_init>
	servo_init();
    227c:	0e 94 16 0b 	call	0x162c	; 0x162c <servo_init>
	encoder_pin_config();
    2280:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <encoder_pin_config>
	interrupt_init();
    2284:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <interrupt_init>
	init_xbee();
    2288:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <init_xbee>
	//init_uart();
}		
    228c:	cf 91       	pop	r28
    228e:	df 91       	pop	r29
    2290:	08 95       	ret

00002292 <print_sensor>:

void print_sensor(char row, char coloumn,unsigned char channel)
{
    2292:	df 93       	push	r29
    2294:	cf 93       	push	r28
    2296:	00 d0       	rcall	.+0      	; 0x2298 <print_sensor+0x6>
    2298:	cd b7       	in	r28, 0x3d	; 61
    229a:	de b7       	in	r29, 0x3e	; 62
    229c:	89 83       	std	Y+1, r24	; 0x01
    229e:	6a 83       	std	Y+2, r22	; 0x02
    22a0:	4b 83       	std	Y+3, r20	; 0x03
	lcd_print(row, coloumn, adc_convert(channel), 3);
    22a2:	8b 81       	ldd	r24, Y+3	; 0x03
    22a4:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <adc_convert>
    22a8:	28 2f       	mov	r18, r24
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	89 81       	ldd	r24, Y+1	; 0x01
    22ae:	6a 81       	ldd	r22, Y+2	; 0x02
    22b0:	a9 01       	movw	r20, r18
    22b2:	23 e0       	ldi	r18, 0x03	; 3
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <lcd_print>
}
    22ba:	0f 90       	pop	r0
    22bc:	0f 90       	pop	r0
    22be:	0f 90       	pop	r0
    22c0:	cf 91       	pop	r28
    22c2:	df 91       	pop	r29
    22c4:	08 95       	ret

000022c6 <buzzer_pin_config>:
unsigned char r = 0;
unsigned char adc_convert(unsigned char);
unsigned char ADC_Value;

void buzzer_pin_config()
{
    22c6:	df 93       	push	r29
    22c8:	cf 93       	push	r28
    22ca:	cd b7       	in	r28, 0x3d	; 61
    22cc:	de b7       	in	r29, 0x3e	; 62
	DDRC |= 0x08;
    22ce:	a7 e2       	ldi	r26, 0x27	; 39
    22d0:	b0 e0       	ldi	r27, 0x00	; 0
    22d2:	e7 e2       	ldi	r30, 0x27	; 39
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	80 81       	ld	r24, Z
    22d8:	88 60       	ori	r24, 0x08	; 8
    22da:	8c 93       	st	X, r24
	PORTC &= 0xf7;
    22dc:	a8 e2       	ldi	r26, 0x28	; 40
    22de:	b0 e0       	ldi	r27, 0x00	; 0
    22e0:	e8 e2       	ldi	r30, 0x28	; 40
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	80 81       	ld	r24, Z
    22e6:	87 7f       	andi	r24, 0xF7	; 247
    22e8:	8c 93       	st	X, r24
}
    22ea:	cf 91       	pop	r28
    22ec:	df 91       	pop	r29
    22ee:	08 95       	ret

000022f0 <buzzer_off>:

void buzzer_off()
{
    22f0:	df 93       	push	r29
    22f2:	cf 93       	push	r28
    22f4:	cd b7       	in	r28, 0x3d	; 61
    22f6:	de b7       	in	r29, 0x3e	; 62
	PORTC &= 0xf7;
    22f8:	a8 e2       	ldi	r26, 0x28	; 40
    22fa:	b0 e0       	ldi	r27, 0x00	; 0
    22fc:	e8 e2       	ldi	r30, 0x28	; 40
    22fe:	f0 e0       	ldi	r31, 0x00	; 0
    2300:	80 81       	ld	r24, Z
    2302:	87 7f       	andi	r24, 0xF7	; 247
    2304:	8c 93       	st	X, r24
}
    2306:	cf 91       	pop	r28
    2308:	df 91       	pop	r29
    230a:	08 95       	ret

0000230c <buzzer_on>:

void buzzer_on(int time_in_milli)
{
    230c:	df 93       	push	r29
    230e:	cf 93       	push	r28
    2310:	cd b7       	in	r28, 0x3d	; 61
    2312:	de b7       	in	r29, 0x3e	; 62
    2314:	61 97       	sbiw	r28, 0x11	; 17
    2316:	0f b6       	in	r0, 0x3f	; 63
    2318:	f8 94       	cli
    231a:	de bf       	out	0x3e, r29	; 62
    231c:	0f be       	out	0x3f, r0	; 63
    231e:	cd bf       	out	0x3d, r28	; 61
    2320:	98 8b       	std	Y+16, r25	; 0x10
    2322:	8f 87       	std	Y+15, r24	; 0x0f
	PORTC |= 0x08;
    2324:	a8 e2       	ldi	r26, 0x28	; 40
    2326:	b0 e0       	ldi	r27, 0x00	; 0
    2328:	e8 e2       	ldi	r30, 0x28	; 40
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	80 81       	ld	r24, Z
    232e:	88 60       	ori	r24, 0x08	; 8
    2330:	8c 93       	st	X, r24
    2332:	72 c0       	rjmp	.+228    	; 0x2418 <buzzer_on+0x10c>
	while(time_in_milli--)
    2334:	80 e0       	ldi	r24, 0x00	; 0
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	a0 e8       	ldi	r26, 0x80	; 128
    233a:	bf e3       	ldi	r27, 0x3F	; 63
    233c:	8b 87       	std	Y+11, r24	; 0x0b
    233e:	9c 87       	std	Y+12, r25	; 0x0c
    2340:	ad 87       	std	Y+13, r26	; 0x0d
    2342:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2344:	6b 85       	ldd	r22, Y+11	; 0x0b
    2346:	7c 85       	ldd	r23, Y+12	; 0x0c
    2348:	8d 85       	ldd	r24, Y+13	; 0x0d
    234a:	9e 85       	ldd	r25, Y+14	; 0x0e
    234c:	26 e6       	ldi	r18, 0x66	; 102
    234e:	36 e6       	ldi	r19, 0x66	; 102
    2350:	46 e6       	ldi	r20, 0x66	; 102
    2352:	55 e4       	ldi	r21, 0x45	; 69
    2354:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
    2358:	dc 01       	movw	r26, r24
    235a:	cb 01       	movw	r24, r22
    235c:	8f 83       	std	Y+7, r24	; 0x07
    235e:	98 87       	std	Y+8, r25	; 0x08
    2360:	a9 87       	std	Y+9, r26	; 0x09
    2362:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2364:	6f 81       	ldd	r22, Y+7	; 0x07
    2366:	78 85       	ldd	r23, Y+8	; 0x08
    2368:	89 85       	ldd	r24, Y+9	; 0x09
    236a:	9a 85       	ldd	r25, Y+10	; 0x0a
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	40 e8       	ldi	r20, 0x80	; 128
    2372:	5f e3       	ldi	r21, 0x3F	; 63
    2374:	0e 94 68 22 	call	0x44d0	; 0x44d0 <__ltsf2>
    2378:	88 23       	and	r24, r24
    237a:	2c f4       	brge	.+10     	; 0x2386 <buzzer_on+0x7a>
		__ticks = 1;
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	9e 83       	std	Y+6, r25	; 0x06
    2382:	8d 83       	std	Y+5, r24	; 0x05
    2384:	3f c0       	rjmp	.+126    	; 0x2404 <buzzer_on+0xf8>
	else if (__tmp > 65535)
    2386:	6f 81       	ldd	r22, Y+7	; 0x07
    2388:	78 85       	ldd	r23, Y+8	; 0x08
    238a:	89 85       	ldd	r24, Y+9	; 0x09
    238c:	9a 85       	ldd	r25, Y+10	; 0x0a
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	3f ef       	ldi	r19, 0xFF	; 255
    2392:	4f e7       	ldi	r20, 0x7F	; 127
    2394:	57 e4       	ldi	r21, 0x47	; 71
    2396:	0e 94 08 22 	call	0x4410	; 0x4410 <__gtsf2>
    239a:	18 16       	cp	r1, r24
    239c:	4c f5       	brge	.+82     	; 0x23f0 <buzzer_on+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    239e:	6b 85       	ldd	r22, Y+11	; 0x0b
    23a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    23a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    23a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	40 e2       	ldi	r20, 0x20	; 32
    23ac:	51 e4       	ldi	r21, 0x41	; 65
    23ae:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
    23b2:	dc 01       	movw	r26, r24
    23b4:	cb 01       	movw	r24, r22
    23b6:	bc 01       	movw	r22, r24
    23b8:	cd 01       	movw	r24, r26
    23ba:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	9e 83       	std	Y+6, r25	; 0x06
    23c4:	8d 83       	std	Y+5, r24	; 0x05
    23c6:	0f c0       	rjmp	.+30     	; 0x23e6 <buzzer_on+0xda>
    23c8:	80 e7       	ldi	r24, 0x70	; 112
    23ca:	91 e0       	ldi	r25, 0x01	; 1
    23cc:	9c 83       	std	Y+4, r25	; 0x04
    23ce:	8b 83       	std	Y+3, r24	; 0x03
    23d0:	8b 81       	ldd	r24, Y+3	; 0x03
    23d2:	9c 81       	ldd	r25, Y+4	; 0x04
    23d4:	01 97       	sbiw	r24, 0x01	; 1
    23d6:	f1 f7       	brne	.-4      	; 0x23d4 <buzzer_on+0xc8>
    23d8:	9c 83       	std	Y+4, r25	; 0x04
    23da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23dc:	8d 81       	ldd	r24, Y+5	; 0x05
    23de:	9e 81       	ldd	r25, Y+6	; 0x06
    23e0:	01 97       	sbiw	r24, 0x01	; 1
    23e2:	9e 83       	std	Y+6, r25	; 0x06
    23e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23e6:	8d 81       	ldd	r24, Y+5	; 0x05
    23e8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ea:	00 97       	sbiw	r24, 0x00	; 0
    23ec:	69 f7       	brne	.-38     	; 0x23c8 <buzzer_on+0xbc>
    23ee:	14 c0       	rjmp	.+40     	; 0x2418 <buzzer_on+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f0:	6f 81       	ldd	r22, Y+7	; 0x07
    23f2:	78 85       	ldd	r23, Y+8	; 0x08
    23f4:	89 85       	ldd	r24, Y+9	; 0x09
    23f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f8:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	9e 83       	std	Y+6, r25	; 0x06
    2402:	8d 83       	std	Y+5, r24	; 0x05
    2404:	8d 81       	ldd	r24, Y+5	; 0x05
    2406:	9e 81       	ldd	r25, Y+6	; 0x06
    2408:	9a 83       	std	Y+2, r25	; 0x02
    240a:	89 83       	std	Y+1, r24	; 0x01
    240c:	89 81       	ldd	r24, Y+1	; 0x01
    240e:	9a 81       	ldd	r25, Y+2	; 0x02
    2410:	01 97       	sbiw	r24, 0x01	; 1
    2412:	f1 f7       	brne	.-4      	; 0x2410 <buzzer_on+0x104>
    2414:	9a 83       	std	Y+2, r25	; 0x02
    2416:	89 83       	std	Y+1, r24	; 0x01
    2418:	19 8a       	std	Y+17, r1	; 0x11
    241a:	8f 85       	ldd	r24, Y+15	; 0x0f
    241c:	98 89       	ldd	r25, Y+16	; 0x10
    241e:	00 97       	sbiw	r24, 0x00	; 0
    2420:	11 f0       	breq	.+4      	; 0x2426 <buzzer_on+0x11a>
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	89 8b       	std	Y+17, r24	; 0x11
    2426:	8f 85       	ldd	r24, Y+15	; 0x0f
    2428:	98 89       	ldd	r25, Y+16	; 0x10
    242a:	01 97       	sbiw	r24, 0x01	; 1
    242c:	98 8b       	std	Y+16, r25	; 0x10
    242e:	8f 87       	std	Y+15, r24	; 0x0f
    2430:	89 89       	ldd	r24, Y+17	; 0x11
    2432:	88 23       	and	r24, r24
    2434:	09 f0       	breq	.+2      	; 0x2438 <buzzer_on+0x12c>
    2436:	7e cf       	rjmp	.-260    	; 0x2334 <buzzer_on+0x28>
		_delay_ms(1);
	buzzer_off();
    2438:	0e 94 78 11 	call	0x22f0	; 0x22f0 <buzzer_off>
}
    243c:	61 96       	adiw	r28, 0x11	; 17
    243e:	0f b6       	in	r0, 0x3f	; 63
    2440:	f8 94       	cli
    2442:	de bf       	out	0x3e, r29	; 62
    2444:	0f be       	out	0x3f, r0	; 63
    2446:	cd bf       	out	0x3d, r28	; 61
    2448:	cf 91       	pop	r28
    244a:	df 91       	pop	r29
    244c:	08 95       	ret

0000244e <buzzer_ON>:
void buzzer_ON()
{
    244e:	df 93       	push	r29
    2450:	cf 93       	push	r28
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
	PORTC |= 0x08;
    2456:	a8 e2       	ldi	r26, 0x28	; 40
    2458:	b0 e0       	ldi	r27, 0x00	; 0
    245a:	e8 e2       	ldi	r30, 0x28	; 40
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	80 81       	ld	r24, Z
    2460:	88 60       	ori	r24, 0x08	; 8
    2462:	8c 93       	st	X, r24
}
    2464:	cf 91       	pop	r28
    2466:	df 91       	pop	r29
    2468:	08 95       	ret

0000246a <motion_pin_config>:

void motion_pin_config()
{
    246a:	df 93       	push	r29
    246c:	cf 93       	push	r28
    246e:	cd b7       	in	r28, 0x3d	; 61
    2470:	de b7       	in	r29, 0x3e	; 62
	DDRA |= 0x0f;
    2472:	a1 e2       	ldi	r26, 0x21	; 33
    2474:	b0 e0       	ldi	r27, 0x00	; 0
    2476:	e1 e2       	ldi	r30, 0x21	; 33
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	80 81       	ld	r24, Z
    247c:	8f 60       	ori	r24, 0x0F	; 15
    247e:	8c 93       	st	X, r24
	DDRL |= 0x18;
    2480:	aa e0       	ldi	r26, 0x0A	; 10
    2482:	b1 e0       	ldi	r27, 0x01	; 1
    2484:	ea e0       	ldi	r30, 0x0A	; 10
    2486:	f1 e0       	ldi	r31, 0x01	; 1
    2488:	80 81       	ld	r24, Z
    248a:	88 61       	ori	r24, 0x18	; 24
    248c:	8c 93       	st	X, r24
	PORTL |= 0x18;
    248e:	ab e0       	ldi	r26, 0x0B	; 11
    2490:	b1 e0       	ldi	r27, 0x01	; 1
    2492:	eb e0       	ldi	r30, 0x0B	; 11
    2494:	f1 e0       	ldi	r31, 0x01	; 1
    2496:	80 81       	ld	r24, Z
    2498:	88 61       	ori	r24, 0x18	; 24
    249a:	8c 93       	st	X, r24
	PORTA = 0x00;
    249c:	e2 e2       	ldi	r30, 0x22	; 34
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	10 82       	st	Z, r1
}
    24a2:	cf 91       	pop	r28
    24a4:	df 91       	pop	r29
    24a6:	08 95       	ret

000024a8 <motion_set>:

void motion_set(unsigned char dir)
{
    24a8:	df 93       	push	r29
    24aa:	cf 93       	push	r28
    24ac:	0f 92       	push	r0
    24ae:	cd b7       	in	r28, 0x3d	; 61
    24b0:	de b7       	in	r29, 0x3e	; 62
    24b2:	89 83       	std	Y+1, r24	; 0x01
	PORTA = (PINA & 0xf0) | dir;
    24b4:	a2 e2       	ldi	r26, 0x22	; 34
    24b6:	b0 e0       	ldi	r27, 0x00	; 0
    24b8:	e0 e2       	ldi	r30, 0x20	; 32
    24ba:	f0 e0       	ldi	r31, 0x00	; 0
    24bc:	80 81       	ld	r24, Z
    24be:	98 2f       	mov	r25, r24
    24c0:	90 7f       	andi	r25, 0xF0	; 240
    24c2:	89 81       	ldd	r24, Y+1	; 0x01
    24c4:	89 2b       	or	r24, r25
    24c6:	8c 93       	st	X, r24
}
    24c8:	0f 90       	pop	r0
    24ca:	cf 91       	pop	r28
    24cc:	df 91       	pop	r29
    24ce:	08 95       	ret

000024d0 <forward>:

void forward()
{
    24d0:	df 93       	push	r29
    24d2:	cf 93       	push	r28
    24d4:	cd b7       	in	r28, 0x3d	; 61
    24d6:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x06);
    24d8:	86 e0       	ldi	r24, 0x06	; 6
    24da:	0e 94 54 12 	call	0x24a8	; 0x24a8 <motion_set>
}
    24de:	cf 91       	pop	r28
    24e0:	df 91       	pop	r29
    24e2:	08 95       	ret

000024e4 <stop>:
void stop()
{
    24e4:	df 93       	push	r29
    24e6:	cf 93       	push	r28
    24e8:	cd b7       	in	r28, 0x3d	; 61
    24ea:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x00);
    24ec:	80 e0       	ldi	r24, 0x00	; 0
    24ee:	0e 94 54 12 	call	0x24a8	; 0x24a8 <motion_set>
}
    24f2:	cf 91       	pop	r28
    24f4:	df 91       	pop	r29
    24f6:	08 95       	ret

000024f8 <backward>:
void backward()
{
    24f8:	df 93       	push	r29
    24fa:	cf 93       	push	r28
    24fc:	cd b7       	in	r28, 0x3d	; 61
    24fe:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x09);
    2500:	89 e0       	ldi	r24, 0x09	; 9
    2502:	0e 94 54 12 	call	0x24a8	; 0x24a8 <motion_set>
}
    2506:	cf 91       	pop	r28
    2508:	df 91       	pop	r29
    250a:	08 95       	ret

0000250c <rot_left>:
void rot_left()
{
    250c:	df 93       	push	r29
    250e:	cf 93       	push	r28
    2510:	cd b7       	in	r28, 0x3d	; 61
    2512:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x05);
    2514:	85 e0       	ldi	r24, 0x05	; 5
    2516:	0e 94 54 12 	call	0x24a8	; 0x24a8 <motion_set>
}
    251a:	cf 91       	pop	r28
    251c:	df 91       	pop	r29
    251e:	08 95       	ret

00002520 <rot_right>:
void rot_right()
{
    2520:	df 93       	push	r29
    2522:	cf 93       	push	r28
    2524:	cd b7       	in	r28, 0x3d	; 61
    2526:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x0a);
    2528:	8a e0       	ldi	r24, 0x0A	; 10
    252a:	0e 94 54 12 	call	0x24a8	; 0x24a8 <motion_set>
}
    252e:	cf 91       	pop	r28
    2530:	df 91       	pop	r29
    2532:	08 95       	ret

00002534 <soft_left>:
void soft_left()
{
    2534:	df 93       	push	r29
    2536:	cf 93       	push	r28
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x04);
    253c:	84 e0       	ldi	r24, 0x04	; 4
    253e:	0e 94 54 12 	call	0x24a8	; 0x24a8 <motion_set>
}
    2542:	cf 91       	pop	r28
    2544:	df 91       	pop	r29
    2546:	08 95       	ret

00002548 <soft_right>:
void soft_right()
{
    2548:	df 93       	push	r29
    254a:	cf 93       	push	r28
    254c:	cd b7       	in	r28, 0x3d	; 61
    254e:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x02);
    2550:	82 e0       	ldi	r24, 0x02	; 2
    2552:	0e 94 54 12 	call	0x24a8	; 0x24a8 <motion_set>
}
    2556:	cf 91       	pop	r28
    2558:	df 91       	pop	r29
    255a:	08 95       	ret

0000255c <timer5_init>:


void timer5_init()
{
    255c:	df 93       	push	r29
    255e:	cf 93       	push	r28
    2560:	cd b7       	in	r28, 0x3d	; 61
    2562:	de b7       	in	r29, 0x3e	; 62
	TCCR5A = 0xa9;
    2564:	e0 e2       	ldi	r30, 0x20	; 32
    2566:	f1 e0       	ldi	r31, 0x01	; 1
    2568:	89 ea       	ldi	r24, 0xA9	; 169
    256a:	80 83       	st	Z, r24
	TCCR5B = 0x0b;
    256c:	e1 e2       	ldi	r30, 0x21	; 33
    256e:	f1 e0       	ldi	r31, 0x01	; 1
    2570:	8b e0       	ldi	r24, 0x0B	; 11
    2572:	80 83       	st	Z, r24
	TCNT5H = 0x00;
    2574:	e5 e2       	ldi	r30, 0x25	; 37
    2576:	f1 e0       	ldi	r31, 0x01	; 1
    2578:	10 82       	st	Z, r1
	TCNT5L = 0x00;
    257a:	e4 e2       	ldi	r30, 0x24	; 36
    257c:	f1 e0       	ldi	r31, 0x01	; 1
    257e:	10 82       	st	Z, r1
	OCR5AL = 0xff;
    2580:	e8 e2       	ldi	r30, 0x28	; 40
    2582:	f1 e0       	ldi	r31, 0x01	; 1
    2584:	8f ef       	ldi	r24, 0xFF	; 255
    2586:	80 83       	st	Z, r24
	OCR5BL = 0xff;
    2588:	ea e2       	ldi	r30, 0x2A	; 42
    258a:	f1 e0       	ldi	r31, 0x01	; 1
    258c:	8f ef       	ldi	r24, 0xFF	; 255
    258e:	80 83       	st	Z, r24
}
    2590:	cf 91       	pop	r28
    2592:	df 91       	pop	r29
    2594:	08 95       	ret

00002596 <left_wl>:


unsigned char left_wl()
{
    2596:	df 93       	push	r29
    2598:	cf 93       	push	r28
    259a:	cd b7       	in	r28, 0x3d	; 61
    259c:	de b7       	in	r29, 0x3e	; 62
	return adc_convert(3);
    259e:	83 e0       	ldi	r24, 0x03	; 3
    25a0:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <adc_convert>
}
    25a4:	cf 91       	pop	r28
    25a6:	df 91       	pop	r29
    25a8:	08 95       	ret

000025aa <mid_wl>:
unsigned char mid_wl()
{
    25aa:	df 93       	push	r29
    25ac:	cf 93       	push	r28
    25ae:	cd b7       	in	r28, 0x3d	; 61
    25b0:	de b7       	in	r29, 0x3e	; 62
	return adc_convert(2);
    25b2:	82 e0       	ldi	r24, 0x02	; 2
    25b4:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <adc_convert>
}
    25b8:	cf 91       	pop	r28
    25ba:	df 91       	pop	r29
    25bc:	08 95       	ret

000025be <right_wl>:
unsigned char right_wl()
{
    25be:	df 93       	push	r29
    25c0:	cf 93       	push	r28
    25c2:	cd b7       	in	r28, 0x3d	; 61
    25c4:	de b7       	in	r29, 0x3e	; 62
	return adc_convert(3);
    25c6:	83 e0       	ldi	r24, 0x03	; 3
    25c8:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <adc_convert>
}
    25cc:	cf 91       	pop	r28
    25ce:	df 91       	pop	r29
    25d0:	08 95       	ret

000025d2 <rotate_right_901>:


void rotate_right_901()
{
    25d2:	df 93       	push	r29
    25d4:	cf 93       	push	r28
    25d6:	cd b7       	in	r28, 0x3d	; 61
    25d8:	de b7       	in	r29, 0x3e	; 62
    25da:	2e 97       	sbiw	r28, 0x0e	; 14
    25dc:	0f b6       	in	r0, 0x3f	; 63
    25de:	f8 94       	cli
    25e0:	de bf       	out	0x3e, r29	; 62
    25e2:	0f be       	out	0x3f, r0	; 63
    25e4:	cd bf       	out	0x3d, r28	; 61
	rot_right();
    25e6:	0e 94 90 12 	call	0x2520	; 0x2520 <rot_right>
	velocity(150, 150);
    25ea:	86 e9       	ldi	r24, 0x96	; 150
    25ec:	66 e9       	ldi	r22, 0x96	; 150
    25ee:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <velocity>
    25f2:	80 e0       	ldi	r24, 0x00	; 0
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	aa ef       	ldi	r26, 0xFA	; 250
    25f8:	b3 e4       	ldi	r27, 0x43	; 67
    25fa:	8b 87       	std	Y+11, r24	; 0x0b
    25fc:	9c 87       	std	Y+12, r25	; 0x0c
    25fe:	ad 87       	std	Y+13, r26	; 0x0d
    2600:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2602:	6b 85       	ldd	r22, Y+11	; 0x0b
    2604:	7c 85       	ldd	r23, Y+12	; 0x0c
    2606:	8d 85       	ldd	r24, Y+13	; 0x0d
    2608:	9e 85       	ldd	r25, Y+14	; 0x0e
    260a:	26 e6       	ldi	r18, 0x66	; 102
    260c:	36 e6       	ldi	r19, 0x66	; 102
    260e:	46 e6       	ldi	r20, 0x66	; 102
    2610:	55 e4       	ldi	r21, 0x45	; 69
    2612:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	8f 83       	std	Y+7, r24	; 0x07
    261c:	98 87       	std	Y+8, r25	; 0x08
    261e:	a9 87       	std	Y+9, r26	; 0x09
    2620:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2622:	6f 81       	ldd	r22, Y+7	; 0x07
    2624:	78 85       	ldd	r23, Y+8	; 0x08
    2626:	89 85       	ldd	r24, Y+9	; 0x09
    2628:	9a 85       	ldd	r25, Y+10	; 0x0a
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	40 e8       	ldi	r20, 0x80	; 128
    2630:	5f e3       	ldi	r21, 0x3F	; 63
    2632:	0e 94 68 22 	call	0x44d0	; 0x44d0 <__ltsf2>
    2636:	88 23       	and	r24, r24
    2638:	2c f4       	brge	.+10     	; 0x2644 <rotate_right_901+0x72>
		__ticks = 1;
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	9e 83       	std	Y+6, r25	; 0x06
    2640:	8d 83       	std	Y+5, r24	; 0x05
    2642:	3f c0       	rjmp	.+126    	; 0x26c2 <rotate_right_901+0xf0>
	else if (__tmp > 65535)
    2644:	6f 81       	ldd	r22, Y+7	; 0x07
    2646:	78 85       	ldd	r23, Y+8	; 0x08
    2648:	89 85       	ldd	r24, Y+9	; 0x09
    264a:	9a 85       	ldd	r25, Y+10	; 0x0a
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	3f ef       	ldi	r19, 0xFF	; 255
    2650:	4f e7       	ldi	r20, 0x7F	; 127
    2652:	57 e4       	ldi	r21, 0x47	; 71
    2654:	0e 94 08 22 	call	0x4410	; 0x4410 <__gtsf2>
    2658:	18 16       	cp	r1, r24
    265a:	4c f5       	brge	.+82     	; 0x26ae <rotate_right_901+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    265c:	6b 85       	ldd	r22, Y+11	; 0x0b
    265e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2660:	8d 85       	ldd	r24, Y+13	; 0x0d
    2662:	9e 85       	ldd	r25, Y+14	; 0x0e
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	40 e2       	ldi	r20, 0x20	; 32
    266a:	51 e4       	ldi	r21, 0x41	; 65
    266c:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
    2670:	dc 01       	movw	r26, r24
    2672:	cb 01       	movw	r24, r22
    2674:	bc 01       	movw	r22, r24
    2676:	cd 01       	movw	r24, r26
    2678:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	9e 83       	std	Y+6, r25	; 0x06
    2682:	8d 83       	std	Y+5, r24	; 0x05
    2684:	0f c0       	rjmp	.+30     	; 0x26a4 <rotate_right_901+0xd2>
    2686:	80 e7       	ldi	r24, 0x70	; 112
    2688:	91 e0       	ldi	r25, 0x01	; 1
    268a:	9c 83       	std	Y+4, r25	; 0x04
    268c:	8b 83       	std	Y+3, r24	; 0x03
    268e:	8b 81       	ldd	r24, Y+3	; 0x03
    2690:	9c 81       	ldd	r25, Y+4	; 0x04
    2692:	01 97       	sbiw	r24, 0x01	; 1
    2694:	f1 f7       	brne	.-4      	; 0x2692 <rotate_right_901+0xc0>
    2696:	9c 83       	std	Y+4, r25	; 0x04
    2698:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    269a:	8d 81       	ldd	r24, Y+5	; 0x05
    269c:	9e 81       	ldd	r25, Y+6	; 0x06
    269e:	01 97       	sbiw	r24, 0x01	; 1
    26a0:	9e 83       	std	Y+6, r25	; 0x06
    26a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a4:	8d 81       	ldd	r24, Y+5	; 0x05
    26a6:	9e 81       	ldd	r25, Y+6	; 0x06
    26a8:	00 97       	sbiw	r24, 0x00	; 0
    26aa:	69 f7       	brne	.-38     	; 0x2686 <rotate_right_901+0xb4>
    26ac:	14 c0       	rjmp	.+40     	; 0x26d6 <rotate_right_901+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ae:	6f 81       	ldd	r22, Y+7	; 0x07
    26b0:	78 85       	ldd	r23, Y+8	; 0x08
    26b2:	89 85       	ldd	r24, Y+9	; 0x09
    26b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26b6:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	9e 83       	std	Y+6, r25	; 0x06
    26c0:	8d 83       	std	Y+5, r24	; 0x05
    26c2:	8d 81       	ldd	r24, Y+5	; 0x05
    26c4:	9e 81       	ldd	r25, Y+6	; 0x06
    26c6:	9a 83       	std	Y+2, r25	; 0x02
    26c8:	89 83       	std	Y+1, r24	; 0x01
    26ca:	89 81       	ldd	r24, Y+1	; 0x01
    26cc:	9a 81       	ldd	r25, Y+2	; 0x02
    26ce:	01 97       	sbiw	r24, 0x01	; 1
    26d0:	f1 f7       	brne	.-4      	; 0x26ce <rotate_right_901+0xfc>
    26d2:	9a 83       	std	Y+2, r25	; 0x02
    26d4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	if(mid_wl()<40)
    26d6:	0e 94 d5 12 	call	0x25aa	; 0x25aa <mid_wl>
    26da:	88 32       	cpi	r24, 0x28	; 40
    26dc:	48 f4       	brcc	.+18     	; 0x26f0 <rotate_right_901+0x11e>
	{	while(mid_wl()<40);
    26de:	0e 94 d5 12 	call	0x25aa	; 0x25aa <mid_wl>
    26e2:	88 32       	cpi	r24, 0x28	; 40
    26e4:	e0 f3       	brcs	.-8      	; 0x26de <rotate_right_901+0x10c>
		while(mid_wl()>40);
    26e6:	0e 94 d5 12 	call	0x25aa	; 0x25aa <mid_wl>
    26ea:	89 32       	cpi	r24, 0x29	; 41
    26ec:	e0 f7       	brcc	.-8      	; 0x26e6 <rotate_right_901+0x114>
    26ee:	08 c0       	rjmp	.+16     	; 0x2700 <rotate_right_901+0x12e>
		}
	else if(mid_wl()>40)
    26f0:	0e 94 d5 12 	call	0x25aa	; 0x25aa <mid_wl>
    26f4:	89 32       	cpi	r24, 0x29	; 41
    26f6:	20 f0       	brcs	.+8      	; 0x2700 <rotate_right_901+0x12e>
		while(mid_wl()>40);
    26f8:	0e 94 d5 12 	call	0x25aa	; 0x25aa <mid_wl>
    26fc:	89 32       	cpi	r24, 0x29	; 41
    26fe:	e0 f7       	brcc	.-8      	; 0x26f8 <rotate_right_901+0x126>
	while((mid_wl() < 40) && (left_wl() < 40));
    2700:	0e 94 d5 12 	call	0x25aa	; 0x25aa <mid_wl>
    2704:	88 32       	cpi	r24, 0x28	; 40
    2706:	20 f4       	brcc	.+8      	; 0x2710 <rotate_right_901+0x13e>
    2708:	0e 94 cb 12 	call	0x2596	; 0x2596 <left_wl>
    270c:	88 32       	cpi	r24, 0x28	; 40
    270e:	c0 f3       	brcs	.-16     	; 0x2700 <rotate_right_901+0x12e>
	while(mid_wl()<40 && left_wl()>40);
    2710:	0e 94 d5 12 	call	0x25aa	; 0x25aa <mid_wl>
    2714:	88 32       	cpi	r24, 0x28	; 40
    2716:	20 f4       	brcc	.+8      	; 0x2720 <rotate_right_901+0x14e>
    2718:	0e 94 cb 12 	call	0x2596	; 0x2596 <left_wl>
    271c:	89 32       	cpi	r24, 0x29	; 41
    271e:	c0 f7       	brcc	.-16     	; 0x2710 <rotate_right_901+0x13e>
	stop();
    2720:	0e 94 72 12 	call	0x24e4	; 0x24e4 <stop>
	l = 1;
    2724:	81 e0       	ldi	r24, 0x01	; 1
    2726:	80 93 42 04 	sts	0x0442, r24
	r = 0;
    272a:	10 92 43 04 	sts	0x0443, r1
}
    272e:	2e 96       	adiw	r28, 0x0e	; 14
    2730:	0f b6       	in	r0, 0x3f	; 63
    2732:	f8 94       	cli
    2734:	de bf       	out	0x3e, r29	; 62
    2736:	0f be       	out	0x3f, r0	; 63
    2738:	cd bf       	out	0x3d, r28	; 61
    273a:	cf 91       	pop	r28
    273c:	df 91       	pop	r29
    273e:	08 95       	ret

00002740 <rotate_left_901>:
void rotate_left_901()
{
    2740:	df 93       	push	r29
    2742:	cf 93       	push	r28
    2744:	cd b7       	in	r28, 0x3d	; 61
    2746:	de b7       	in	r29, 0x3e	; 62
    2748:	2e 97       	sbiw	r28, 0x0e	; 14
    274a:	0f b6       	in	r0, 0x3f	; 63
    274c:	f8 94       	cli
    274e:	de bf       	out	0x3e, r29	; 62
    2750:	0f be       	out	0x3f, r0	; 63
    2752:	cd bf       	out	0x3d, r28	; 61
	rot_left();
    2754:	0e 94 86 12 	call	0x250c	; 0x250c <rot_left>
	velocity(150, 150);
    2758:	86 e9       	ldi	r24, 0x96	; 150
    275a:	66 e9       	ldi	r22, 0x96	; 150
    275c:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <velocity>
    2760:	80 e0       	ldi	r24, 0x00	; 0
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	aa ef       	ldi	r26, 0xFA	; 250
    2766:	b3 e4       	ldi	r27, 0x43	; 67
    2768:	8b 87       	std	Y+11, r24	; 0x0b
    276a:	9c 87       	std	Y+12, r25	; 0x0c
    276c:	ad 87       	std	Y+13, r26	; 0x0d
    276e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2770:	6b 85       	ldd	r22, Y+11	; 0x0b
    2772:	7c 85       	ldd	r23, Y+12	; 0x0c
    2774:	8d 85       	ldd	r24, Y+13	; 0x0d
    2776:	9e 85       	ldd	r25, Y+14	; 0x0e
    2778:	26 e6       	ldi	r18, 0x66	; 102
    277a:	36 e6       	ldi	r19, 0x66	; 102
    277c:	46 e6       	ldi	r20, 0x66	; 102
    277e:	55 e4       	ldi	r21, 0x45	; 69
    2780:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
    2784:	dc 01       	movw	r26, r24
    2786:	cb 01       	movw	r24, r22
    2788:	8f 83       	std	Y+7, r24	; 0x07
    278a:	98 87       	std	Y+8, r25	; 0x08
    278c:	a9 87       	std	Y+9, r26	; 0x09
    278e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2790:	6f 81       	ldd	r22, Y+7	; 0x07
    2792:	78 85       	ldd	r23, Y+8	; 0x08
    2794:	89 85       	ldd	r24, Y+9	; 0x09
    2796:	9a 85       	ldd	r25, Y+10	; 0x0a
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	40 e8       	ldi	r20, 0x80	; 128
    279e:	5f e3       	ldi	r21, 0x3F	; 63
    27a0:	0e 94 68 22 	call	0x44d0	; 0x44d0 <__ltsf2>
    27a4:	88 23       	and	r24, r24
    27a6:	2c f4       	brge	.+10     	; 0x27b2 <rotate_left_901+0x72>
		__ticks = 1;
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	9e 83       	std	Y+6, r25	; 0x06
    27ae:	8d 83       	std	Y+5, r24	; 0x05
    27b0:	3f c0       	rjmp	.+126    	; 0x2830 <rotate_left_901+0xf0>
	else if (__tmp > 65535)
    27b2:	6f 81       	ldd	r22, Y+7	; 0x07
    27b4:	78 85       	ldd	r23, Y+8	; 0x08
    27b6:	89 85       	ldd	r24, Y+9	; 0x09
    27b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	3f ef       	ldi	r19, 0xFF	; 255
    27be:	4f e7       	ldi	r20, 0x7F	; 127
    27c0:	57 e4       	ldi	r21, 0x47	; 71
    27c2:	0e 94 08 22 	call	0x4410	; 0x4410 <__gtsf2>
    27c6:	18 16       	cp	r1, r24
    27c8:	4c f5       	brge	.+82     	; 0x281c <rotate_left_901+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    27cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    27ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	40 e2       	ldi	r20, 0x20	; 32
    27d8:	51 e4       	ldi	r21, 0x41	; 65
    27da:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	bc 01       	movw	r22, r24
    27e4:	cd 01       	movw	r24, r26
    27e6:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	9e 83       	std	Y+6, r25	; 0x06
    27f0:	8d 83       	std	Y+5, r24	; 0x05
    27f2:	0f c0       	rjmp	.+30     	; 0x2812 <rotate_left_901+0xd2>
    27f4:	80 e7       	ldi	r24, 0x70	; 112
    27f6:	91 e0       	ldi	r25, 0x01	; 1
    27f8:	9c 83       	std	Y+4, r25	; 0x04
    27fa:	8b 83       	std	Y+3, r24	; 0x03
    27fc:	8b 81       	ldd	r24, Y+3	; 0x03
    27fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2800:	01 97       	sbiw	r24, 0x01	; 1
    2802:	f1 f7       	brne	.-4      	; 0x2800 <rotate_left_901+0xc0>
    2804:	9c 83       	std	Y+4, r25	; 0x04
    2806:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2808:	8d 81       	ldd	r24, Y+5	; 0x05
    280a:	9e 81       	ldd	r25, Y+6	; 0x06
    280c:	01 97       	sbiw	r24, 0x01	; 1
    280e:	9e 83       	std	Y+6, r25	; 0x06
    2810:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2812:	8d 81       	ldd	r24, Y+5	; 0x05
    2814:	9e 81       	ldd	r25, Y+6	; 0x06
    2816:	00 97       	sbiw	r24, 0x00	; 0
    2818:	69 f7       	brne	.-38     	; 0x27f4 <rotate_left_901+0xb4>
    281a:	14 c0       	rjmp	.+40     	; 0x2844 <rotate_left_901+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    281c:	6f 81       	ldd	r22, Y+7	; 0x07
    281e:	78 85       	ldd	r23, Y+8	; 0x08
    2820:	89 85       	ldd	r24, Y+9	; 0x09
    2822:	9a 85       	ldd	r25, Y+10	; 0x0a
    2824:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
    2828:	dc 01       	movw	r26, r24
    282a:	cb 01       	movw	r24, r22
    282c:	9e 83       	std	Y+6, r25	; 0x06
    282e:	8d 83       	std	Y+5, r24	; 0x05
    2830:	8d 81       	ldd	r24, Y+5	; 0x05
    2832:	9e 81       	ldd	r25, Y+6	; 0x06
    2834:	9a 83       	std	Y+2, r25	; 0x02
    2836:	89 83       	std	Y+1, r24	; 0x01
    2838:	89 81       	ldd	r24, Y+1	; 0x01
    283a:	9a 81       	ldd	r25, Y+2	; 0x02
    283c:	01 97       	sbiw	r24, 0x01	; 1
    283e:	f1 f7       	brne	.-4      	; 0x283c <rotate_left_901+0xfc>
    2840:	9a 83       	std	Y+2, r25	; 0x02
    2842:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	if(mid_wl()<40)
    2844:	0e 94 d5 12 	call	0x25aa	; 0x25aa <mid_wl>
    2848:	88 32       	cpi	r24, 0x28	; 40
    284a:	48 f4       	brcc	.+18     	; 0x285e <rotate_left_901+0x11e>
	{	while(mid_wl()<40);
    284c:	0e 94 d5 12 	call	0x25aa	; 0x25aa <mid_wl>
    2850:	88 32       	cpi	r24, 0x28	; 40
    2852:	e0 f3       	brcs	.-8      	; 0x284c <rotate_left_901+0x10c>
		while(mid_wl()>40);
    2854:	0e 94 d5 12 	call	0x25aa	; 0x25aa <mid_wl>
    2858:	89 32       	cpi	r24, 0x29	; 41
    285a:	e0 f7       	brcc	.-8      	; 0x2854 <rotate_left_901+0x114>
    285c:	08 c0       	rjmp	.+16     	; 0x286e <rotate_left_901+0x12e>
	}
	else if(mid_wl()>40)
    285e:	0e 94 d5 12 	call	0x25aa	; 0x25aa <mid_wl>
    2862:	89 32       	cpi	r24, 0x29	; 41
    2864:	20 f0       	brcs	.+8      	; 0x286e <rotate_left_901+0x12e>
		while(mid_wl()>40);
    2866:	0e 94 d5 12 	call	0x25aa	; 0x25aa <mid_wl>
    286a:	89 32       	cpi	r24, 0x29	; 41
    286c:	e0 f7       	brcc	.-8      	; 0x2866 <rotate_left_901+0x126>
	while((mid_wl() < 40) && (left_wl() < 40));
    286e:	0e 94 d5 12 	call	0x25aa	; 0x25aa <mid_wl>
    2872:	88 32       	cpi	r24, 0x28	; 40
    2874:	20 f4       	brcc	.+8      	; 0x287e <rotate_left_901+0x13e>
    2876:	0e 94 cb 12 	call	0x2596	; 0x2596 <left_wl>
    287a:	88 32       	cpi	r24, 0x28	; 40
    287c:	c0 f3       	brcs	.-16     	; 0x286e <rotate_left_901+0x12e>
	while(mid_wl()<40 && left_wl()>40);
    287e:	0e 94 d5 12 	call	0x25aa	; 0x25aa <mid_wl>
    2882:	88 32       	cpi	r24, 0x28	; 40
    2884:	20 f4       	brcc	.+8      	; 0x288e <rotate_left_901+0x14e>
    2886:	0e 94 cb 12 	call	0x2596	; 0x2596 <left_wl>
    288a:	89 32       	cpi	r24, 0x29	; 41
    288c:	c0 f7       	brcc	.-16     	; 0x287e <rotate_left_901+0x13e>
	stop();
    288e:	0e 94 72 12 	call	0x24e4	; 0x24e4 <stop>
	r = 1;
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	80 93 43 04 	sts	0x0443, r24
	l = 0;
    2898:	10 92 42 04 	sts	0x0442, r1
}
    289c:	2e 96       	adiw	r28, 0x0e	; 14
    289e:	0f b6       	in	r0, 0x3f	; 63
    28a0:	f8 94       	cli
    28a2:	de bf       	out	0x3e, r29	; 62
    28a4:	0f be       	out	0x3f, r0	; 63
    28a6:	cd bf       	out	0x3d, r28	; 61
    28a8:	cf 91       	pop	r28
    28aa:	df 91       	pop	r29
    28ac:	08 95       	ret

000028ae <rotate_right_90>:

void rotate_right_90()
{  rot_right();
    28ae:	df 93       	push	r29
    28b0:	cf 93       	push	r28
    28b2:	cd b7       	in	r28, 0x3d	; 61
    28b4:	de b7       	in	r29, 0x3e	; 62
    28b6:	60 97       	sbiw	r28, 0x10	; 16
    28b8:	0f b6       	in	r0, 0x3f	; 63
    28ba:	f8 94       	cli
    28bc:	de bf       	out	0x3e, r29	; 62
    28be:	0f be       	out	0x3f, r0	; 63
    28c0:	cd bf       	out	0x3d, r28	; 61
    28c2:	0e 94 90 12 	call	0x2520	; 0x2520 <rot_right>
	velocity(240, 240);
    28c6:	80 ef       	ldi	r24, 0xF0	; 240
    28c8:	60 ef       	ldi	r22, 0xF0	; 240
    28ca:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <velocity>
    28ce:	80 e0       	ldi	r24, 0x00	; 0
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	a6 e9       	ldi	r26, 0x96	; 150
    28d4:	b3 e4       	ldi	r27, 0x43	; 67
    28d6:	8b 87       	std	Y+11, r24	; 0x0b
    28d8:	9c 87       	std	Y+12, r25	; 0x0c
    28da:	ad 87       	std	Y+13, r26	; 0x0d
    28dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28de:	6b 85       	ldd	r22, Y+11	; 0x0b
    28e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    28e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    28e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    28e6:	26 e6       	ldi	r18, 0x66	; 102
    28e8:	36 e6       	ldi	r19, 0x66	; 102
    28ea:	46 e6       	ldi	r20, 0x66	; 102
    28ec:	55 e4       	ldi	r21, 0x45	; 69
    28ee:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
    28f2:	dc 01       	movw	r26, r24
    28f4:	cb 01       	movw	r24, r22
    28f6:	8f 83       	std	Y+7, r24	; 0x07
    28f8:	98 87       	std	Y+8, r25	; 0x08
    28fa:	a9 87       	std	Y+9, r26	; 0x09
    28fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2900:	78 85       	ldd	r23, Y+8	; 0x08
    2902:	89 85       	ldd	r24, Y+9	; 0x09
    2904:	9a 85       	ldd	r25, Y+10	; 0x0a
    2906:	20 e0       	ldi	r18, 0x00	; 0
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	40 e8       	ldi	r20, 0x80	; 128
    290c:	5f e3       	ldi	r21, 0x3F	; 63
    290e:	0e 94 68 22 	call	0x44d0	; 0x44d0 <__ltsf2>
    2912:	88 23       	and	r24, r24
    2914:	2c f4       	brge	.+10     	; 0x2920 <rotate_right_90+0x72>
		__ticks = 1;
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	9e 83       	std	Y+6, r25	; 0x06
    291c:	8d 83       	std	Y+5, r24	; 0x05
    291e:	3f c0       	rjmp	.+126    	; 0x299e <rotate_right_90+0xf0>
	else if (__tmp > 65535)
    2920:	6f 81       	ldd	r22, Y+7	; 0x07
    2922:	78 85       	ldd	r23, Y+8	; 0x08
    2924:	89 85       	ldd	r24, Y+9	; 0x09
    2926:	9a 85       	ldd	r25, Y+10	; 0x0a
    2928:	20 e0       	ldi	r18, 0x00	; 0
    292a:	3f ef       	ldi	r19, 0xFF	; 255
    292c:	4f e7       	ldi	r20, 0x7F	; 127
    292e:	57 e4       	ldi	r21, 0x47	; 71
    2930:	0e 94 08 22 	call	0x4410	; 0x4410 <__gtsf2>
    2934:	18 16       	cp	r1, r24
    2936:	4c f5       	brge	.+82     	; 0x298a <rotate_right_90+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2938:	6b 85       	ldd	r22, Y+11	; 0x0b
    293a:	7c 85       	ldd	r23, Y+12	; 0x0c
    293c:	8d 85       	ldd	r24, Y+13	; 0x0d
    293e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	40 e2       	ldi	r20, 0x20	; 32
    2946:	51 e4       	ldi	r21, 0x41	; 65
    2948:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	bc 01       	movw	r22, r24
    2952:	cd 01       	movw	r24, r26
    2954:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
    2958:	dc 01       	movw	r26, r24
    295a:	cb 01       	movw	r24, r22
    295c:	9e 83       	std	Y+6, r25	; 0x06
    295e:	8d 83       	std	Y+5, r24	; 0x05
    2960:	0f c0       	rjmp	.+30     	; 0x2980 <rotate_right_90+0xd2>
    2962:	80 e7       	ldi	r24, 0x70	; 112
    2964:	91 e0       	ldi	r25, 0x01	; 1
    2966:	9c 83       	std	Y+4, r25	; 0x04
    2968:	8b 83       	std	Y+3, r24	; 0x03
    296a:	8b 81       	ldd	r24, Y+3	; 0x03
    296c:	9c 81       	ldd	r25, Y+4	; 0x04
    296e:	01 97       	sbiw	r24, 0x01	; 1
    2970:	f1 f7       	brne	.-4      	; 0x296e <rotate_right_90+0xc0>
    2972:	9c 83       	std	Y+4, r25	; 0x04
    2974:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2976:	8d 81       	ldd	r24, Y+5	; 0x05
    2978:	9e 81       	ldd	r25, Y+6	; 0x06
    297a:	01 97       	sbiw	r24, 0x01	; 1
    297c:	9e 83       	std	Y+6, r25	; 0x06
    297e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2980:	8d 81       	ldd	r24, Y+5	; 0x05
    2982:	9e 81       	ldd	r25, Y+6	; 0x06
    2984:	00 97       	sbiw	r24, 0x00	; 0
    2986:	69 f7       	brne	.-38     	; 0x2962 <rotate_right_90+0xb4>
    2988:	14 c0       	rjmp	.+40     	; 0x29b2 <rotate_right_90+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    298a:	6f 81       	ldd	r22, Y+7	; 0x07
    298c:	78 85       	ldd	r23, Y+8	; 0x08
    298e:	89 85       	ldd	r24, Y+9	; 0x09
    2990:	9a 85       	ldd	r25, Y+10	; 0x0a
    2992:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
    2996:	dc 01       	movw	r26, r24
    2998:	cb 01       	movw	r24, r22
    299a:	9e 83       	std	Y+6, r25	; 0x06
    299c:	8d 83       	std	Y+5, r24	; 0x05
    299e:	8d 81       	ldd	r24, Y+5	; 0x05
    29a0:	9e 81       	ldd	r25, Y+6	; 0x06
    29a2:	9a 83       	std	Y+2, r25	; 0x02
    29a4:	89 83       	std	Y+1, r24	; 0x01
    29a6:	89 81       	ldd	r24, Y+1	; 0x01
    29a8:	9a 81       	ldd	r25, Y+2	; 0x02
    29aa:	01 97       	sbiw	r24, 0x01	; 1
    29ac:	f1 f7       	brne	.-4      	; 0x29aa <rotate_right_90+0xfc>
    29ae:	9a 83       	std	Y+2, r25	; 0x02
    29b0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);
 while(1)
   {
	
	if(mid_wl() < 40)
    29b2:	0e 94 d5 12 	call	0x25aa	; 0x25aa <mid_wl>
    29b6:	88 32       	cpi	r24, 0x28	; 40
    29b8:	38 f4       	brcc	.+14     	; 0x29c8 <rotate_right_90+0x11a>
    {
	rot_right();
    29ba:	0e 94 90 12 	call	0x2520	; 0x2520 <rot_right>
	velocity(240, 240);
    29be:	80 ef       	ldi	r24, 0xF0	; 240
    29c0:	60 ef       	ldi	r22, 0xF0	; 240
    29c2:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <velocity>
    29c6:	22 c0       	rjmp	.+68     	; 0x2a0c <rotate_right_90+0x15e>
	
	}
	else if((mid_wl() > 20)|(left_wl()>20))
    29c8:	0e 94 d5 12 	call	0x25aa	; 0x25aa <mid_wl>
    29cc:	18 8a       	std	Y+16, r1	; 0x10
    29ce:	85 31       	cpi	r24, 0x15	; 21
    29d0:	10 f0       	brcs	.+4      	; 0x29d6 <rotate_right_90+0x128>
    29d2:	81 e0       	ldi	r24, 0x01	; 1
    29d4:	88 8b       	std	Y+16, r24	; 0x10
    29d6:	0e 94 cb 12 	call	0x2596	; 0x2596 <left_wl>
    29da:	1f 86       	std	Y+15, r1	; 0x0f
    29dc:	85 31       	cpi	r24, 0x15	; 21
    29de:	10 f0       	brcs	.+4      	; 0x29e4 <rotate_right_90+0x136>
    29e0:	91 e0       	ldi	r25, 0x01	; 1
    29e2:	9f 87       	std	Y+15, r25	; 0x0f
    29e4:	88 89       	ldd	r24, Y+16	; 0x10
    29e6:	9f 85       	ldd	r25, Y+15	; 0x0f
    29e8:	89 2b       	or	r24, r25
    29ea:	88 23       	and	r24, r24
    29ec:	79 f0       	breq	.+30     	; 0x2a0c <rotate_right_90+0x15e>
	{
	stop();
    29ee:	0e 94 72 12 	call	0x24e4	; 0x24e4 <stop>
	buzzer_on(100);
    29f2:	84 e6       	ldi	r24, 0x64	; 100
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	0e 94 86 11 	call	0x230c	; 0x230c <buzzer_on>
	break;
	}
	l = 1;
	r = 0;
	}
}
    29fa:	60 96       	adiw	r28, 0x10	; 16
    29fc:	0f b6       	in	r0, 0x3f	; 63
    29fe:	f8 94       	cli
    2a00:	de bf       	out	0x3e, r29	; 62
    2a02:	0f be       	out	0x3f, r0	; 63
    2a04:	cd bf       	out	0x3d, r28	; 61
    2a06:	cf 91       	pop	r28
    2a08:	df 91       	pop	r29
    2a0a:	08 95       	ret
	{
	stop();
	buzzer_on(100);
	break;
	}
	l = 1;
    2a0c:	81 e0       	ldi	r24, 0x01	; 1
    2a0e:	80 93 42 04 	sts	0x0442, r24
	r = 0;
    2a12:	10 92 43 04 	sts	0x0443, r1
    2a16:	cd cf       	rjmp	.-102    	; 0x29b2 <rotate_right_90+0x104>

00002a18 <rotate_left_90>:
	}
}

void rotate_left_90()
{	rot_left();
    2a18:	df 93       	push	r29
    2a1a:	cf 93       	push	r28
    2a1c:	cd b7       	in	r28, 0x3d	; 61
    2a1e:	de b7       	in	r29, 0x3e	; 62
    2a20:	2e 97       	sbiw	r28, 0x0e	; 14
    2a22:	0f b6       	in	r0, 0x3f	; 63
    2a24:	f8 94       	cli
    2a26:	de bf       	out	0x3e, r29	; 62
    2a28:	0f be       	out	0x3f, r0	; 63
    2a2a:	cd bf       	out	0x3d, r28	; 61
    2a2c:	0e 94 86 12 	call	0x250c	; 0x250c <rot_left>
	velocity(240, 240);
    2a30:	80 ef       	ldi	r24, 0xF0	; 240
    2a32:	60 ef       	ldi	r22, 0xF0	; 240
    2a34:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <velocity>
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	a6 e9       	ldi	r26, 0x96	; 150
    2a3e:	b3 e4       	ldi	r27, 0x43	; 67
    2a40:	8b 87       	std	Y+11, r24	; 0x0b
    2a42:	9c 87       	std	Y+12, r25	; 0x0c
    2a44:	ad 87       	std	Y+13, r26	; 0x0d
    2a46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a48:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a50:	26 e6       	ldi	r18, 0x66	; 102
    2a52:	36 e6       	ldi	r19, 0x66	; 102
    2a54:	46 e6       	ldi	r20, 0x66	; 102
    2a56:	55 e4       	ldi	r21, 0x45	; 69
    2a58:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	cb 01       	movw	r24, r22
    2a60:	8f 83       	std	Y+7, r24	; 0x07
    2a62:	98 87       	std	Y+8, r25	; 0x08
    2a64:	a9 87       	std	Y+9, r26	; 0x09
    2a66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a68:	6f 81       	ldd	r22, Y+7	; 0x07
    2a6a:	78 85       	ldd	r23, Y+8	; 0x08
    2a6c:	89 85       	ldd	r24, Y+9	; 0x09
    2a6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a70:	20 e0       	ldi	r18, 0x00	; 0
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	40 e8       	ldi	r20, 0x80	; 128
    2a76:	5f e3       	ldi	r21, 0x3F	; 63
    2a78:	0e 94 68 22 	call	0x44d0	; 0x44d0 <__ltsf2>
    2a7c:	88 23       	and	r24, r24
    2a7e:	2c f4       	brge	.+10     	; 0x2a8a <rotate_left_90+0x72>
		__ticks = 1;
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	9e 83       	std	Y+6, r25	; 0x06
    2a86:	8d 83       	std	Y+5, r24	; 0x05
    2a88:	3f c0       	rjmp	.+126    	; 0x2b08 <rotate_left_90+0xf0>
	else if (__tmp > 65535)
    2a8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a8c:	78 85       	ldd	r23, Y+8	; 0x08
    2a8e:	89 85       	ldd	r24, Y+9	; 0x09
    2a90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	3f ef       	ldi	r19, 0xFF	; 255
    2a96:	4f e7       	ldi	r20, 0x7F	; 127
    2a98:	57 e4       	ldi	r21, 0x47	; 71
    2a9a:	0e 94 08 22 	call	0x4410	; 0x4410 <__gtsf2>
    2a9e:	18 16       	cp	r1, r24
    2aa0:	4c f5       	brge	.+82     	; 0x2af4 <rotate_left_90+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aa4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aa6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aa8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	40 e2       	ldi	r20, 0x20	; 32
    2ab0:	51 e4       	ldi	r21, 0x41	; 65
    2ab2:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	bc 01       	movw	r22, r24
    2abc:	cd 01       	movw	r24, r26
    2abe:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	9e 83       	std	Y+6, r25	; 0x06
    2ac8:	8d 83       	std	Y+5, r24	; 0x05
    2aca:	0f c0       	rjmp	.+30     	; 0x2aea <rotate_left_90+0xd2>
    2acc:	80 e7       	ldi	r24, 0x70	; 112
    2ace:	91 e0       	ldi	r25, 0x01	; 1
    2ad0:	9c 83       	std	Y+4, r25	; 0x04
    2ad2:	8b 83       	std	Y+3, r24	; 0x03
    2ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad8:	01 97       	sbiw	r24, 0x01	; 1
    2ada:	f1 f7       	brne	.-4      	; 0x2ad8 <rotate_left_90+0xc0>
    2adc:	9c 83       	std	Y+4, r25	; 0x04
    2ade:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ae0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae4:	01 97       	sbiw	r24, 0x01	; 1
    2ae6:	9e 83       	std	Y+6, r25	; 0x06
    2ae8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aea:	8d 81       	ldd	r24, Y+5	; 0x05
    2aec:	9e 81       	ldd	r25, Y+6	; 0x06
    2aee:	00 97       	sbiw	r24, 0x00	; 0
    2af0:	69 f7       	brne	.-38     	; 0x2acc <rotate_left_90+0xb4>
    2af2:	14 c0       	rjmp	.+40     	; 0x2b1c <rotate_left_90+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af4:	6f 81       	ldd	r22, Y+7	; 0x07
    2af6:	78 85       	ldd	r23, Y+8	; 0x08
    2af8:	89 85       	ldd	r24, Y+9	; 0x09
    2afa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2afc:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
    2b00:	dc 01       	movw	r26, r24
    2b02:	cb 01       	movw	r24, r22
    2b04:	9e 83       	std	Y+6, r25	; 0x06
    2b06:	8d 83       	std	Y+5, r24	; 0x05
    2b08:	8d 81       	ldd	r24, Y+5	; 0x05
    2b0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b0c:	9a 83       	std	Y+2, r25	; 0x02
    2b0e:	89 83       	std	Y+1, r24	; 0x01
    2b10:	89 81       	ldd	r24, Y+1	; 0x01
    2b12:	9a 81       	ldd	r25, Y+2	; 0x02
    2b14:	01 97       	sbiw	r24, 0x01	; 1
    2b16:	f1 f7       	brne	.-4      	; 0x2b14 <rotate_left_90+0xfc>
    2b18:	9a 83       	std	Y+2, r25	; 0x02
    2b1a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300); 
	while(1)
	   {
		   
			if(mid_wl()  <40)
    2b1c:	0e 94 d5 12 	call	0x25aa	; 0x25aa <mid_wl>
    2b20:	88 32       	cpi	r24, 0x28	; 40
    2b22:	38 f4       	brcc	.+14     	; 0x2b32 <rotate_left_90+0x11a>
		    {
				rot_left();
    2b24:	0e 94 86 12 	call	0x250c	; 0x250c <rot_left>
				velocity(240, 240);
    2b28:	80 ef       	ldi	r24, 0xF0	; 240
    2b2a:	60 ef       	ldi	r22, 0xF0	; 240
    2b2c:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <velocity>
    2b30:	0f c0       	rjmp	.+30     	; 0x2b50 <rotate_left_90+0x138>
			}
		    else if((mid_wl()>40))
    2b32:	0e 94 d5 12 	call	0x25aa	; 0x25aa <mid_wl>
    2b36:	89 32       	cpi	r24, 0x29	; 41
    2b38:	58 f0       	brcs	.+22     	; 0x2b50 <rotate_left_90+0x138>
			{
				stop();
    2b3a:	0e 94 72 12 	call	0x24e4	; 0x24e4 <stop>
				break;
			}
			r = 1;
			l = 0;
		}
}
    2b3e:	2e 96       	adiw	r28, 0x0e	; 14
    2b40:	0f b6       	in	r0, 0x3f	; 63
    2b42:	f8 94       	cli
    2b44:	de bf       	out	0x3e, r29	; 62
    2b46:	0f be       	out	0x3f, r0	; 63
    2b48:	cd bf       	out	0x3d, r28	; 61
    2b4a:	cf 91       	pop	r28
    2b4c:	df 91       	pop	r29
    2b4e:	08 95       	ret
			{
				stop();
			
				break;
			}
			r = 1;
    2b50:	81 e0       	ldi	r24, 0x01	; 1
    2b52:	80 93 43 04 	sts	0x0443, r24
			l = 0;
    2b56:	10 92 42 04 	sts	0x0442, r1
    2b5a:	e0 cf       	rjmp	.-64     	; 0x2b1c <rotate_left_90+0x104>

00002b5c <uart0_init>:
// desired baud rate:9600
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
    2b5c:	df 93       	push	r29
    2b5e:	cf 93       	push	r28
    2b60:	cd b7       	in	r28, 0x3d	; 61
    2b62:	de b7       	in	r29, 0x3e	; 62
 UCSR0B = 0x00; //disable while setting baud rate
    2b64:	e1 ec       	ldi	r30, 0xC1	; 193
    2b66:	f0 e0       	ldi	r31, 0x00	; 0
    2b68:	10 82       	st	Z, r1
 UCSR0A = 0x00;
    2b6a:	e0 ec       	ldi	r30, 0xC0	; 192
    2b6c:	f0 e0       	ldi	r31, 0x00	; 0
    2b6e:	10 82       	st	Z, r1
 UCSR0C = 0x06;
    2b70:	e2 ec       	ldi	r30, 0xC2	; 194
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	86 e0       	ldi	r24, 0x06	; 6
    2b76:	80 83       	st	Z, r24
 UBRR0L = 0x5F; //set baud rate lo
    2b78:	e4 ec       	ldi	r30, 0xC4	; 196
    2b7a:	f0 e0       	ldi	r31, 0x00	; 0
    2b7c:	8f e5       	ldi	r24, 0x5F	; 95
    2b7e:	80 83       	st	Z, r24
 UBRR0H = 0x00; //set baud rate hi
    2b80:	e5 ec       	ldi	r30, 0xC5	; 197
    2b82:	f0 e0       	ldi	r31, 0x00	; 0
    2b84:	10 82       	st	Z, r1
 UCSR0B = 0x98;
    2b86:	e1 ec       	ldi	r30, 0xC1	; 193
    2b88:	f0 e0       	ldi	r31, 0x00	; 0
    2b8a:	88 e9       	ldi	r24, 0x98	; 152
    2b8c:	80 83       	st	Z, r24
}
    2b8e:	cf 91       	pop	r28
    2b90:	df 91       	pop	r29
    2b92:	08 95       	ret

00002b94 <transmitByte>:


void transmitByte(uint8_t data) {
    2b94:	df 93       	push	r29
    2b96:	cf 93       	push	r28
    2b98:	0f 92       	push	r0
    2b9a:	cd b7       	in	r28, 0x3d	; 61
    2b9c:	de b7       	in	r29, 0x3e	; 62
    2b9e:	89 83       	std	Y+1, r24	; 0x01
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
    2ba0:	e0 ec       	ldi	r30, 0xC0	; 192
    2ba2:	f0 e0       	ldi	r31, 0x00	; 0
    2ba4:	80 81       	ld	r24, Z
    2ba6:	88 2f       	mov	r24, r24
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	80 72       	andi	r24, 0x20	; 32
    2bac:	90 70       	andi	r25, 0x00	; 0
    2bae:	00 97       	sbiw	r24, 0x00	; 0
    2bb0:	b9 f3       	breq	.-18     	; 0x2ba0 <transmitByte+0xc>
  UDR0 = data;                                            /* send data */
    2bb2:	e6 ec       	ldi	r30, 0xC6	; 198
    2bb4:	f0 e0       	ldi	r31, 0x00	; 0
    2bb6:	89 81       	ldd	r24, Y+1	; 0x01
    2bb8:	80 83       	st	Z, r24
}
    2bba:	0f 90       	pop	r0
    2bbc:	cf 91       	pop	r28
    2bbe:	df 91       	pop	r29
    2bc0:	08 95       	ret

00002bc2 <__vector_25>:



SIGNAL(SIG_USART0_RECV) 		// ISR for receive complete interrupt
{
    2bc2:	1f 92       	push	r1
    2bc4:	0f 92       	push	r0
    2bc6:	0f b6       	in	r0, 0x3f	; 63
    2bc8:	0f 92       	push	r0
    2bca:	00 90 5b 00 	lds	r0, 0x005B
    2bce:	0f 92       	push	r0
    2bd0:	11 24       	eor	r1, r1
    2bd2:	2f 93       	push	r18
    2bd4:	3f 93       	push	r19
    2bd6:	4f 93       	push	r20
    2bd8:	5f 93       	push	r21
    2bda:	6f 93       	push	r22
    2bdc:	7f 93       	push	r23
    2bde:	8f 93       	push	r24
    2be0:	9f 93       	push	r25
    2be2:	af 93       	push	r26
    2be4:	bf 93       	push	r27
    2be6:	ef 93       	push	r30
    2be8:	ff 93       	push	r31
    2bea:	df 93       	push	r29
    2bec:	cf 93       	push	r28
    2bee:	cd b7       	in	r28, 0x3d	; 61
    2bf0:	de b7       	in	r29, 0x3e	; 62
	data = UDR0; 				//making copy of data from UDR0 in 'data' variable 
    2bf2:	e6 ec       	ldi	r30, 0xC6	; 198
    2bf4:	f0 e0       	ldi	r31, 0x00	; 0
    2bf6:	80 81       	ld	r24, Z
    2bf8:	80 93 55 04 	sts	0x0455, r24

	UDR0 = data; 				//echo data back to PC
    2bfc:	e6 ec       	ldi	r30, 0xC6	; 198
    2bfe:	f0 e0       	ldi	r31, 0x00	; 0
    2c00:	80 91 55 04 	lds	r24, 0x0455
    2c04:	80 83       	st	Z, r24

		if(data == 0x38 && flag==0) //ASCII value of 8
    2c06:	80 91 55 04 	lds	r24, 0x0455
    2c0a:	88 33       	cpi	r24, 0x38	; 56
    2c0c:	51 f4       	brne	.+20     	; 0x2c22 <__vector_25+0x60>
    2c0e:	80 91 00 02 	lds	r24, 0x0200
    2c12:	90 91 01 02 	lds	r25, 0x0201
    2c16:	00 97       	sbiw	r24, 0x00	; 0
    2c18:	21 f4       	brne	.+8      	; 0x2c22 <__vector_25+0x60>
		{
			PORTA=0x06;  //forward
    2c1a:	e2 e2       	ldi	r30, 0x22	; 34
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	86 e0       	ldi	r24, 0x06	; 6
    2c20:	80 83       	st	Z, r24
		}

		if(data == 0x32 && flag==0) //ASCII value of 2
    2c22:	80 91 55 04 	lds	r24, 0x0455
    2c26:	82 33       	cpi	r24, 0x32	; 50
    2c28:	51 f4       	brne	.+20     	; 0x2c3e <__vector_25+0x7c>
    2c2a:	80 91 00 02 	lds	r24, 0x0200
    2c2e:	90 91 01 02 	lds	r25, 0x0201
    2c32:	00 97       	sbiw	r24, 0x00	; 0
    2c34:	21 f4       	brne	.+8      	; 0x2c3e <__vector_25+0x7c>
		{
			PORTA=0x09; //back
    2c36:	e2 e2       	ldi	r30, 0x22	; 34
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	89 e0       	ldi	r24, 0x09	; 9
    2c3c:	80 83       	st	Z, r24
		}

		if(data == 0x34 && flag==0) //ASCII value of 4
    2c3e:	80 91 55 04 	lds	r24, 0x0455
    2c42:	84 33       	cpi	r24, 0x34	; 52
    2c44:	51 f4       	brne	.+20     	; 0x2c5a <__vector_25+0x98>
    2c46:	80 91 00 02 	lds	r24, 0x0200
    2c4a:	90 91 01 02 	lds	r25, 0x0201
    2c4e:	00 97       	sbiw	r24, 0x00	; 0
    2c50:	21 f4       	brne	.+8      	; 0x2c5a <__vector_25+0x98>
		{
			PORTA=0x05;  //left
    2c52:	e2 e2       	ldi	r30, 0x22	; 34
    2c54:	f0 e0       	ldi	r31, 0x00	; 0
    2c56:	85 e0       	ldi	r24, 0x05	; 5
    2c58:	80 83       	st	Z, r24
		}

		if(data == 0x36 && flag==0) //ASCII value of 6
    2c5a:	80 91 55 04 	lds	r24, 0x0455
    2c5e:	86 33       	cpi	r24, 0x36	; 54
    2c60:	51 f4       	brne	.+20     	; 0x2c76 <__vector_25+0xb4>
    2c62:	80 91 00 02 	lds	r24, 0x0200
    2c66:	90 91 01 02 	lds	r25, 0x0201
    2c6a:	00 97       	sbiw	r24, 0x00	; 0
    2c6c:	21 f4       	brne	.+8      	; 0x2c76 <__vector_25+0xb4>
		{
			PORTA=0x0A; //right
    2c6e:	e2 e2       	ldi	r30, 0x22	; 34
    2c70:	f0 e0       	ldi	r31, 0x00	; 0
    2c72:	8a e0       	ldi	r24, 0x0A	; 10
    2c74:	80 83       	st	Z, r24
		}

		if(data == 0x35 && flag==0) //ASCII value of 5
    2c76:	80 91 55 04 	lds	r24, 0x0455
    2c7a:	85 33       	cpi	r24, 0x35	; 53
    2c7c:	49 f4       	brne	.+18     	; 0x2c90 <__vector_25+0xce>
    2c7e:	80 91 00 02 	lds	r24, 0x0200
    2c82:	90 91 01 02 	lds	r25, 0x0201
    2c86:	00 97       	sbiw	r24, 0x00	; 0
    2c88:	19 f4       	brne	.+6      	; 0x2c90 <__vector_25+0xce>
		{
			PORTA=0x00; //stop
    2c8a:	e2 e2       	ldi	r30, 0x22	; 34
    2c8c:	f0 e0       	ldi	r31, 0x00	; 0
    2c8e:	10 82       	st	Z, r1
		}

		if(data == 0x37 && flag==0) //ASCII value of 7
    2c90:	80 91 55 04 	lds	r24, 0x0455
    2c94:	87 33       	cpi	r24, 0x37	; 55
    2c96:	51 f4       	brne	.+20     	; 0x2cac <__vector_25+0xea>
    2c98:	80 91 00 02 	lds	r24, 0x0200
    2c9c:	90 91 01 02 	lds	r25, 0x0201
    2ca0:	00 97       	sbiw	r24, 0x00	; 0
    2ca2:	21 f4       	brne	.+8      	; 0x2cac <__vector_25+0xea>
		{
			buzzer_on(5000);
    2ca4:	88 e8       	ldi	r24, 0x88	; 136
    2ca6:	93 e1       	ldi	r25, 0x13	; 19
    2ca8:	0e 94 86 11 	call	0x230c	; 0x230c <buzzer_on>
		}

		if(data == 0x39 && flag==0) //ASCII value of 9
    2cac:	80 91 55 04 	lds	r24, 0x0455
    2cb0:	89 33       	cpi	r24, 0x39	; 57
    2cb2:	41 f4       	brne	.+16     	; 0x2cc4 <__vector_25+0x102>
    2cb4:	80 91 00 02 	lds	r24, 0x0200
    2cb8:	90 91 01 02 	lds	r25, 0x0201
    2cbc:	00 97       	sbiw	r24, 0x00	; 0
    2cbe:	11 f4       	brne	.+4      	; 0x2cc4 <__vector_25+0x102>
		{
			buzzer_off();
    2cc0:	0e 94 78 11 	call	0x22f0	; 0x22f0 <buzzer_off>
		}
		if(data == 0x41 && flag==0) //ASCII value of A to hand he control back
    2cc4:	80 91 55 04 	lds	r24, 0x0455
    2cc8:	81 34       	cpi	r24, 0x41	; 65
    2cca:	61 f4       	brne	.+24     	; 0x2ce4 <__vector_25+0x122>
    2ccc:	80 91 00 02 	lds	r24, 0x0200
    2cd0:	90 91 01 02 	lds	r25, 0x0201
    2cd4:	00 97       	sbiw	r24, 0x00	; 0
    2cd6:	31 f4       	brne	.+12     	; 0x2ce4 <__vector_25+0x122>
		{
			flag=1;
    2cd8:	81 e0       	ldi	r24, 0x01	; 1
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	90 93 01 02 	sts	0x0201, r25
    2ce0:	80 93 00 02 	sts	0x0200, r24
		}
		if(data == 0x44 && flag==0) //ASCII value to to drop the cone, D
    2ce4:	80 91 55 04 	lds	r24, 0x0455
    2ce8:	84 34       	cpi	r24, 0x44	; 68
    2cea:	61 f4       	brne	.+24     	; 0x2d04 <__vector_25+0x142>
    2cec:	80 91 00 02 	lds	r24, 0x0200
    2cf0:	90 91 01 02 	lds	r25, 0x0201
    2cf4:	00 97       	sbiw	r24, 0x00	; 0
    2cf6:	31 f4       	brne	.+12     	; 0x2d04 <__vector_25+0x142>
		{
			buzzer_ON();
    2cf8:	0e 94 27 12 	call	0x244e	; 0x244e <buzzer_ON>
			drop_cone();
    2cfc:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <drop_cone>
			buzzer_off();
    2d00:	0e 94 78 11 	call	0x22f0	; 0x22f0 <buzzer_off>
		// if(data == 0x52 && flag==0) //ASCII value slow right, R
		// {
		// 	rot_right();
		// 	velocity(150,150);
		// }
		if(data == 0x53 && flag==0) //ASCII value slow , S
    2d04:	80 91 55 04 	lds	r24, 0x0455
    2d08:	83 35       	cpi	r24, 0x53	; 83
    2d0a:	51 f4       	brne	.+20     	; 0x2d20 <__vector_25+0x15e>
    2d0c:	80 91 00 02 	lds	r24, 0x0200
    2d10:	90 91 01 02 	lds	r25, 0x0201
    2d14:	00 97       	sbiw	r24, 0x00	; 0
    2d16:	21 f4       	brne	.+8      	; 0x2d20 <__vector_25+0x15e>
		{
			velocity(150,150);
    2d18:	86 e9       	ldi	r24, 0x96	; 150
    2d1a:	66 e9       	ldi	r22, 0x96	; 150
    2d1c:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <velocity>
		}
		if(data == 0x46 && flag==0) //ASCII value F fast
    2d20:	80 91 55 04 	lds	r24, 0x0455
    2d24:	86 34       	cpi	r24, 0x46	; 70
    2d26:	51 f4       	brne	.+20     	; 0x2d3c <__vector_25+0x17a>
    2d28:	80 91 00 02 	lds	r24, 0x0200
    2d2c:	90 91 01 02 	lds	r25, 0x0201
    2d30:	00 97       	sbiw	r24, 0x00	; 0
    2d32:	21 f4       	brne	.+8      	; 0x2d3c <__vector_25+0x17a>
		{
			velocity(200,200);
    2d34:	88 ec       	ldi	r24, 0xC8	; 200
    2d36:	68 ec       	ldi	r22, 0xC8	; 200
    2d38:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <velocity>
		}
		if(data == 0x47 && flag==0) //ASCII value superfast
    2d3c:	80 91 55 04 	lds	r24, 0x0455
    2d40:	87 34       	cpi	r24, 0x47	; 71
    2d42:	51 f4       	brne	.+20     	; 0x2d58 <__vector_25+0x196>
    2d44:	80 91 00 02 	lds	r24, 0x0200
    2d48:	90 91 01 02 	lds	r25, 0x0201
    2d4c:	00 97       	sbiw	r24, 0x00	; 0
    2d4e:	21 f4       	brne	.+8      	; 0x2d58 <__vector_25+0x196>
		{
			velocity(255,255);
    2d50:	8f ef       	ldi	r24, 0xFF	; 255
    2d52:	6f ef       	ldi	r22, 0xFF	; 255
    2d54:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <velocity>
		}
		

}
    2d58:	cf 91       	pop	r28
    2d5a:	df 91       	pop	r29
    2d5c:	ff 91       	pop	r31
    2d5e:	ef 91       	pop	r30
    2d60:	bf 91       	pop	r27
    2d62:	af 91       	pop	r26
    2d64:	9f 91       	pop	r25
    2d66:	8f 91       	pop	r24
    2d68:	7f 91       	pop	r23
    2d6a:	6f 91       	pop	r22
    2d6c:	5f 91       	pop	r21
    2d6e:	4f 91       	pop	r20
    2d70:	3f 91       	pop	r19
    2d72:	2f 91       	pop	r18
    2d74:	0f 90       	pop	r0
    2d76:	00 92 5b 00 	sts	0x005B, r0
    2d7a:	0f 90       	pop	r0
    2d7c:	0f be       	out	0x3f, r0	; 63
    2d7e:	0f 90       	pop	r0
    2d80:	1f 90       	pop	r1
    2d82:	18 95       	reti

00002d84 <init_xbee>:


//Function To Initialize all The Devices
void init_xbee()
{
    2d84:	df 93       	push	r29
    2d86:	cf 93       	push	r28
    2d88:	cd b7       	in	r28, 0x3d	; 61
    2d8a:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupts
    2d8c:	f8 94       	cli
 //port_init();  //Initializes all the ports
 uart0_init(); //Initailize UART1 for serial communiaction
    2d8e:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <uart0_init>
 sei();   //Enables the global interrupts
    2d92:	78 94       	sei
}
    2d94:	cf 91       	pop	r28
    2d96:	df 91       	pop	r29
    2d98:	08 95       	ret

00002d9a <main>:

//Main Function
int main(void)
{
    2d9a:	df 93       	push	r29
    2d9c:	cf 93       	push	r28
    2d9e:	00 d0       	rcall	.+0      	; 0x2da0 <main+0x6>
    2da0:	0f 92       	push	r0
    2da2:	cd b7       	in	r28, 0x3d	; 61
    2da4:	de b7       	in	r29, 0x3e	; 62
	int i,loop;
	cur_node=base_station;
    2da6:	80 91 04 02 	lds	r24, 0x0204
    2daa:	90 91 05 02 	lds	r25, 0x0205
    2dae:	90 93 5b 04 	sts	0x045B, r25
    2db2:	80 93 5a 04 	sts	0x045A, r24
	actionlist=action_space;	
    2db6:	80 e7       	ldi	r24, 0x70	; 112
    2db8:	93 e0       	ldi	r25, 0x03	; 3
    2dba:	90 93 4b 04 	sts	0x044B, r25
    2dbe:	80 93 4a 04 	sts	0x044A, r24
	
	//printf("bridge_node=");
	//scanf("%d",&dispatch_point);
	init_devices();
    2dc2:	0e 94 2c 11 	call	0x2258	; 0x2258 <init_devices>

	if(dispatch_point==10)
    2dc6:	80 91 02 02 	lds	r24, 0x0202
    2dca:	90 91 03 02 	lds	r25, 0x0203
    2dce:	8a 30       	cpi	r24, 0x0A	; 10
    2dd0:	91 05       	cpc	r25, r1
    2dd2:	29 f4       	brne	.+10     	; 0x2dde <main+0x44>
	{
		loop=2;
    2dd4:	82 e0       	ldi	r24, 0x02	; 2
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	9a 83       	std	Y+2, r25	; 0x02
    2dda:	89 83       	std	Y+1, r24	; 0x01
    2ddc:	0b c0       	rjmp	.+22     	; 0x2df4 <main+0x5a>
		/*printf("node1=");
		scanf("%d",&node1);
		printf("node2=");
		scanf("%d",&node2);*/
	}
	else if(dispatch_point==11)
    2dde:	80 91 02 02 	lds	r24, 0x0202
    2de2:	90 91 03 02 	lds	r25, 0x0203
    2de6:	8b 30       	cpi	r24, 0x0B	; 11
    2de8:	91 05       	cpc	r25, r1
    2dea:	21 f4       	brne	.+8      	; 0x2df4 <main+0x5a>
	{
		loop=4;
    2dec:	84 e0       	ldi	r24, 0x04	; 4
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	9a 83       	std	Y+2, r25	; 0x02
    2df2:	89 83       	std	Y+1, r24	; 0x01
		scanf("%d",&node3);
		printf("node4=");
		scanf("%d",&node4);*/
	}

	if(loop==2)
    2df4:	89 81       	ldd	r24, Y+1	; 0x01
    2df6:	9a 81       	ldd	r25, Y+2	; 0x02
    2df8:	82 30       	cpi	r24, 0x02	; 2
    2dfa:	91 05       	cpc	r25, r1
    2dfc:	99 f5       	brne	.+102    	; 0x2e64 <main+0xca>
	{
		store=fetch_storepoint();
    2dfe:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <fetch_storepoint>
    2e02:	90 93 4f 04 	sts	0x044F, r25
    2e06:	80 93 4e 04 	sts	0x044E, r24
		next_node=store;
    2e0a:	80 91 4e 04 	lds	r24, 0x044E
    2e0e:	90 91 4f 04 	lds	r25, 0x044F
    2e12:	90 93 47 04 	sts	0x0447, r25
    2e16:	80 93 46 04 	sts	0x0446, r24
		findactionspace(cur_node,next_node);
    2e1a:	80 91 5a 04 	lds	r24, 0x045A
    2e1e:	90 91 5b 04 	lds	r25, 0x045B
    2e22:	20 91 46 04 	lds	r18, 0x0446
    2e26:	30 91 47 04 	lds	r19, 0x0447
    2e2a:	b9 01       	movw	r22, r18
    2e2c:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <findactionspace>
		store=fetch_storepoint();
    2e30:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <fetch_storepoint>
    2e34:	90 93 4f 04 	sts	0x044F, r25
    2e38:	80 93 4e 04 	sts	0x044E, r24
		next_node=store;
    2e3c:	80 91 4e 04 	lds	r24, 0x044E
    2e40:	90 91 4f 04 	lds	r25, 0x044F
    2e44:	90 93 47 04 	sts	0x0447, r25
    2e48:	80 93 46 04 	sts	0x0446, r24
		findactionspace(cur_node,next_node);
    2e4c:	80 91 5a 04 	lds	r24, 0x045A
    2e50:	90 91 5b 04 	lds	r25, 0x045B
    2e54:	20 91 46 04 	lds	r18, 0x0446
    2e58:	30 91 47 04 	lds	r19, 0x0447
    2e5c:	b9 01       	movw	r22, r18
    2e5e:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <findactionspace>
    2e62:	2b c0       	rjmp	.+86     	; 0x2eba <main+0x120>
	}
	else if(loop==4)
    2e64:	89 81       	ldd	r24, Y+1	; 0x01
    2e66:	9a 81       	ldd	r25, Y+2	; 0x02
    2e68:	84 30       	cpi	r24, 0x04	; 4
    2e6a:	91 05       	cpc	r25, r1
    2e6c:	31 f5       	brne	.+76     	; 0x2eba <main+0x120>
	{
		for(i=0;i<4;i++)
    2e6e:	1c 82       	std	Y+4, r1	; 0x04
    2e70:	1b 82       	std	Y+3, r1	; 0x03
    2e72:	1e c0       	rjmp	.+60     	; 0x2eb0 <main+0x116>
		{
			store=fetch_storepoint();
    2e74:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <fetch_storepoint>
    2e78:	90 93 4f 04 	sts	0x044F, r25
    2e7c:	80 93 4e 04 	sts	0x044E, r24
			next_node=store;
    2e80:	80 91 4e 04 	lds	r24, 0x044E
    2e84:	90 91 4f 04 	lds	r25, 0x044F
    2e88:	90 93 47 04 	sts	0x0447, r25
    2e8c:	80 93 46 04 	sts	0x0446, r24
			findactionspace(cur_node,next_node);
    2e90:	80 91 5a 04 	lds	r24, 0x045A
    2e94:	90 91 5b 04 	lds	r25, 0x045B
    2e98:	20 91 46 04 	lds	r18, 0x0446
    2e9c:	30 91 47 04 	lds	r19, 0x0447
    2ea0:	b9 01       	movw	r22, r18
    2ea2:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <findactionspace>
		next_node=store;
		findactionspace(cur_node,next_node);
	}
	else if(loop==4)
	{
		for(i=0;i<4;i++)
    2ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea8:	9c 81       	ldd	r25, Y+4	; 0x04
    2eaa:	01 96       	adiw	r24, 0x01	; 1
    2eac:	9c 83       	std	Y+4, r25	; 0x04
    2eae:	8b 83       	std	Y+3, r24	; 0x03
    2eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    2eb4:	84 30       	cpi	r24, 0x04	; 4
    2eb6:	91 05       	cpc	r25, r1
    2eb8:	ec f2       	brlt	.-70     	; 0x2e74 <main+0xda>
			store=fetch_storepoint();
			next_node=store;
			findactionspace(cur_node,next_node);
		}
	}		
	action_space[action_counter]=7;
    2eba:	80 91 6e 03 	lds	r24, 0x036E
    2ebe:	90 91 6f 03 	lds	r25, 0x036F
    2ec2:	88 0f       	add	r24, r24
    2ec4:	99 1f       	adc	r25, r25
    2ec6:	fc 01       	movw	r30, r24
    2ec8:	e0 59       	subi	r30, 0x90	; 144
    2eca:	fc 4f       	sbci	r31, 0xFC	; 252
    2ecc:	87 e0       	ldi	r24, 0x07	; 7
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	91 83       	std	Z+1, r25	; 0x01
    2ed2:	80 83       	st	Z, r24
	//	flag=0;
	//while(1);
	display_actions(actionlist);
    2ed4:	80 91 4a 04 	lds	r24, 0x044A
    2ed8:	90 91 4b 04 	lds	r25, 0x044B
    2edc:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <display_actions>
    2ee0:	80 e0       	ldi	r24, 0x00	; 0
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
	
}
    2ee4:	0f 90       	pop	r0
    2ee6:	0f 90       	pop	r0
    2ee8:	0f 90       	pop	r0
    2eea:	0f 90       	pop	r0
    2eec:	cf 91       	pop	r28
    2eee:	df 91       	pop	r29
    2ef0:	08 95       	ret

00002ef2 <fetch_storepoint>:

int fetch_storepoint()
{
    2ef2:	df 93       	push	r29
    2ef4:	cf 93       	push	r28
    2ef6:	00 d0       	rcall	.+0      	; 0x2ef8 <fetch_storepoint+0x6>
    2ef8:	0f 92       	push	r0
    2efa:	cd b7       	in	r28, 0x3d	; 61
    2efc:	de b7       	in	r29, 0x3e	; 62
	if(temp_switch==0)
    2efe:	80 91 38 04 	lds	r24, 0x0438
    2f02:	90 91 39 04 	lds	r25, 0x0439
    2f06:	00 97       	sbiw	r24, 0x00	; 0
    2f08:	59 f4       	brne	.+22     	; 0x2f20 <fetch_storepoint+0x2e>
	{
		temp_switch=1;		
    2f0a:	81 e0       	ldi	r24, 0x01	; 1
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	90 93 39 04 	sts	0x0439, r25
    2f12:	80 93 38 04 	sts	0x0438, r24
		return 4;//node1;
    2f16:	84 e0       	ldi	r24, 0x04	; 4
    2f18:	90 e0       	ldi	r25, 0x00	; 0
    2f1a:	9a 83       	std	Y+2, r25	; 0x02
    2f1c:	89 83       	std	Y+1, r24	; 0x01
    2f1e:	37 c0       	rjmp	.+110    	; 0x2f8e <fetch_storepoint+0x9c>
	}
	else if(temp_switch==1)
    2f20:	80 91 38 04 	lds	r24, 0x0438
    2f24:	90 91 39 04 	lds	r25, 0x0439
    2f28:	81 30       	cpi	r24, 0x01	; 1
    2f2a:	91 05       	cpc	r25, r1
    2f2c:	59 f4       	brne	.+22     	; 0x2f44 <fetch_storepoint+0x52>
	{
		temp_switch=2;
    2f2e:	82 e0       	ldi	r24, 0x02	; 2
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	90 93 39 04 	sts	0x0439, r25
    2f36:	80 93 38 04 	sts	0x0438, r24
		return 3;//node2;
    2f3a:	83 e0       	ldi	r24, 0x03	; 3
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	9a 83       	std	Y+2, r25	; 0x02
    2f40:	89 83       	std	Y+1, r24	; 0x01
    2f42:	25 c0       	rjmp	.+74     	; 0x2f8e <fetch_storepoint+0x9c>
	}	
	else if(temp_switch==2)
    2f44:	80 91 38 04 	lds	r24, 0x0438
    2f48:	90 91 39 04 	lds	r25, 0x0439
    2f4c:	82 30       	cpi	r24, 0x02	; 2
    2f4e:	91 05       	cpc	r25, r1
    2f50:	59 f4       	brne	.+22     	; 0x2f68 <fetch_storepoint+0x76>
	{
		temp_switch=3;
    2f52:	83 e0       	ldi	r24, 0x03	; 3
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	90 93 39 04 	sts	0x0439, r25
    2f5a:	80 93 38 04 	sts	0x0438, r24
		return 6;//node3;
    2f5e:	86 e0       	ldi	r24, 0x06	; 6
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	9a 83       	std	Y+2, r25	; 0x02
    2f64:	89 83       	std	Y+1, r24	; 0x01
    2f66:	13 c0       	rjmp	.+38     	; 0x2f8e <fetch_storepoint+0x9c>
	}
	else if(temp_switch==3)
    2f68:	80 91 38 04 	lds	r24, 0x0438
    2f6c:	90 91 39 04 	lds	r25, 0x0439
    2f70:	83 30       	cpi	r24, 0x03	; 3
    2f72:	91 05       	cpc	r25, r1
    2f74:	59 f4       	brne	.+22     	; 0x2f8c <fetch_storepoint+0x9a>
	{
		temp_switch=4;
    2f76:	84 e0       	ldi	r24, 0x04	; 4
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	90 93 39 04 	sts	0x0439, r25
    2f7e:	80 93 38 04 	sts	0x0438, r24
		return 1;//node4;
    2f82:	81 e0       	ldi	r24, 0x01	; 1
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	9a 83       	std	Y+2, r25	; 0x02
    2f88:	89 83       	std	Y+1, r24	; 0x01
    2f8a:	01 c0       	rjmp	.+2      	; 0x2f8e <fetch_storepoint+0x9c>
    2f8c:	04 c0       	rjmp	.+8      	; 0x2f96 <fetch_storepoint+0xa4>
	}
}
    2f8e:	89 81       	ldd	r24, Y+1	; 0x01
    2f90:	9a 81       	ldd	r25, Y+2	; 0x02
    2f92:	9c 83       	std	Y+4, r25	; 0x04
    2f94:	8b 83       	std	Y+3, r24	; 0x03
    2f96:	8b 81       	ldd	r24, Y+3	; 0x03
    2f98:	9c 81       	ldd	r25, Y+4	; 0x04
    2f9a:	0f 90       	pop	r0
    2f9c:	0f 90       	pop	r0
    2f9e:	0f 90       	pop	r0
    2fa0:	0f 90       	pop	r0
    2fa2:	cf 91       	pop	r28
    2fa4:	df 91       	pop	r29
    2fa6:	08 95       	ret

00002fa8 <display_actions>:

void display_actions(int actionlist[])
{
    2fa8:	df 93       	push	r29
    2faa:	cf 93       	push	r28
    2fac:	cd b7       	in	r28, 0x3d	; 61
    2fae:	de b7       	in	r29, 0x3e	; 62
    2fb0:	68 97       	sbiw	r28, 0x18	; 24
    2fb2:	0f b6       	in	r0, 0x3f	; 63
    2fb4:	f8 94       	cli
    2fb6:	de bf       	out	0x3e, r29	; 62
    2fb8:	0f be       	out	0x3f, r0	; 63
    2fba:	cd bf       	out	0x3d, r28	; 61
    2fbc:	9a 8b       	std	Y+18, r25	; 0x12
    2fbe:	89 8b       	std	Y+17, r24	; 0x11
	int i;
	//printf("move fwd\n");
	lcd_wr_command(0x01);
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	0e 94 3f 06 	call	0xc7e	; 0xc7e <lcd_wr_command>
	lcd_string("move fwd");
    2fc6:	86 e0       	ldi	r24, 0x06	; 6
    2fc8:	92 e0       	ldi	r25, 0x02	; 2
    2fca:	0e 94 fd 08 	call	0x11fa	; 0x11fa <lcd_string>
	follow_path();
    2fce:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <follow_path>
	
	for(i=0; actionlist[i+1] !=7 ;i++)
    2fd2:	18 8a       	std	Y+16, r1	; 0x10
    2fd4:	1f 86       	std	Y+15, r1	; 0x0f
    2fd6:	58 c2       	rjmp	.+1200   	; 0x3488 <display_actions+0x4e0>
	{
		//printf("actionlist_value=%d\n",actionlist[i]);
		if(actionlist[i+1]==5)
    2fd8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fda:	98 89       	ldd	r25, Y+16	; 0x10
    2fdc:	01 96       	adiw	r24, 0x01	; 1
    2fde:	9c 01       	movw	r18, r24
    2fe0:	22 0f       	add	r18, r18
    2fe2:	33 1f       	adc	r19, r19
    2fe4:	89 89       	ldd	r24, Y+17	; 0x11
    2fe6:	9a 89       	ldd	r25, Y+18	; 0x12
    2fe8:	fc 01       	movw	r30, r24
    2fea:	e2 0f       	add	r30, r18
    2fec:	f3 1f       	adc	r31, r19
    2fee:	80 81       	ld	r24, Z
    2ff0:	91 81       	ldd	r25, Z+1	; 0x01
    2ff2:	85 30       	cpi	r24, 0x05	; 5
    2ff4:	91 05       	cpc	r25, r1
    2ff6:	81 f5       	brne	.+96     	; 0x3058 <display_actions+0xb0>
		{
			//printf("stopped\n");
			stop();
    2ff8:	0e 94 72 12 	call	0x24e4	; 0x24e4 <stop>
			
			//printf("***PICK NUMBER **\n");
			lcd_wr_command(0x01);
    2ffc:	81 e0       	ldi	r24, 0x01	; 1
    2ffe:	0e 94 3f 06 	call	0xc7e	; 0xc7e <lcd_wr_command>
			lcd_string("picking number");
    3002:	8f e0       	ldi	r24, 0x0F	; 15
    3004:	92 e0       	ldi	r25, 0x02	; 2
    3006:	0e 94 fd 08 	call	0x11fa	; 0x11fa <lcd_string>
			distance_mm('b',80);
    300a:	82 e6       	ldi	r24, 0x62	; 98
    300c:	60 e5       	ldi	r22, 0x50	; 80
    300e:	70 e0       	ldi	r23, 0x00	; 0
    3010:	0e 94 a3 10 	call	0x2146	; 0x2146 <distance_mm>
			pick_up_cone();
    3014:	0e 94 bf 0b 	call	0x177e	; 0x177e <pick_up_cone>
			distance_mm('f',80);
    3018:	86 e6       	ldi	r24, 0x66	; 102
    301a:	60 e5       	ldi	r22, 0x50	; 80
    301c:	70 e0       	ldi	r23, 0x00	; 0
    301e:	0e 94 a3 10 	call	0x2146	; 0x2146 <distance_mm>
			actionlist[i+1]=actionlist[i];
    3022:	8f 85       	ldd	r24, Y+15	; 0x0f
    3024:	98 89       	ldd	r25, Y+16	; 0x10
    3026:	01 96       	adiw	r24, 0x01	; 1
    3028:	9c 01       	movw	r18, r24
    302a:	22 0f       	add	r18, r18
    302c:	33 1f       	adc	r19, r19
    302e:	89 89       	ldd	r24, Y+17	; 0x11
    3030:	9a 89       	ldd	r25, Y+18	; 0x12
    3032:	dc 01       	movw	r26, r24
    3034:	a2 0f       	add	r26, r18
    3036:	b3 1f       	adc	r27, r19
    3038:	8f 85       	ldd	r24, Y+15	; 0x0f
    303a:	98 89       	ldd	r25, Y+16	; 0x10
    303c:	9c 01       	movw	r18, r24
    303e:	22 0f       	add	r18, r18
    3040:	33 1f       	adc	r19, r19
    3042:	89 89       	ldd	r24, Y+17	; 0x11
    3044:	9a 89       	ldd	r25, Y+18	; 0x12
    3046:	fc 01       	movw	r30, r24
    3048:	e2 0f       	add	r30, r18
    304a:	f3 1f       	adc	r31, r19
    304c:	80 81       	ld	r24, Z
    304e:	91 81       	ldd	r25, Z+1	; 0x01
    3050:	11 96       	adiw	r26, 0x01	; 1
    3052:	9c 93       	st	X, r25
    3054:	8e 93       	st	-X, r24
    3056:	13 c2       	rjmp	.+1062   	; 0x347e <display_actions+0x4d6>
		}
		else if(actionlist[i+1]==6)//for handling control back to bot
    3058:	8f 85       	ldd	r24, Y+15	; 0x0f
    305a:	98 89       	ldd	r25, Y+16	; 0x10
    305c:	01 96       	adiw	r24, 0x01	; 1
    305e:	9c 01       	movw	r18, r24
    3060:	22 0f       	add	r18, r18
    3062:	33 1f       	adc	r19, r19
    3064:	89 89       	ldd	r24, Y+17	; 0x11
    3066:	9a 89       	ldd	r25, Y+18	; 0x12
    3068:	fc 01       	movw	r30, r24
    306a:	e2 0f       	add	r30, r18
    306c:	f3 1f       	adc	r31, r19
    306e:	80 81       	ld	r24, Z
    3070:	91 81       	ldd	r25, Z+1	; 0x01
    3072:	86 30       	cpi	r24, 0x06	; 6
    3074:	91 05       	cpc	r25, r1
    3076:	a9 f5       	brne	.+106    	; 0x30e2 <display_actions+0x13a>
		{
			//printf("stopped\n");
			stop();
    3078:	0e 94 72 12 	call	0x24e4	; 0x24e4 <stop>

			//printf("***HANDLING CONTROL TO PC **\n");
			lcd_wr_command(0x01);
    307c:	81 e0       	ldi	r24, 0x01	; 1
    307e:	0e 94 3f 06 	call	0xc7e	; 0xc7e <lcd_wr_command>
			lcd_string("handling control to pc");
    3082:	8e e1       	ldi	r24, 0x1E	; 30
    3084:	92 e0       	ldi	r25, 0x02	; 2
    3086:	0e 94 fd 08 	call	0x11fa	; 0x11fa <lcd_string>
			transmitByte('I');
    308a:	89 e4       	ldi	r24, 0x49	; 73
    308c:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <transmitByte>
			flag=0;
    3090:	10 92 01 02 	sts	0x0201, r1
    3094:	10 92 00 02 	sts	0x0200, r1
			buzzer_ON();
    3098:	0e 94 27 12 	call	0x244e	; 0x244e <buzzer_ON>
			while(flag==0);
    309c:	80 91 00 02 	lds	r24, 0x0200
    30a0:	90 91 01 02 	lds	r25, 0x0201
    30a4:	00 97       	sbiw	r24, 0x00	; 0
    30a6:	d1 f3       	breq	.-12     	; 0x309c <display_actions+0xf4>
			//drop_cone();
			buzzer_off();
    30a8:	0e 94 78 11 	call	0x22f0	; 0x22f0 <buzzer_off>
			actionlist[i+1]=actionlist[i];
    30ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    30ae:	98 89       	ldd	r25, Y+16	; 0x10
    30b0:	01 96       	adiw	r24, 0x01	; 1
    30b2:	9c 01       	movw	r18, r24
    30b4:	22 0f       	add	r18, r18
    30b6:	33 1f       	adc	r19, r19
    30b8:	89 89       	ldd	r24, Y+17	; 0x11
    30ba:	9a 89       	ldd	r25, Y+18	; 0x12
    30bc:	dc 01       	movw	r26, r24
    30be:	a2 0f       	add	r26, r18
    30c0:	b3 1f       	adc	r27, r19
    30c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    30c4:	98 89       	ldd	r25, Y+16	; 0x10
    30c6:	9c 01       	movw	r18, r24
    30c8:	22 0f       	add	r18, r18
    30ca:	33 1f       	adc	r19, r19
    30cc:	89 89       	ldd	r24, Y+17	; 0x11
    30ce:	9a 89       	ldd	r25, Y+18	; 0x12
    30d0:	fc 01       	movw	r30, r24
    30d2:	e2 0f       	add	r30, r18
    30d4:	f3 1f       	adc	r31, r19
    30d6:	80 81       	ld	r24, Z
    30d8:	91 81       	ldd	r25, Z+1	; 0x01
    30da:	11 96       	adiw	r26, 0x01	; 1
    30dc:	9c 93       	st	X, r25
    30de:	8e 93       	st	-X, r24
    30e0:	ce c1       	rjmp	.+924    	; 0x347e <display_actions+0x4d6>
		}
		else
		{
			if(abs(actionlist[i]-actionlist[i+1]) ==0)
    30e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    30e4:	98 89       	ldd	r25, Y+16	; 0x10
    30e6:	9c 01       	movw	r18, r24
    30e8:	22 0f       	add	r18, r18
    30ea:	33 1f       	adc	r19, r19
    30ec:	89 89       	ldd	r24, Y+17	; 0x11
    30ee:	9a 89       	ldd	r25, Y+18	; 0x12
    30f0:	fc 01       	movw	r30, r24
    30f2:	e2 0f       	add	r30, r18
    30f4:	f3 1f       	adc	r31, r19
    30f6:	40 81       	ld	r20, Z
    30f8:	51 81       	ldd	r21, Z+1	; 0x01
    30fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    30fc:	98 89       	ldd	r25, Y+16	; 0x10
    30fe:	01 96       	adiw	r24, 0x01	; 1
    3100:	9c 01       	movw	r18, r24
    3102:	22 0f       	add	r18, r18
    3104:	33 1f       	adc	r19, r19
    3106:	89 89       	ldd	r24, Y+17	; 0x11
    3108:	9a 89       	ldd	r25, Y+18	; 0x12
    310a:	fc 01       	movw	r30, r24
    310c:	e2 0f       	add	r30, r18
    310e:	f3 1f       	adc	r31, r19
    3110:	80 81       	ld	r24, Z
    3112:	91 81       	ldd	r25, Z+1	; 0x01
    3114:	48 17       	cp	r20, r24
    3116:	59 07       	cpc	r21, r25
    3118:	09 f0       	breq	.+2      	; 0x311c <display_actions+0x174>
    311a:	83 c0       	rjmp	.+262    	; 0x3222 <display_actions+0x27a>
			{
			
				//printf("no change in direction\n");
				lcd_wr_command(0x01);
    311c:	81 e0       	ldi	r24, 0x01	; 1
    311e:	0e 94 3f 06 	call	0xc7e	; 0xc7e <lcd_wr_command>
				lcd_string("no change in direction");
    3122:	85 e3       	ldi	r24, 0x35	; 53
    3124:	92 e0       	ldi	r25, 0x02	; 2
    3126:	0e 94 fd 08 	call	0x11fa	; 0x11fa <lcd_string>
    312a:	80 e0       	ldi	r24, 0x00	; 0
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	aa e7       	ldi	r26, 0x7A	; 122
    3130:	b4 e4       	ldi	r27, 0x44	; 68
    3132:	8b 87       	std	Y+11, r24	; 0x0b
    3134:	9c 87       	std	Y+12, r25	; 0x0c
    3136:	ad 87       	std	Y+13, r26	; 0x0d
    3138:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    313a:	6b 85       	ldd	r22, Y+11	; 0x0b
    313c:	7c 85       	ldd	r23, Y+12	; 0x0c
    313e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3140:	9e 85       	ldd	r25, Y+14	; 0x0e
    3142:	26 e6       	ldi	r18, 0x66	; 102
    3144:	36 e6       	ldi	r19, 0x66	; 102
    3146:	46 e6       	ldi	r20, 0x66	; 102
    3148:	55 e4       	ldi	r21, 0x45	; 69
    314a:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
    314e:	dc 01       	movw	r26, r24
    3150:	cb 01       	movw	r24, r22
    3152:	8f 83       	std	Y+7, r24	; 0x07
    3154:	98 87       	std	Y+8, r25	; 0x08
    3156:	a9 87       	std	Y+9, r26	; 0x09
    3158:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    315a:	6f 81       	ldd	r22, Y+7	; 0x07
    315c:	78 85       	ldd	r23, Y+8	; 0x08
    315e:	89 85       	ldd	r24, Y+9	; 0x09
    3160:	9a 85       	ldd	r25, Y+10	; 0x0a
    3162:	20 e0       	ldi	r18, 0x00	; 0
    3164:	30 e0       	ldi	r19, 0x00	; 0
    3166:	40 e8       	ldi	r20, 0x80	; 128
    3168:	5f e3       	ldi	r21, 0x3F	; 63
    316a:	0e 94 68 22 	call	0x44d0	; 0x44d0 <__ltsf2>
    316e:	88 23       	and	r24, r24
    3170:	2c f4       	brge	.+10     	; 0x317c <display_actions+0x1d4>
		__ticks = 1;
    3172:	81 e0       	ldi	r24, 0x01	; 1
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	9e 83       	std	Y+6, r25	; 0x06
    3178:	8d 83       	std	Y+5, r24	; 0x05
    317a:	3f c0       	rjmp	.+126    	; 0x31fa <display_actions+0x252>
	else if (__tmp > 65535)
    317c:	6f 81       	ldd	r22, Y+7	; 0x07
    317e:	78 85       	ldd	r23, Y+8	; 0x08
    3180:	89 85       	ldd	r24, Y+9	; 0x09
    3182:	9a 85       	ldd	r25, Y+10	; 0x0a
    3184:	20 e0       	ldi	r18, 0x00	; 0
    3186:	3f ef       	ldi	r19, 0xFF	; 255
    3188:	4f e7       	ldi	r20, 0x7F	; 127
    318a:	57 e4       	ldi	r21, 0x47	; 71
    318c:	0e 94 08 22 	call	0x4410	; 0x4410 <__gtsf2>
    3190:	18 16       	cp	r1, r24
    3192:	4c f5       	brge	.+82     	; 0x31e6 <display_actions+0x23e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3194:	6b 85       	ldd	r22, Y+11	; 0x0b
    3196:	7c 85       	ldd	r23, Y+12	; 0x0c
    3198:	8d 85       	ldd	r24, Y+13	; 0x0d
    319a:	9e 85       	ldd	r25, Y+14	; 0x0e
    319c:	20 e0       	ldi	r18, 0x00	; 0
    319e:	30 e0       	ldi	r19, 0x00	; 0
    31a0:	40 e2       	ldi	r20, 0x20	; 32
    31a2:	51 e4       	ldi	r21, 0x41	; 65
    31a4:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__mulsf3>
    31a8:	dc 01       	movw	r26, r24
    31aa:	cb 01       	movw	r24, r22
    31ac:	bc 01       	movw	r22, r24
    31ae:	cd 01       	movw	r24, r26
    31b0:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
    31b4:	dc 01       	movw	r26, r24
    31b6:	cb 01       	movw	r24, r22
    31b8:	9e 83       	std	Y+6, r25	; 0x06
    31ba:	8d 83       	std	Y+5, r24	; 0x05
    31bc:	0f c0       	rjmp	.+30     	; 0x31dc <display_actions+0x234>
    31be:	80 e7       	ldi	r24, 0x70	; 112
    31c0:	91 e0       	ldi	r25, 0x01	; 1
    31c2:	9c 83       	std	Y+4, r25	; 0x04
    31c4:	8b 83       	std	Y+3, r24	; 0x03
    31c6:	8b 81       	ldd	r24, Y+3	; 0x03
    31c8:	9c 81       	ldd	r25, Y+4	; 0x04
    31ca:	01 97       	sbiw	r24, 0x01	; 1
    31cc:	f1 f7       	brne	.-4      	; 0x31ca <display_actions+0x222>
    31ce:	9c 83       	std	Y+4, r25	; 0x04
    31d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31d2:	8d 81       	ldd	r24, Y+5	; 0x05
    31d4:	9e 81       	ldd	r25, Y+6	; 0x06
    31d6:	01 97       	sbiw	r24, 0x01	; 1
    31d8:	9e 83       	std	Y+6, r25	; 0x06
    31da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31dc:	8d 81       	ldd	r24, Y+5	; 0x05
    31de:	9e 81       	ldd	r25, Y+6	; 0x06
    31e0:	00 97       	sbiw	r24, 0x00	; 0
    31e2:	69 f7       	brne	.-38     	; 0x31be <display_actions+0x216>
    31e4:	14 c0       	rjmp	.+40     	; 0x320e <display_actions+0x266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31e6:	6f 81       	ldd	r22, Y+7	; 0x07
    31e8:	78 85       	ldd	r23, Y+8	; 0x08
    31ea:	89 85       	ldd	r24, Y+9	; 0x09
    31ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ee:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixunssfsi>
    31f2:	dc 01       	movw	r26, r24
    31f4:	cb 01       	movw	r24, r22
    31f6:	9e 83       	std	Y+6, r25	; 0x06
    31f8:	8d 83       	std	Y+5, r24	; 0x05
    31fa:	8d 81       	ldd	r24, Y+5	; 0x05
    31fc:	9e 81       	ldd	r25, Y+6	; 0x06
    31fe:	9a 83       	std	Y+2, r25	; 0x02
    3200:	89 83       	std	Y+1, r24	; 0x01
    3202:	89 81       	ldd	r24, Y+1	; 0x01
    3204:	9a 81       	ldd	r25, Y+2	; 0x02
    3206:	01 97       	sbiw	r24, 0x01	; 1
    3208:	f1 f7       	brne	.-4      	; 0x3206 <display_actions+0x25e>
    320a:	9a 83       	std	Y+2, r25	; 0x02
    320c:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1000);
			
	
				//printf("move fwd\n");
				lcd_wr_command(0x01);
    320e:	81 e0       	ldi	r24, 0x01	; 1
    3210:	0e 94 3f 06 	call	0xc7e	; 0xc7e <lcd_wr_command>
				lcd_string("move fwd");
    3214:	86 e0       	ldi	r24, 0x06	; 6
    3216:	92 e0       	ldi	r25, 0x02	; 2
    3218:	0e 94 fd 08 	call	0x11fa	; 0x11fa <lcd_string>
				follow_path();
    321c:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <follow_path>
    3220:	2e c1       	rjmp	.+604    	; 0x347e <display_actions+0x4d6>
			

			}

			else if (abs(actionlist[i]-actionlist[i+1]) ==1)
    3222:	8f 85       	ldd	r24, Y+15	; 0x0f
    3224:	98 89       	ldd	r25, Y+16	; 0x10
    3226:	9c 01       	movw	r18, r24
    3228:	22 0f       	add	r18, r18
    322a:	33 1f       	adc	r19, r19
    322c:	89 89       	ldd	r24, Y+17	; 0x11
    322e:	9a 89       	ldd	r25, Y+18	; 0x12
    3230:	fc 01       	movw	r30, r24
    3232:	e2 0f       	add	r30, r18
    3234:	f3 1f       	adc	r31, r19
    3236:	40 81       	ld	r20, Z
    3238:	51 81       	ldd	r21, Z+1	; 0x01
    323a:	8f 85       	ldd	r24, Y+15	; 0x0f
    323c:	98 89       	ldd	r25, Y+16	; 0x10
    323e:	01 96       	adiw	r24, 0x01	; 1
    3240:	9c 01       	movw	r18, r24
    3242:	22 0f       	add	r18, r18
    3244:	33 1f       	adc	r19, r19
    3246:	89 89       	ldd	r24, Y+17	; 0x11
    3248:	9a 89       	ldd	r25, Y+18	; 0x12
    324a:	fc 01       	movw	r30, r24
    324c:	e2 0f       	add	r30, r18
    324e:	f3 1f       	adc	r31, r19
    3250:	80 81       	ld	r24, Z
    3252:	91 81       	ldd	r25, Z+1	; 0x01
    3254:	9a 01       	movw	r18, r20
    3256:	28 1b       	sub	r18, r24
    3258:	39 0b       	sbc	r19, r25
    325a:	c9 01       	movw	r24, r18
    325c:	98 8f       	std	Y+24, r25	; 0x18
    325e:	8f 8b       	std	Y+23, r24	; 0x17
    3260:	8f 89       	ldd	r24, Y+23	; 0x17
    3262:	98 8d       	ldd	r25, Y+24	; 0x18
    3264:	99 23       	and	r25, r25
    3266:	3c f4       	brge	.+14     	; 0x3276 <display_actions+0x2ce>
    3268:	2f 89       	ldd	r18, Y+23	; 0x17
    326a:	38 8d       	ldd	r19, Y+24	; 0x18
    326c:	30 95       	com	r19
    326e:	21 95       	neg	r18
    3270:	3f 4f       	sbci	r19, 0xFF	; 255
    3272:	38 8f       	std	Y+24, r19	; 0x18
    3274:	2f 8b       	std	Y+23, r18	; 0x17
    3276:	8f 89       	ldd	r24, Y+23	; 0x17
    3278:	98 8d       	ldd	r25, Y+24	; 0x18
    327a:	81 30       	cpi	r24, 0x01	; 1
    327c:	91 05       	cpc	r25, r1
    327e:	09 f0       	breq	.+2      	; 0x3282 <display_actions+0x2da>
    3280:	42 c0       	rjmp	.+132    	; 0x3306 <display_actions+0x35e>
			{
			
				if(actionlist[i]<actionlist[i+1])
    3282:	8f 85       	ldd	r24, Y+15	; 0x0f
    3284:	98 89       	ldd	r25, Y+16	; 0x10
    3286:	9c 01       	movw	r18, r24
    3288:	22 0f       	add	r18, r18
    328a:	33 1f       	adc	r19, r19
    328c:	89 89       	ldd	r24, Y+17	; 0x11
    328e:	9a 89       	ldd	r25, Y+18	; 0x12
    3290:	fc 01       	movw	r30, r24
    3292:	e2 0f       	add	r30, r18
    3294:	f3 1f       	adc	r31, r19
    3296:	40 81       	ld	r20, Z
    3298:	51 81       	ldd	r21, Z+1	; 0x01
    329a:	8f 85       	ldd	r24, Y+15	; 0x0f
    329c:	98 89       	ldd	r25, Y+16	; 0x10
    329e:	01 96       	adiw	r24, 0x01	; 1
    32a0:	9c 01       	movw	r18, r24
    32a2:	22 0f       	add	r18, r18
    32a4:	33 1f       	adc	r19, r19
    32a6:	89 89       	ldd	r24, Y+17	; 0x11
    32a8:	9a 89       	ldd	r25, Y+18	; 0x12
    32aa:	fc 01       	movw	r30, r24
    32ac:	e2 0f       	add	r30, r18
    32ae:	f3 1f       	adc	r31, r19
    32b0:	80 81       	ld	r24, Z
    32b2:	91 81       	ldd	r25, Z+1	; 0x01
    32b4:	48 17       	cp	r20, r24
    32b6:	59 07       	cpc	r21, r25
    32b8:	9c f4       	brge	.+38     	; 0x32e0 <display_actions+0x338>
				{
					//printf("moving left 90deg\n");
					lcd_wr_command(0x01);
    32ba:	81 e0       	ldi	r24, 0x01	; 1
    32bc:	0e 94 3f 06 	call	0xc7e	; 0xc7e <lcd_wr_command>
					lcd_string("rotate left");
    32c0:	8c e4       	ldi	r24, 0x4C	; 76
    32c2:	92 e0       	ldi	r25, 0x02	; 2
    32c4:	0e 94 fd 08 	call	0x11fa	; 0x11fa <lcd_string>
					rotate_left_901();
    32c8:	0e 94 a0 13 	call	0x2740	; 0x2740 <rotate_left_901>
				
				
					//printf("move fwd\n");
					lcd_wr_command(0x01);
    32cc:	81 e0       	ldi	r24, 0x01	; 1
    32ce:	0e 94 3f 06 	call	0xc7e	; 0xc7e <lcd_wr_command>
					lcd_string("move fwd");
    32d2:	86 e0       	ldi	r24, 0x06	; 6
    32d4:	92 e0       	ldi	r25, 0x02	; 2
    32d6:	0e 94 fd 08 	call	0x11fa	; 0x11fa <lcd_string>
					follow_path();
    32da:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <follow_path>
    32de:	cf c0       	rjmp	.+414    	; 0x347e <display_actions+0x4d6>
				}
				else
				{
				
					//printf("moving right 90 deg\n");
					lcd_wr_command(0x01);
    32e0:	81 e0       	ldi	r24, 0x01	; 1
    32e2:	0e 94 3f 06 	call	0xc7e	; 0xc7e <lcd_wr_command>
					lcd_string("rotate right");
    32e6:	88 e5       	ldi	r24, 0x58	; 88
    32e8:	92 e0       	ldi	r25, 0x02	; 2
    32ea:	0e 94 fd 08 	call	0x11fa	; 0x11fa <lcd_string>
					rotate_right_901();
    32ee:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <rotate_right_901>
				
				
				
					//printf("move fwd\n");
					lcd_wr_command(0x01);
    32f2:	81 e0       	ldi	r24, 0x01	; 1
    32f4:	0e 94 3f 06 	call	0xc7e	; 0xc7e <lcd_wr_command>
					lcd_string("move fwd");
    32f8:	86 e0       	ldi	r24, 0x06	; 6
    32fa:	92 e0       	ldi	r25, 0x02	; 2
    32fc:	0e 94 fd 08 	call	0x11fa	; 0x11fa <lcd_string>
					follow_path();
    3300:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <follow_path>
    3304:	bc c0       	rjmp	.+376    	; 0x347e <display_actions+0x4d6>
				
				}

			}
			else if (abs(actionlist[i]-actionlist[i+1]) ==2)
    3306:	8f 85       	ldd	r24, Y+15	; 0x0f
    3308:	98 89       	ldd	r25, Y+16	; 0x10
    330a:	9c 01       	movw	r18, r24
    330c:	22 0f       	add	r18, r18
    330e:	33 1f       	adc	r19, r19
    3310:	89 89       	ldd	r24, Y+17	; 0x11
    3312:	9a 89       	ldd	r25, Y+18	; 0x12
    3314:	fc 01       	movw	r30, r24
    3316:	e2 0f       	add	r30, r18
    3318:	f3 1f       	adc	r31, r19
    331a:	40 81       	ld	r20, Z
    331c:	51 81       	ldd	r21, Z+1	; 0x01
    331e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3320:	98 89       	ldd	r25, Y+16	; 0x10
    3322:	01 96       	adiw	r24, 0x01	; 1
    3324:	9c 01       	movw	r18, r24
    3326:	22 0f       	add	r18, r18
    3328:	33 1f       	adc	r19, r19
    332a:	89 89       	ldd	r24, Y+17	; 0x11
    332c:	9a 89       	ldd	r25, Y+18	; 0x12
    332e:	fc 01       	movw	r30, r24
    3330:	e2 0f       	add	r30, r18
    3332:	f3 1f       	adc	r31, r19
    3334:	80 81       	ld	r24, Z
    3336:	91 81       	ldd	r25, Z+1	; 0x01
    3338:	9a 01       	movw	r18, r20
    333a:	28 1b       	sub	r18, r24
    333c:	39 0b       	sbc	r19, r25
    333e:	c9 01       	movw	r24, r18
    3340:	9e 8b       	std	Y+22, r25	; 0x16
    3342:	8d 8b       	std	Y+21, r24	; 0x15
    3344:	8d 89       	ldd	r24, Y+21	; 0x15
    3346:	9e 89       	ldd	r25, Y+22	; 0x16
    3348:	99 23       	and	r25, r25
    334a:	3c f4       	brge	.+14     	; 0x335a <display_actions+0x3b2>
    334c:	2d 89       	ldd	r18, Y+21	; 0x15
    334e:	3e 89       	ldd	r19, Y+22	; 0x16
    3350:	30 95       	com	r19
    3352:	21 95       	neg	r18
    3354:	3f 4f       	sbci	r19, 0xFF	; 255
    3356:	3e 8b       	std	Y+22, r19	; 0x16
    3358:	2d 8b       	std	Y+21, r18	; 0x15
    335a:	8d 89       	ldd	r24, Y+21	; 0x15
    335c:	9e 89       	ldd	r25, Y+22	; 0x16
    335e:	82 30       	cpi	r24, 0x02	; 2
    3360:	91 05       	cpc	r25, r1
    3362:	e1 f4       	brne	.+56     	; 0x339c <display_actions+0x3f4>
			{
			
				//printf("moving left 90deg twice\n");
				lcd_wr_command(0x01);
    3364:	81 e0       	ldi	r24, 0x01	; 1
    3366:	0e 94 3f 06 	call	0xc7e	; 0xc7e <lcd_wr_command>
				lcd_string("rotate left");
    336a:	8c e4       	ldi	r24, 0x4C	; 76
    336c:	92 e0       	ldi	r25, 0x02	; 2
    336e:	0e 94 fd 08 	call	0x11fa	; 0x11fa <lcd_string>
				rotate_left_901();
    3372:	0e 94 a0 13 	call	0x2740	; 0x2740 <rotate_left_901>
				lcd_wr_command(0x01);
    3376:	81 e0       	ldi	r24, 0x01	; 1
    3378:	0e 94 3f 06 	call	0xc7e	; 0xc7e <lcd_wr_command>
				lcd_string("rotate left");
    337c:	8c e4       	ldi	r24, 0x4C	; 76
    337e:	92 e0       	ldi	r25, 0x02	; 2
    3380:	0e 94 fd 08 	call	0x11fa	; 0x11fa <lcd_string>
				rotate_left_901();
    3384:	0e 94 a0 13 	call	0x2740	; 0x2740 <rotate_left_901>
			
			
			
				//printf("move fwd\n");
				lcd_wr_command(0x01);
    3388:	81 e0       	ldi	r24, 0x01	; 1
    338a:	0e 94 3f 06 	call	0xc7e	; 0xc7e <lcd_wr_command>
				lcd_string("move fwd");
    338e:	86 e0       	ldi	r24, 0x06	; 6
    3390:	92 e0       	ldi	r25, 0x02	; 2
    3392:	0e 94 fd 08 	call	0x11fa	; 0x11fa <lcd_string>
				follow_path();
    3396:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <follow_path>
    339a:	71 c0       	rjmp	.+226    	; 0x347e <display_actions+0x4d6>
			

			}
			else if (abs(actionlist[i]-actionlist[i+1]) ==3)
    339c:	8f 85       	ldd	r24, Y+15	; 0x0f
    339e:	98 89       	ldd	r25, Y+16	; 0x10
    33a0:	9c 01       	movw	r18, r24
    33a2:	22 0f       	add	r18, r18
    33a4:	33 1f       	adc	r19, r19
    33a6:	89 89       	ldd	r24, Y+17	; 0x11
    33a8:	9a 89       	ldd	r25, Y+18	; 0x12
    33aa:	fc 01       	movw	r30, r24
    33ac:	e2 0f       	add	r30, r18
    33ae:	f3 1f       	adc	r31, r19
    33b0:	40 81       	ld	r20, Z
    33b2:	51 81       	ldd	r21, Z+1	; 0x01
    33b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    33b6:	98 89       	ldd	r25, Y+16	; 0x10
    33b8:	01 96       	adiw	r24, 0x01	; 1
    33ba:	9c 01       	movw	r18, r24
    33bc:	22 0f       	add	r18, r18
    33be:	33 1f       	adc	r19, r19
    33c0:	89 89       	ldd	r24, Y+17	; 0x11
    33c2:	9a 89       	ldd	r25, Y+18	; 0x12
    33c4:	fc 01       	movw	r30, r24
    33c6:	e2 0f       	add	r30, r18
    33c8:	f3 1f       	adc	r31, r19
    33ca:	80 81       	ld	r24, Z
    33cc:	91 81       	ldd	r25, Z+1	; 0x01
    33ce:	9a 01       	movw	r18, r20
    33d0:	28 1b       	sub	r18, r24
    33d2:	39 0b       	sbc	r19, r25
    33d4:	c9 01       	movw	r24, r18
    33d6:	9c 8b       	std	Y+20, r25	; 0x14
    33d8:	8b 8b       	std	Y+19, r24	; 0x13
    33da:	8b 89       	ldd	r24, Y+19	; 0x13
    33dc:	9c 89       	ldd	r25, Y+20	; 0x14
    33de:	99 23       	and	r25, r25
    33e0:	3c f4       	brge	.+14     	; 0x33f0 <display_actions+0x448>
    33e2:	2b 89       	ldd	r18, Y+19	; 0x13
    33e4:	3c 89       	ldd	r19, Y+20	; 0x14
    33e6:	30 95       	com	r19
    33e8:	21 95       	neg	r18
    33ea:	3f 4f       	sbci	r19, 0xFF	; 255
    33ec:	3c 8b       	std	Y+20, r19	; 0x14
    33ee:	2b 8b       	std	Y+19, r18	; 0x13
    33f0:	8b 89       	ldd	r24, Y+19	; 0x13
    33f2:	9c 89       	ldd	r25, Y+20	; 0x14
    33f4:	83 30       	cpi	r24, 0x03	; 3
    33f6:	91 05       	cpc	r25, r1
    33f8:	09 f0       	breq	.+2      	; 0x33fc <display_actions+0x454>
    33fa:	41 c0       	rjmp	.+130    	; 0x347e <display_actions+0x4d6>
			{
				if(actionlist[i]>actionlist[i+1])
    33fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    33fe:	98 89       	ldd	r25, Y+16	; 0x10
    3400:	9c 01       	movw	r18, r24
    3402:	22 0f       	add	r18, r18
    3404:	33 1f       	adc	r19, r19
    3406:	89 89       	ldd	r24, Y+17	; 0x11
    3408:	9a 89       	ldd	r25, Y+18	; 0x12
    340a:	fc 01       	movw	r30, r24
    340c:	e2 0f       	add	r30, r18
    340e:	f3 1f       	adc	r31, r19
    3410:	40 81       	ld	r20, Z
    3412:	51 81       	ldd	r21, Z+1	; 0x01
    3414:	8f 85       	ldd	r24, Y+15	; 0x0f
    3416:	98 89       	ldd	r25, Y+16	; 0x10
    3418:	01 96       	adiw	r24, 0x01	; 1
    341a:	9c 01       	movw	r18, r24
    341c:	22 0f       	add	r18, r18
    341e:	33 1f       	adc	r19, r19
    3420:	89 89       	ldd	r24, Y+17	; 0x11
    3422:	9a 89       	ldd	r25, Y+18	; 0x12
    3424:	fc 01       	movw	r30, r24
    3426:	e2 0f       	add	r30, r18
    3428:	f3 1f       	adc	r31, r19
    342a:	80 81       	ld	r24, Z
    342c:	91 81       	ldd	r25, Z+1	; 0x01
    342e:	84 17       	cp	r24, r20
    3430:	95 07       	cpc	r25, r21
    3432:	9c f4       	brge	.+38     	; 0x345a <display_actions+0x4b2>
				{
				
					//printf("moving left 90deg\n");
					lcd_wr_command(0x01);
    3434:	81 e0       	ldi	r24, 0x01	; 1
    3436:	0e 94 3f 06 	call	0xc7e	; 0xc7e <lcd_wr_command>
					lcd_string("rotate left");
    343a:	8c e4       	ldi	r24, 0x4C	; 76
    343c:	92 e0       	ldi	r25, 0x02	; 2
    343e:	0e 94 fd 08 	call	0x11fa	; 0x11fa <lcd_string>
					rotate_left_901();
    3442:	0e 94 a0 13 	call	0x2740	; 0x2740 <rotate_left_901>
				
				
					//printf("move fwd\n");
					lcd_wr_command(0x01);
    3446:	81 e0       	ldi	r24, 0x01	; 1
    3448:	0e 94 3f 06 	call	0xc7e	; 0xc7e <lcd_wr_command>
					lcd_string("move fwd");
    344c:	86 e0       	ldi	r24, 0x06	; 6
    344e:	92 e0       	ldi	r25, 0x02	; 2
    3450:	0e 94 fd 08 	call	0x11fa	; 0x11fa <lcd_string>
					follow_path();
    3454:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <follow_path>
    3458:	12 c0       	rjmp	.+36     	; 0x347e <display_actions+0x4d6>
				}
				else
				{
				
					//printf("moving right 90 deg\n");
					lcd_wr_command(0x01);
    345a:	81 e0       	ldi	r24, 0x01	; 1
    345c:	0e 94 3f 06 	call	0xc7e	; 0xc7e <lcd_wr_command>
					lcd_string("rotate right");
    3460:	88 e5       	ldi	r24, 0x58	; 88
    3462:	92 e0       	ldi	r25, 0x02	; 2
    3464:	0e 94 fd 08 	call	0x11fa	; 0x11fa <lcd_string>
					rotate_right_901();
    3468:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <rotate_right_901>
				
				
				
					//printf("move fwd\n");
					lcd_wr_command(0x01);
    346c:	81 e0       	ldi	r24, 0x01	; 1
    346e:	0e 94 3f 06 	call	0xc7e	; 0xc7e <lcd_wr_command>
					lcd_string("move fwd");
    3472:	86 e0       	ldi	r24, 0x06	; 6
    3474:	92 e0       	ldi	r25, 0x02	; 2
    3476:	0e 94 fd 08 	call	0x11fa	; 0x11fa <lcd_string>
					follow_path();
    347a:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <follow_path>
	//printf("move fwd\n");
	lcd_wr_command(0x01);
	lcd_string("move fwd");
	follow_path();
	
	for(i=0; actionlist[i+1] !=7 ;i++)
    347e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3480:	98 89       	ldd	r25, Y+16	; 0x10
    3482:	01 96       	adiw	r24, 0x01	; 1
    3484:	98 8b       	std	Y+16, r25	; 0x10
    3486:	8f 87       	std	Y+15, r24	; 0x0f
    3488:	8f 85       	ldd	r24, Y+15	; 0x0f
    348a:	98 89       	ldd	r25, Y+16	; 0x10
    348c:	01 96       	adiw	r24, 0x01	; 1
    348e:	9c 01       	movw	r18, r24
    3490:	22 0f       	add	r18, r18
    3492:	33 1f       	adc	r19, r19
    3494:	89 89       	ldd	r24, Y+17	; 0x11
    3496:	9a 89       	ldd	r25, Y+18	; 0x12
    3498:	fc 01       	movw	r30, r24
    349a:	e2 0f       	add	r30, r18
    349c:	f3 1f       	adc	r31, r19
    349e:	80 81       	ld	r24, Z
    34a0:	91 81       	ldd	r25, Z+1	; 0x01
    34a2:	87 30       	cpi	r24, 0x07	; 7
    34a4:	91 05       	cpc	r25, r1
    34a6:	09 f0       	breq	.+2      	; 0x34aa <display_actions+0x502>
    34a8:	97 cd       	rjmp	.-1234   	; 0x2fd8 <display_actions+0x30>
			}
		}
		
	}

}
    34aa:	68 96       	adiw	r28, 0x18	; 24
    34ac:	0f b6       	in	r0, 0x3f	; 63
    34ae:	f8 94       	cli
    34b0:	de bf       	out	0x3e, r29	; 62
    34b2:	0f be       	out	0x3f, r0	; 63
    34b4:	cd bf       	out	0x3d, r28	; 61
    34b6:	cf 91       	pop	r28
    34b8:	df 91       	pop	r29
    34ba:	08 95       	ret

000034bc <findactionspace>:

void findactionspace()
{
    34bc:	df 93       	push	r29
    34be:	cf 93       	push	r28
    34c0:	cd b7       	in	r28, 0x3d	; 61
    34c2:	de b7       	in	r29, 0x3e	; 62
	move(cur_node,next_node);
    34c4:	80 91 5a 04 	lds	r24, 0x045A
    34c8:	90 91 5b 04 	lds	r25, 0x045B
    34cc:	20 91 46 04 	lds	r18, 0x0446
    34d0:	30 91 47 04 	lds	r19, 0x0447
    34d4:	b9 01       	movw	r22, r18
    34d6:	0e 94 b6 1a 	call	0x356c	; 0x356c <move>
	
	cur_node=base_station;
    34da:	80 91 04 02 	lds	r24, 0x0204
    34de:	90 91 05 02 	lds	r25, 0x0205
    34e2:	90 93 5b 04 	sts	0x045B, r25
    34e6:	80 93 5a 04 	sts	0x045A, r24
	next_node=dispatch_point;
    34ea:	80 91 02 02 	lds	r24, 0x0202
    34ee:	90 91 03 02 	lds	r25, 0x0203
    34f2:	90 93 47 04 	sts	0x0447, r25
    34f6:	80 93 46 04 	sts	0x0446, r24
	move(cur_node,next_node);
    34fa:	80 91 5a 04 	lds	r24, 0x045A
    34fe:	90 91 5b 04 	lds	r25, 0x045B
    3502:	20 91 46 04 	lds	r18, 0x0446
    3506:	30 91 47 04 	lds	r19, 0x0447
    350a:	b9 01       	movw	r22, r18
    350c:	0e 94 b6 1a 	call	0x356c	; 0x356c <move>
		
	cur_node=dispatch_point;
    3510:	80 91 02 02 	lds	r24, 0x0202
    3514:	90 91 03 02 	lds	r25, 0x0203
    3518:	90 93 5b 04 	sts	0x045B, r25
    351c:	80 93 5a 04 	sts	0x045A, r24
	next_node=base_station;
    3520:	80 91 04 02 	lds	r24, 0x0204
    3524:	90 91 05 02 	lds	r25, 0x0205
    3528:	90 93 47 04 	sts	0x0447, r25
    352c:	80 93 46 04 	sts	0x0446, r24
	move(cur_node,next_node);
    3530:	80 91 5a 04 	lds	r24, 0x045A
    3534:	90 91 5b 04 	lds	r25, 0x045B
    3538:	20 91 46 04 	lds	r18, 0x0446
    353c:	30 91 47 04 	lds	r19, 0x0447
    3540:	b9 01       	movw	r22, r18
    3542:	0e 94 b6 1a 	call	0x356c	; 0x356c <move>
	
	cur_node=base_station;
    3546:	80 91 04 02 	lds	r24, 0x0204
    354a:	90 91 05 02 	lds	r25, 0x0205
    354e:	90 93 5b 04 	sts	0x045B, r25
    3552:	80 93 5a 04 	sts	0x045A, r24
	next_node=store;		
    3556:	80 91 4e 04 	lds	r24, 0x044E
    355a:	90 91 4f 04 	lds	r25, 0x044F
    355e:	90 93 47 04 	sts	0x0447, r25
    3562:	80 93 46 04 	sts	0x0446, r24
	
}
    3566:	cf 91       	pop	r28
    3568:	df 91       	pop	r29
    356a:	08 95       	ret

0000356c <move>:

void move(int from, int to)
{
    356c:	df 93       	push	r29
    356e:	cf 93       	push	r28
    3570:	00 d0       	rcall	.+0      	; 0x3572 <move+0x6>
    3572:	0f 92       	push	r0
    3574:	cd b7       	in	r28, 0x3d	; 61
    3576:	de b7       	in	r29, 0x3e	; 62
    3578:	9a 83       	std	Y+2, r25	; 0x02
    357a:	89 83       	std	Y+1, r24	; 0x01
    357c:	7c 83       	std	Y+4, r23	; 0x04
    357e:	6b 83       	std	Y+3, r22	; 0x03
	if(from==base_station )
    3580:	20 91 04 02 	lds	r18, 0x0204
    3584:	30 91 05 02 	lds	r19, 0x0205
    3588:	89 81       	ldd	r24, Y+1	; 0x01
    358a:	9a 81       	ldd	r25, Y+2	; 0x02
    358c:	82 17       	cp	r24, r18
    358e:	93 07       	cpc	r25, r19
    3590:	09 f0       	breq	.+2      	; 0x3594 <move+0x28>
    3592:	9e c2       	rjmp	.+1340   	; 0x3ad0 <move+0x564>
	{
		if(to==store)
    3594:	20 91 4e 04 	lds	r18, 0x044E
    3598:	30 91 4f 04 	lds	r19, 0x044F
    359c:	8b 81       	ldd	r24, Y+3	; 0x03
    359e:	9c 81       	ldd	r25, Y+4	; 0x04
    35a0:	82 17       	cp	r24, r18
    35a2:	93 07       	cpc	r25, r19
    35a4:	09 f0       	breq	.+2      	; 0x35a8 <move+0x3c>
    35a6:	04 c2       	rjmp	.+1032   	; 0x39b0 <move+0x444>
		{
			if(store==4)
    35a8:	80 91 4e 04 	lds	r24, 0x044E
    35ac:	90 91 4f 04 	lds	r25, 0x044F
    35b0:	84 30       	cpi	r24, 0x04	; 4
    35b2:	91 05       	cpc	r25, r1
    35b4:	09 f0       	breq	.+2      	; 0x35b8 <move+0x4c>
    35b6:	65 c0       	rjmp	.+202    	; 0x3682 <move+0x116>
			{
				action_space[action_counter++]=4;
    35b8:	20 91 6e 03 	lds	r18, 0x036E
    35bc:	30 91 6f 03 	lds	r19, 0x036F
    35c0:	c9 01       	movw	r24, r18
    35c2:	88 0f       	add	r24, r24
    35c4:	99 1f       	adc	r25, r25
    35c6:	fc 01       	movw	r30, r24
    35c8:	e0 59       	subi	r30, 0x90	; 144
    35ca:	fc 4f       	sbci	r31, 0xFC	; 252
    35cc:	84 e0       	ldi	r24, 0x04	; 4
    35ce:	90 e0       	ldi	r25, 0x00	; 0
    35d0:	91 83       	std	Z+1, r25	; 0x01
    35d2:	80 83       	st	Z, r24
    35d4:	c9 01       	movw	r24, r18
    35d6:	01 96       	adiw	r24, 0x01	; 1
    35d8:	90 93 6f 03 	sts	0x036F, r25
    35dc:	80 93 6e 03 	sts	0x036E, r24
				action_space[action_counter++]=3;
    35e0:	20 91 6e 03 	lds	r18, 0x036E
    35e4:	30 91 6f 03 	lds	r19, 0x036F
    35e8:	c9 01       	movw	r24, r18
    35ea:	88 0f       	add	r24, r24
    35ec:	99 1f       	adc	r25, r25
    35ee:	fc 01       	movw	r30, r24
    35f0:	e0 59       	subi	r30, 0x90	; 144
    35f2:	fc 4f       	sbci	r31, 0xFC	; 252
    35f4:	83 e0       	ldi	r24, 0x03	; 3
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	91 83       	std	Z+1, r25	; 0x01
    35fa:	80 83       	st	Z, r24
    35fc:	c9 01       	movw	r24, r18
    35fe:	01 96       	adiw	r24, 0x01	; 1
    3600:	90 93 6f 03 	sts	0x036F, r25
    3604:	80 93 6e 03 	sts	0x036E, r24

				action_space[action_counter++]=5;
    3608:	20 91 6e 03 	lds	r18, 0x036E
    360c:	30 91 6f 03 	lds	r19, 0x036F
    3610:	c9 01       	movw	r24, r18
    3612:	88 0f       	add	r24, r24
    3614:	99 1f       	adc	r25, r25
    3616:	fc 01       	movw	r30, r24
    3618:	e0 59       	subi	r30, 0x90	; 144
    361a:	fc 4f       	sbci	r31, 0xFC	; 252
    361c:	85 e0       	ldi	r24, 0x05	; 5
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	91 83       	std	Z+1, r25	; 0x01
    3622:	80 83       	st	Z, r24
    3624:	c9 01       	movw	r24, r18
    3626:	01 96       	adiw	r24, 0x01	; 1
    3628:	90 93 6f 03 	sts	0x036F, r25
    362c:	80 93 6e 03 	sts	0x036E, r24

				action_space[action_counter++]=1;
    3630:	20 91 6e 03 	lds	r18, 0x036E
    3634:	30 91 6f 03 	lds	r19, 0x036F
    3638:	c9 01       	movw	r24, r18
    363a:	88 0f       	add	r24, r24
    363c:	99 1f       	adc	r25, r25
    363e:	fc 01       	movw	r30, r24
    3640:	e0 59       	subi	r30, 0x90	; 144
    3642:	fc 4f       	sbci	r31, 0xFC	; 252
    3644:	81 e0       	ldi	r24, 0x01	; 1
    3646:	90 e0       	ldi	r25, 0x00	; 0
    3648:	91 83       	std	Z+1, r25	; 0x01
    364a:	80 83       	st	Z, r24
    364c:	c9 01       	movw	r24, r18
    364e:	01 96       	adiw	r24, 0x01	; 1
    3650:	90 93 6f 03 	sts	0x036F, r25
    3654:	80 93 6e 03 	sts	0x036E, r24
				action_space[action_counter++]=2;
    3658:	20 91 6e 03 	lds	r18, 0x036E
    365c:	30 91 6f 03 	lds	r19, 0x036F
    3660:	c9 01       	movw	r24, r18
    3662:	88 0f       	add	r24, r24
    3664:	99 1f       	adc	r25, r25
    3666:	fc 01       	movw	r30, r24
    3668:	e0 59       	subi	r30, 0x90	; 144
    366a:	fc 4f       	sbci	r31, 0xFC	; 252
    366c:	82 e0       	ldi	r24, 0x02	; 2
    366e:	90 e0       	ldi	r25, 0x00	; 0
    3670:	91 83       	std	Z+1, r25	; 0x01
    3672:	80 83       	st	Z, r24
    3674:	c9 01       	movw	r24, r18
    3676:	01 96       	adiw	r24, 0x01	; 1
    3678:	90 93 6f 03 	sts	0x036F, r25
    367c:	80 93 6e 03 	sts	0x036E, r24
    3680:	27 c2       	rjmp	.+1102   	; 0x3ad0 <move+0x564>
			
			}
			else if(store==6)
    3682:	80 91 4e 04 	lds	r24, 0x044E
    3686:	90 91 4f 04 	lds	r25, 0x044F
    368a:	86 30       	cpi	r24, 0x06	; 6
    368c:	91 05       	cpc	r25, r1
    368e:	09 f0       	breq	.+2      	; 0x3692 <move+0x126>
    3690:	65 c0       	rjmp	.+202    	; 0x375c <move+0x1f0>
			{
				action_space[action_counter++]=4;
    3692:	20 91 6e 03 	lds	r18, 0x036E
    3696:	30 91 6f 03 	lds	r19, 0x036F
    369a:	c9 01       	movw	r24, r18
    369c:	88 0f       	add	r24, r24
    369e:	99 1f       	adc	r25, r25
    36a0:	fc 01       	movw	r30, r24
    36a2:	e0 59       	subi	r30, 0x90	; 144
    36a4:	fc 4f       	sbci	r31, 0xFC	; 252
    36a6:	84 e0       	ldi	r24, 0x04	; 4
    36a8:	90 e0       	ldi	r25, 0x00	; 0
    36aa:	91 83       	std	Z+1, r25	; 0x01
    36ac:	80 83       	st	Z, r24
    36ae:	c9 01       	movw	r24, r18
    36b0:	01 96       	adiw	r24, 0x01	; 1
    36b2:	90 93 6f 03 	sts	0x036F, r25
    36b6:	80 93 6e 03 	sts	0x036E, r24
				action_space[action_counter++]=1;
    36ba:	20 91 6e 03 	lds	r18, 0x036E
    36be:	30 91 6f 03 	lds	r19, 0x036F
    36c2:	c9 01       	movw	r24, r18
    36c4:	88 0f       	add	r24, r24
    36c6:	99 1f       	adc	r25, r25
    36c8:	fc 01       	movw	r30, r24
    36ca:	e0 59       	subi	r30, 0x90	; 144
    36cc:	fc 4f       	sbci	r31, 0xFC	; 252
    36ce:	81 e0       	ldi	r24, 0x01	; 1
    36d0:	90 e0       	ldi	r25, 0x00	; 0
    36d2:	91 83       	std	Z+1, r25	; 0x01
    36d4:	80 83       	st	Z, r24
    36d6:	c9 01       	movw	r24, r18
    36d8:	01 96       	adiw	r24, 0x01	; 1
    36da:	90 93 6f 03 	sts	0x036F, r25
    36de:	80 93 6e 03 	sts	0x036E, r24

				action_space[action_counter++]=5;
    36e2:	20 91 6e 03 	lds	r18, 0x036E
    36e6:	30 91 6f 03 	lds	r19, 0x036F
    36ea:	c9 01       	movw	r24, r18
    36ec:	88 0f       	add	r24, r24
    36ee:	99 1f       	adc	r25, r25
    36f0:	fc 01       	movw	r30, r24
    36f2:	e0 59       	subi	r30, 0x90	; 144
    36f4:	fc 4f       	sbci	r31, 0xFC	; 252
    36f6:	85 e0       	ldi	r24, 0x05	; 5
    36f8:	90 e0       	ldi	r25, 0x00	; 0
    36fa:	91 83       	std	Z+1, r25	; 0x01
    36fc:	80 83       	st	Z, r24
    36fe:	c9 01       	movw	r24, r18
    3700:	01 96       	adiw	r24, 0x01	; 1
    3702:	90 93 6f 03 	sts	0x036F, r25
    3706:	80 93 6e 03 	sts	0x036E, r24

				action_space[action_counter++]=3;
    370a:	20 91 6e 03 	lds	r18, 0x036E
    370e:	30 91 6f 03 	lds	r19, 0x036F
    3712:	c9 01       	movw	r24, r18
    3714:	88 0f       	add	r24, r24
    3716:	99 1f       	adc	r25, r25
    3718:	fc 01       	movw	r30, r24
    371a:	e0 59       	subi	r30, 0x90	; 144
    371c:	fc 4f       	sbci	r31, 0xFC	; 252
    371e:	83 e0       	ldi	r24, 0x03	; 3
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	91 83       	std	Z+1, r25	; 0x01
    3724:	80 83       	st	Z, r24
    3726:	c9 01       	movw	r24, r18
    3728:	01 96       	adiw	r24, 0x01	; 1
    372a:	90 93 6f 03 	sts	0x036F, r25
    372e:	80 93 6e 03 	sts	0x036E, r24
				action_space[action_counter++]=2;
    3732:	20 91 6e 03 	lds	r18, 0x036E
    3736:	30 91 6f 03 	lds	r19, 0x036F
    373a:	c9 01       	movw	r24, r18
    373c:	88 0f       	add	r24, r24
    373e:	99 1f       	adc	r25, r25
    3740:	fc 01       	movw	r30, r24
    3742:	e0 59       	subi	r30, 0x90	; 144
    3744:	fc 4f       	sbci	r31, 0xFC	; 252
    3746:	82 e0       	ldi	r24, 0x02	; 2
    3748:	90 e0       	ldi	r25, 0x00	; 0
    374a:	91 83       	std	Z+1, r25	; 0x01
    374c:	80 83       	st	Z, r24
    374e:	c9 01       	movw	r24, r18
    3750:	01 96       	adiw	r24, 0x01	; 1
    3752:	90 93 6f 03 	sts	0x036F, r25
    3756:	80 93 6e 03 	sts	0x036E, r24
    375a:	ba c1       	rjmp	.+884    	; 0x3ad0 <move+0x564>

			}
			else if(store==1)
    375c:	80 91 4e 04 	lds	r24, 0x044E
    3760:	90 91 4f 04 	lds	r25, 0x044F
    3764:	81 30       	cpi	r24, 0x01	; 1
    3766:	91 05       	cpc	r25, r1
    3768:	09 f0       	breq	.+2      	; 0x376c <move+0x200>
    376a:	8d c0       	rjmp	.+282    	; 0x3886 <move+0x31a>
			{
				action_space[action_counter++]=4;
    376c:	20 91 6e 03 	lds	r18, 0x036E
    3770:	30 91 6f 03 	lds	r19, 0x036F
    3774:	c9 01       	movw	r24, r18
    3776:	88 0f       	add	r24, r24
    3778:	99 1f       	adc	r25, r25
    377a:	fc 01       	movw	r30, r24
    377c:	e0 59       	subi	r30, 0x90	; 144
    377e:	fc 4f       	sbci	r31, 0xFC	; 252
    3780:	84 e0       	ldi	r24, 0x04	; 4
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	91 83       	std	Z+1, r25	; 0x01
    3786:	80 83       	st	Z, r24
    3788:	c9 01       	movw	r24, r18
    378a:	01 96       	adiw	r24, 0x01	; 1
    378c:	90 93 6f 03 	sts	0x036F, r25
    3790:	80 93 6e 03 	sts	0x036E, r24
				action_space[action_counter++]=4;
    3794:	20 91 6e 03 	lds	r18, 0x036E
    3798:	30 91 6f 03 	lds	r19, 0x036F
    379c:	c9 01       	movw	r24, r18
    379e:	88 0f       	add	r24, r24
    37a0:	99 1f       	adc	r25, r25
    37a2:	fc 01       	movw	r30, r24
    37a4:	e0 59       	subi	r30, 0x90	; 144
    37a6:	fc 4f       	sbci	r31, 0xFC	; 252
    37a8:	84 e0       	ldi	r24, 0x04	; 4
    37aa:	90 e0       	ldi	r25, 0x00	; 0
    37ac:	91 83       	std	Z+1, r25	; 0x01
    37ae:	80 83       	st	Z, r24
    37b0:	c9 01       	movw	r24, r18
    37b2:	01 96       	adiw	r24, 0x01	; 1
    37b4:	90 93 6f 03 	sts	0x036F, r25
    37b8:	80 93 6e 03 	sts	0x036E, r24
				action_space[action_counter++]=3;
    37bc:	20 91 6e 03 	lds	r18, 0x036E
    37c0:	30 91 6f 03 	lds	r19, 0x036F
    37c4:	c9 01       	movw	r24, r18
    37c6:	88 0f       	add	r24, r24
    37c8:	99 1f       	adc	r25, r25
    37ca:	fc 01       	movw	r30, r24
    37cc:	e0 59       	subi	r30, 0x90	; 144
    37ce:	fc 4f       	sbci	r31, 0xFC	; 252
    37d0:	83 e0       	ldi	r24, 0x03	; 3
    37d2:	90 e0       	ldi	r25, 0x00	; 0
    37d4:	91 83       	std	Z+1, r25	; 0x01
    37d6:	80 83       	st	Z, r24
    37d8:	c9 01       	movw	r24, r18
    37da:	01 96       	adiw	r24, 0x01	; 1
    37dc:	90 93 6f 03 	sts	0x036F, r25
    37e0:	80 93 6e 03 	sts	0x036E, r24

				action_space[action_counter++]=5;
    37e4:	20 91 6e 03 	lds	r18, 0x036E
    37e8:	30 91 6f 03 	lds	r19, 0x036F
    37ec:	c9 01       	movw	r24, r18
    37ee:	88 0f       	add	r24, r24
    37f0:	99 1f       	adc	r25, r25
    37f2:	fc 01       	movw	r30, r24
    37f4:	e0 59       	subi	r30, 0x90	; 144
    37f6:	fc 4f       	sbci	r31, 0xFC	; 252
    37f8:	85 e0       	ldi	r24, 0x05	; 5
    37fa:	90 e0       	ldi	r25, 0x00	; 0
    37fc:	91 83       	std	Z+1, r25	; 0x01
    37fe:	80 83       	st	Z, r24
    3800:	c9 01       	movw	r24, r18
    3802:	01 96       	adiw	r24, 0x01	; 1
    3804:	90 93 6f 03 	sts	0x036F, r25
    3808:	80 93 6e 03 	sts	0x036E, r24

				action_space[action_counter++]=1;
    380c:	20 91 6e 03 	lds	r18, 0x036E
    3810:	30 91 6f 03 	lds	r19, 0x036F
    3814:	c9 01       	movw	r24, r18
    3816:	88 0f       	add	r24, r24
    3818:	99 1f       	adc	r25, r25
    381a:	fc 01       	movw	r30, r24
    381c:	e0 59       	subi	r30, 0x90	; 144
    381e:	fc 4f       	sbci	r31, 0xFC	; 252
    3820:	81 e0       	ldi	r24, 0x01	; 1
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	91 83       	std	Z+1, r25	; 0x01
    3826:	80 83       	st	Z, r24
    3828:	c9 01       	movw	r24, r18
    382a:	01 96       	adiw	r24, 0x01	; 1
    382c:	90 93 6f 03 	sts	0x036F, r25
    3830:	80 93 6e 03 	sts	0x036E, r24
				action_space[action_counter++]=2;
    3834:	20 91 6e 03 	lds	r18, 0x036E
    3838:	30 91 6f 03 	lds	r19, 0x036F
    383c:	c9 01       	movw	r24, r18
    383e:	88 0f       	add	r24, r24
    3840:	99 1f       	adc	r25, r25
    3842:	fc 01       	movw	r30, r24
    3844:	e0 59       	subi	r30, 0x90	; 144
    3846:	fc 4f       	sbci	r31, 0xFC	; 252
    3848:	82 e0       	ldi	r24, 0x02	; 2
    384a:	90 e0       	ldi	r25, 0x00	; 0
    384c:	91 83       	std	Z+1, r25	; 0x01
    384e:	80 83       	st	Z, r24
    3850:	c9 01       	movw	r24, r18
    3852:	01 96       	adiw	r24, 0x01	; 1
    3854:	90 93 6f 03 	sts	0x036F, r25
    3858:	80 93 6e 03 	sts	0x036E, r24
				action_space[action_counter++]=2;
    385c:	20 91 6e 03 	lds	r18, 0x036E
    3860:	30 91 6f 03 	lds	r19, 0x036F
    3864:	c9 01       	movw	r24, r18
    3866:	88 0f       	add	r24, r24
    3868:	99 1f       	adc	r25, r25
    386a:	fc 01       	movw	r30, r24
    386c:	e0 59       	subi	r30, 0x90	; 144
    386e:	fc 4f       	sbci	r31, 0xFC	; 252
    3870:	82 e0       	ldi	r24, 0x02	; 2
    3872:	90 e0       	ldi	r25, 0x00	; 0
    3874:	91 83       	std	Z+1, r25	; 0x01
    3876:	80 83       	st	Z, r24
    3878:	c9 01       	movw	r24, r18
    387a:	01 96       	adiw	r24, 0x01	; 1
    387c:	90 93 6f 03 	sts	0x036F, r25
    3880:	80 93 6e 03 	sts	0x036E, r24
    3884:	25 c1       	rjmp	.+586    	; 0x3ad0 <move+0x564>

			}
			else if(store==3)
    3886:	80 91 4e 04 	lds	r24, 0x044E
    388a:	90 91 4f 04 	lds	r25, 0x044F
    388e:	83 30       	cpi	r24, 0x03	; 3
    3890:	91 05       	cpc	r25, r1
    3892:	09 f0       	breq	.+2      	; 0x3896 <move+0x32a>
    3894:	1d c1       	rjmp	.+570    	; 0x3ad0 <move+0x564>
			{
				action_space[action_counter++]=4;
    3896:	20 91 6e 03 	lds	r18, 0x036E
    389a:	30 91 6f 03 	lds	r19, 0x036F
    389e:	c9 01       	movw	r24, r18
    38a0:	88 0f       	add	r24, r24
    38a2:	99 1f       	adc	r25, r25
    38a4:	fc 01       	movw	r30, r24
    38a6:	e0 59       	subi	r30, 0x90	; 144
    38a8:	fc 4f       	sbci	r31, 0xFC	; 252
    38aa:	84 e0       	ldi	r24, 0x04	; 4
    38ac:	90 e0       	ldi	r25, 0x00	; 0
    38ae:	91 83       	std	Z+1, r25	; 0x01
    38b0:	80 83       	st	Z, r24
    38b2:	c9 01       	movw	r24, r18
    38b4:	01 96       	adiw	r24, 0x01	; 1
    38b6:	90 93 6f 03 	sts	0x036F, r25
    38ba:	80 93 6e 03 	sts	0x036E, r24
				action_space[action_counter++]=4;
    38be:	20 91 6e 03 	lds	r18, 0x036E
    38c2:	30 91 6f 03 	lds	r19, 0x036F
    38c6:	c9 01       	movw	r24, r18
    38c8:	88 0f       	add	r24, r24
    38ca:	99 1f       	adc	r25, r25
    38cc:	fc 01       	movw	r30, r24
    38ce:	e0 59       	subi	r30, 0x90	; 144
    38d0:	fc 4f       	sbci	r31, 0xFC	; 252
    38d2:	84 e0       	ldi	r24, 0x04	; 4
    38d4:	90 e0       	ldi	r25, 0x00	; 0
    38d6:	91 83       	std	Z+1, r25	; 0x01
    38d8:	80 83       	st	Z, r24
    38da:	c9 01       	movw	r24, r18
    38dc:	01 96       	adiw	r24, 0x01	; 1
    38de:	90 93 6f 03 	sts	0x036F, r25
    38e2:	80 93 6e 03 	sts	0x036E, r24
				action_space[action_counter++]=1;
    38e6:	20 91 6e 03 	lds	r18, 0x036E
    38ea:	30 91 6f 03 	lds	r19, 0x036F
    38ee:	c9 01       	movw	r24, r18
    38f0:	88 0f       	add	r24, r24
    38f2:	99 1f       	adc	r25, r25
    38f4:	fc 01       	movw	r30, r24
    38f6:	e0 59       	subi	r30, 0x90	; 144
    38f8:	fc 4f       	sbci	r31, 0xFC	; 252
    38fa:	81 e0       	ldi	r24, 0x01	; 1
    38fc:	90 e0       	ldi	r25, 0x00	; 0
    38fe:	91 83       	std	Z+1, r25	; 0x01
    3900:	80 83       	st	Z, r24
    3902:	c9 01       	movw	r24, r18
    3904:	01 96       	adiw	r24, 0x01	; 1
    3906:	90 93 6f 03 	sts	0x036F, r25
    390a:	80 93 6e 03 	sts	0x036E, r24

				action_space[action_counter++]=5;
    390e:	20 91 6e 03 	lds	r18, 0x036E
    3912:	30 91 6f 03 	lds	r19, 0x036F
    3916:	c9 01       	movw	r24, r18
    3918:	88 0f       	add	r24, r24
    391a:	99 1f       	adc	r25, r25
    391c:	fc 01       	movw	r30, r24
    391e:	e0 59       	subi	r30, 0x90	; 144
    3920:	fc 4f       	sbci	r31, 0xFC	; 252
    3922:	85 e0       	ldi	r24, 0x05	; 5
    3924:	90 e0       	ldi	r25, 0x00	; 0
    3926:	91 83       	std	Z+1, r25	; 0x01
    3928:	80 83       	st	Z, r24
    392a:	c9 01       	movw	r24, r18
    392c:	01 96       	adiw	r24, 0x01	; 1
    392e:	90 93 6f 03 	sts	0x036F, r25
    3932:	80 93 6e 03 	sts	0x036E, r24

				action_space[action_counter++]=3;
    3936:	20 91 6e 03 	lds	r18, 0x036E
    393a:	30 91 6f 03 	lds	r19, 0x036F
    393e:	c9 01       	movw	r24, r18
    3940:	88 0f       	add	r24, r24
    3942:	99 1f       	adc	r25, r25
    3944:	fc 01       	movw	r30, r24
    3946:	e0 59       	subi	r30, 0x90	; 144
    3948:	fc 4f       	sbci	r31, 0xFC	; 252
    394a:	83 e0       	ldi	r24, 0x03	; 3
    394c:	90 e0       	ldi	r25, 0x00	; 0
    394e:	91 83       	std	Z+1, r25	; 0x01
    3950:	80 83       	st	Z, r24
    3952:	c9 01       	movw	r24, r18
    3954:	01 96       	adiw	r24, 0x01	; 1
    3956:	90 93 6f 03 	sts	0x036F, r25
    395a:	80 93 6e 03 	sts	0x036E, r24
				action_space[action_counter++]=2;
    395e:	20 91 6e 03 	lds	r18, 0x036E
    3962:	30 91 6f 03 	lds	r19, 0x036F
    3966:	c9 01       	movw	r24, r18
    3968:	88 0f       	add	r24, r24
    396a:	99 1f       	adc	r25, r25
    396c:	fc 01       	movw	r30, r24
    396e:	e0 59       	subi	r30, 0x90	; 144
    3970:	fc 4f       	sbci	r31, 0xFC	; 252
    3972:	82 e0       	ldi	r24, 0x02	; 2
    3974:	90 e0       	ldi	r25, 0x00	; 0
    3976:	91 83       	std	Z+1, r25	; 0x01
    3978:	80 83       	st	Z, r24
    397a:	c9 01       	movw	r24, r18
    397c:	01 96       	adiw	r24, 0x01	; 1
    397e:	90 93 6f 03 	sts	0x036F, r25
    3982:	80 93 6e 03 	sts	0x036E, r24
				action_space[action_counter++]=2;
    3986:	20 91 6e 03 	lds	r18, 0x036E
    398a:	30 91 6f 03 	lds	r19, 0x036F
    398e:	c9 01       	movw	r24, r18
    3990:	88 0f       	add	r24, r24
    3992:	99 1f       	adc	r25, r25
    3994:	fc 01       	movw	r30, r24
    3996:	e0 59       	subi	r30, 0x90	; 144
    3998:	fc 4f       	sbci	r31, 0xFC	; 252
    399a:	82 e0       	ldi	r24, 0x02	; 2
    399c:	90 e0       	ldi	r25, 0x00	; 0
    399e:	91 83       	std	Z+1, r25	; 0x01
    39a0:	80 83       	st	Z, r24
    39a2:	c9 01       	movw	r24, r18
    39a4:	01 96       	adiw	r24, 0x01	; 1
    39a6:	90 93 6f 03 	sts	0x036F, r25
    39aa:	80 93 6e 03 	sts	0x036E, r24
    39ae:	90 c0       	rjmp	.+288    	; 0x3ad0 <move+0x564>

			}
			
		}

		else if(to==dispatch_point)
    39b0:	20 91 02 02 	lds	r18, 0x0202
    39b4:	30 91 03 02 	lds	r19, 0x0203
    39b8:	8b 81       	ldd	r24, Y+3	; 0x03
    39ba:	9c 81       	ldd	r25, Y+4	; 0x04
    39bc:	82 17       	cp	r24, r18
    39be:	93 07       	cpc	r25, r19
    39c0:	09 f0       	breq	.+2      	; 0x39c4 <move+0x458>
    39c2:	86 c0       	rjmp	.+268    	; 0x3ad0 <move+0x564>
		{
			if(dispatch_point==10)
    39c4:	80 91 02 02 	lds	r24, 0x0202
    39c8:	90 91 03 02 	lds	r25, 0x0203
    39cc:	8a 30       	cpi	r24, 0x0A	; 10
    39ce:	91 05       	cpc	r25, r1
    39d0:	e1 f5       	brne	.+120    	; 0x3a4a <move+0x4de>
			{
				action_space[action_counter++]=3;
    39d2:	20 91 6e 03 	lds	r18, 0x036E
    39d6:	30 91 6f 03 	lds	r19, 0x036F
    39da:	c9 01       	movw	r24, r18
    39dc:	88 0f       	add	r24, r24
    39de:	99 1f       	adc	r25, r25
    39e0:	fc 01       	movw	r30, r24
    39e2:	e0 59       	subi	r30, 0x90	; 144
    39e4:	fc 4f       	sbci	r31, 0xFC	; 252
    39e6:	83 e0       	ldi	r24, 0x03	; 3
    39e8:	90 e0       	ldi	r25, 0x00	; 0
    39ea:	91 83       	std	Z+1, r25	; 0x01
    39ec:	80 83       	st	Z, r24
    39ee:	c9 01       	movw	r24, r18
    39f0:	01 96       	adiw	r24, 0x01	; 1
    39f2:	90 93 6f 03 	sts	0x036F, r25
    39f6:	80 93 6e 03 	sts	0x036E, r24
				action_space[action_counter++]=2;
    39fa:	20 91 6e 03 	lds	r18, 0x036E
    39fe:	30 91 6f 03 	lds	r19, 0x036F
    3a02:	c9 01       	movw	r24, r18
    3a04:	88 0f       	add	r24, r24
    3a06:	99 1f       	adc	r25, r25
    3a08:	fc 01       	movw	r30, r24
    3a0a:	e0 59       	subi	r30, 0x90	; 144
    3a0c:	fc 4f       	sbci	r31, 0xFC	; 252
    3a0e:	82 e0       	ldi	r24, 0x02	; 2
    3a10:	90 e0       	ldi	r25, 0x00	; 0
    3a12:	91 83       	std	Z+1, r25	; 0x01
    3a14:	80 83       	st	Z, r24
    3a16:	c9 01       	movw	r24, r18
    3a18:	01 96       	adiw	r24, 0x01	; 1
    3a1a:	90 93 6f 03 	sts	0x036F, r25
    3a1e:	80 93 6e 03 	sts	0x036E, r24

				action_space[action_counter++]=6;
    3a22:	20 91 6e 03 	lds	r18, 0x036E
    3a26:	30 91 6f 03 	lds	r19, 0x036F
    3a2a:	c9 01       	movw	r24, r18
    3a2c:	88 0f       	add	r24, r24
    3a2e:	99 1f       	adc	r25, r25
    3a30:	fc 01       	movw	r30, r24
    3a32:	e0 59       	subi	r30, 0x90	; 144
    3a34:	fc 4f       	sbci	r31, 0xFC	; 252
    3a36:	86 e0       	ldi	r24, 0x06	; 6
    3a38:	90 e0       	ldi	r25, 0x00	; 0
    3a3a:	91 83       	std	Z+1, r25	; 0x01
    3a3c:	80 83       	st	Z, r24
    3a3e:	c9 01       	movw	r24, r18
    3a40:	01 96       	adiw	r24, 0x01	; 1
    3a42:	90 93 6f 03 	sts	0x036F, r25
    3a46:	80 93 6e 03 	sts	0x036E, r24
			}
			if(dispatch_point==11)
    3a4a:	80 91 02 02 	lds	r24, 0x0202
    3a4e:	90 91 03 02 	lds	r25, 0x0203
    3a52:	8b 30       	cpi	r24, 0x0B	; 11
    3a54:	91 05       	cpc	r25, r1
    3a56:	e1 f5       	brne	.+120    	; 0x3ad0 <move+0x564>
			{
				action_space[action_counter++]=1;
    3a58:	20 91 6e 03 	lds	r18, 0x036E
    3a5c:	30 91 6f 03 	lds	r19, 0x036F
    3a60:	c9 01       	movw	r24, r18
    3a62:	88 0f       	add	r24, r24
    3a64:	99 1f       	adc	r25, r25
    3a66:	fc 01       	movw	r30, r24
    3a68:	e0 59       	subi	r30, 0x90	; 144
    3a6a:	fc 4f       	sbci	r31, 0xFC	; 252
    3a6c:	81 e0       	ldi	r24, 0x01	; 1
    3a6e:	90 e0       	ldi	r25, 0x00	; 0
    3a70:	91 83       	std	Z+1, r25	; 0x01
    3a72:	80 83       	st	Z, r24
    3a74:	c9 01       	movw	r24, r18
    3a76:	01 96       	adiw	r24, 0x01	; 1
    3a78:	90 93 6f 03 	sts	0x036F, r25
    3a7c:	80 93 6e 03 	sts	0x036E, r24
				action_space[action_counter++]=2;
    3a80:	20 91 6e 03 	lds	r18, 0x036E
    3a84:	30 91 6f 03 	lds	r19, 0x036F
    3a88:	c9 01       	movw	r24, r18
    3a8a:	88 0f       	add	r24, r24
    3a8c:	99 1f       	adc	r25, r25
    3a8e:	fc 01       	movw	r30, r24
    3a90:	e0 59       	subi	r30, 0x90	; 144
    3a92:	fc 4f       	sbci	r31, 0xFC	; 252
    3a94:	82 e0       	ldi	r24, 0x02	; 2
    3a96:	90 e0       	ldi	r25, 0x00	; 0
    3a98:	91 83       	std	Z+1, r25	; 0x01
    3a9a:	80 83       	st	Z, r24
    3a9c:	c9 01       	movw	r24, r18
    3a9e:	01 96       	adiw	r24, 0x01	; 1
    3aa0:	90 93 6f 03 	sts	0x036F, r25
    3aa4:	80 93 6e 03 	sts	0x036E, r24

				action_space[action_counter++]=6;				
    3aa8:	20 91 6e 03 	lds	r18, 0x036E
    3aac:	30 91 6f 03 	lds	r19, 0x036F
    3ab0:	c9 01       	movw	r24, r18
    3ab2:	88 0f       	add	r24, r24
    3ab4:	99 1f       	adc	r25, r25
    3ab6:	fc 01       	movw	r30, r24
    3ab8:	e0 59       	subi	r30, 0x90	; 144
    3aba:	fc 4f       	sbci	r31, 0xFC	; 252
    3abc:	86 e0       	ldi	r24, 0x06	; 6
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	91 83       	std	Z+1, r25	; 0x01
    3ac2:	80 83       	st	Z, r24
    3ac4:	c9 01       	movw	r24, r18
    3ac6:	01 96       	adiw	r24, 0x01	; 1
    3ac8:	90 93 6f 03 	sts	0x036F, r25
    3acc:	80 93 6e 03 	sts	0x036E, r24
			}
		}
	}
	if(from==dispatch_point)
    3ad0:	20 91 02 02 	lds	r18, 0x0202
    3ad4:	30 91 03 02 	lds	r19, 0x0203
    3ad8:	89 81       	ldd	r24, Y+1	; 0x01
    3ada:	9a 81       	ldd	r25, Y+2	; 0x02
    3adc:	82 17       	cp	r24, r18
    3ade:	93 07       	cpc	r25, r19
    3ae0:	09 f0       	breq	.+2      	; 0x3ae4 <move+0x578>
    3ae2:	5f c0       	rjmp	.+190    	; 0x3ba2 <move+0x636>
	{
		if(dispatch_point==10)
    3ae4:	80 91 02 02 	lds	r24, 0x0202
    3ae8:	90 91 03 02 	lds	r25, 0x0203
    3aec:	8a 30       	cpi	r24, 0x0A	; 10
    3aee:	91 05       	cpc	r25, r1
    3af0:	49 f5       	brne	.+82     	; 0x3b44 <move+0x5d8>
		{
			action_space[action_counter++]=4;
    3af2:	20 91 6e 03 	lds	r18, 0x036E
    3af6:	30 91 6f 03 	lds	r19, 0x036F
    3afa:	c9 01       	movw	r24, r18
    3afc:	88 0f       	add	r24, r24
    3afe:	99 1f       	adc	r25, r25
    3b00:	fc 01       	movw	r30, r24
    3b02:	e0 59       	subi	r30, 0x90	; 144
    3b04:	fc 4f       	sbci	r31, 0xFC	; 252
    3b06:	84 e0       	ldi	r24, 0x04	; 4
    3b08:	90 e0       	ldi	r25, 0x00	; 0
    3b0a:	91 83       	std	Z+1, r25	; 0x01
    3b0c:	80 83       	st	Z, r24
    3b0e:	c9 01       	movw	r24, r18
    3b10:	01 96       	adiw	r24, 0x01	; 1
    3b12:	90 93 6f 03 	sts	0x036F, r25
    3b16:	80 93 6e 03 	sts	0x036E, r24
			action_space[action_counter++]=1;
    3b1a:	20 91 6e 03 	lds	r18, 0x036E
    3b1e:	30 91 6f 03 	lds	r19, 0x036F
    3b22:	c9 01       	movw	r24, r18
    3b24:	88 0f       	add	r24, r24
    3b26:	99 1f       	adc	r25, r25
    3b28:	fc 01       	movw	r30, r24
    3b2a:	e0 59       	subi	r30, 0x90	; 144
    3b2c:	fc 4f       	sbci	r31, 0xFC	; 252
    3b2e:	81 e0       	ldi	r24, 0x01	; 1
    3b30:	90 e0       	ldi	r25, 0x00	; 0
    3b32:	91 83       	std	Z+1, r25	; 0x01
    3b34:	80 83       	st	Z, r24
    3b36:	c9 01       	movw	r24, r18
    3b38:	01 96       	adiw	r24, 0x01	; 1
    3b3a:	90 93 6f 03 	sts	0x036F, r25
    3b3e:	80 93 6e 03 	sts	0x036E, r24
    3b42:	2f c0       	rjmp	.+94     	; 0x3ba2 <move+0x636>
		}
		
		else if(dispatch_point==11)
    3b44:	80 91 02 02 	lds	r24, 0x0202
    3b48:	90 91 03 02 	lds	r25, 0x0203
    3b4c:	8b 30       	cpi	r24, 0x0B	; 11
    3b4e:	91 05       	cpc	r25, r1
    3b50:	41 f5       	brne	.+80     	; 0x3ba2 <move+0x636>
		{
			action_space[action_counter++]=4;
    3b52:	20 91 6e 03 	lds	r18, 0x036E
    3b56:	30 91 6f 03 	lds	r19, 0x036F
    3b5a:	c9 01       	movw	r24, r18
    3b5c:	88 0f       	add	r24, r24
    3b5e:	99 1f       	adc	r25, r25
    3b60:	fc 01       	movw	r30, r24
    3b62:	e0 59       	subi	r30, 0x90	; 144
    3b64:	fc 4f       	sbci	r31, 0xFC	; 252
    3b66:	84 e0       	ldi	r24, 0x04	; 4
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	91 83       	std	Z+1, r25	; 0x01
    3b6c:	80 83       	st	Z, r24
    3b6e:	c9 01       	movw	r24, r18
    3b70:	01 96       	adiw	r24, 0x01	; 1
    3b72:	90 93 6f 03 	sts	0x036F, r25
    3b76:	80 93 6e 03 	sts	0x036E, r24
			action_space[action_counter++]=3;
    3b7a:	20 91 6e 03 	lds	r18, 0x036E
    3b7e:	30 91 6f 03 	lds	r19, 0x036F
    3b82:	c9 01       	movw	r24, r18
    3b84:	88 0f       	add	r24, r24
    3b86:	99 1f       	adc	r25, r25
    3b88:	fc 01       	movw	r30, r24
    3b8a:	e0 59       	subi	r30, 0x90	; 144
    3b8c:	fc 4f       	sbci	r31, 0xFC	; 252
    3b8e:	83 e0       	ldi	r24, 0x03	; 3
    3b90:	90 e0       	ldi	r25, 0x00	; 0
    3b92:	91 83       	std	Z+1, r25	; 0x01
    3b94:	80 83       	st	Z, r24
    3b96:	c9 01       	movw	r24, r18
    3b98:	01 96       	adiw	r24, 0x01	; 1
    3b9a:	90 93 6f 03 	sts	0x036F, r25
    3b9e:	80 93 6e 03 	sts	0x036E, r24
		}

	}

}
    3ba2:	0f 90       	pop	r0
    3ba4:	0f 90       	pop	r0
    3ba6:	0f 90       	pop	r0
    3ba8:	0f 90       	pop	r0
    3baa:	cf 91       	pop	r28
    3bac:	df 91       	pop	r29
    3bae:	08 95       	ret

00003bb0 <follow_path>:
void follow_path()
{
    3bb0:	df 93       	push	r29
    3bb2:	cf 93       	push	r28
    3bb4:	00 d0       	rcall	.+0      	; 0x3bb6 <follow_path+0x6>
    3bb6:	0f 92       	push	r0
    3bb8:	cd b7       	in	r28, 0x3d	; 61
    3bba:	de b7       	in	r29, 0x3e	; 62
	unsigned char Left_white_line,Center_white_line,Right_white_line;
	unsigned char th=40;
    3bbc:	88 e2       	ldi	r24, 0x28	; 40
    3bbe:	89 83       	std	Y+1, r24	; 0x01
	forward();
    3bc0:	0e 94 68 12 	call	0x24d0	; 0x24d0 <forward>
	while(1)
	{
		Left_white_line = adc_convert(3);	//Getting data of Left WL Sensor
    3bc4:	83 e0       	ldi	r24, 0x03	; 3
    3bc6:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <adc_convert>
    3bca:	8c 83       	std	Y+4, r24	; 0x04
		Center_white_line = adc_convert(2);	//Getting data of Center WL Sensor
    3bcc:	82 e0       	ldi	r24, 0x02	; 2
    3bce:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <adc_convert>
    3bd2:	8b 83       	std	Y+3, r24	; 0x03
		Right_white_line = adc_convert(1);	//Getting data of Right WL Sensor
    3bd4:	81 e0       	ldi	r24, 0x01	; 1
    3bd6:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <adc_convert>
    3bda:	8a 83       	std	Y+2, r24	; 0x02

		//flag=0;

		print_sensor(2,1,3);	//Prints value of White Line Sensor1
    3bdc:	82 e0       	ldi	r24, 0x02	; 2
    3bde:	61 e0       	ldi	r22, 0x01	; 1
    3be0:	43 e0       	ldi	r20, 0x03	; 3
    3be2:	0e 94 49 11 	call	0x2292	; 0x2292 <print_sensor>
		print_sensor(2,5,2);	//Prints Value of White Line Sensor2
    3be6:	82 e0       	ldi	r24, 0x02	; 2
    3be8:	65 e0       	ldi	r22, 0x05	; 5
    3bea:	42 e0       	ldi	r20, 0x02	; 2
    3bec:	0e 94 49 11 	call	0x2292	; 0x2292 <print_sensor>
		print_sensor(2,9,1);	//Prints Value of White Line Sensor3
    3bf0:	82 e0       	ldi	r24, 0x02	; 2
    3bf2:	69 e0       	ldi	r22, 0x09	; 9
    3bf4:	41 e0       	ldi	r20, 0x01	; 1
    3bf6:	0e 94 49 11 	call	0x2292	; 0x2292 <print_sensor>
		
		

		if(Left_white_line<th && Center_white_line<th && Right_white_line<th)  //www
    3bfa:	9c 81       	ldd	r25, Y+4	; 0x04
    3bfc:	89 81       	ldd	r24, Y+1	; 0x01
    3bfe:	98 17       	cp	r25, r24
    3c00:	70 f4       	brcc	.+28     	; 0x3c1e <follow_path+0x6e>
    3c02:	9b 81       	ldd	r25, Y+3	; 0x03
    3c04:	89 81       	ldd	r24, Y+1	; 0x01
    3c06:	98 17       	cp	r25, r24
    3c08:	50 f4       	brcc	.+20     	; 0x3c1e <follow_path+0x6e>
    3c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c0c:	89 81       	ldd	r24, Y+1	; 0x01
    3c0e:	98 17       	cp	r25, r24
    3c10:	30 f4       	brcc	.+12     	; 0x3c1e <follow_path+0x6e>
		{
			velocity(150,150);//forward
    3c12:	86 e9       	ldi	r24, 0x96	; 150
    3c14:	66 e9       	ldi	r22, 0x96	; 150
    3c16:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <velocity>
			forward();
    3c1a:	0e 94 68 12 	call	0x24d0	; 0x24d0 <forward>
		}

		if(Left_white_line<th && Center_white_line<th && Right_white_line>th)  //wwb -- left
    3c1e:	9c 81       	ldd	r25, Y+4	; 0x04
    3c20:	89 81       	ldd	r24, Y+1	; 0x01
    3c22:	98 17       	cp	r25, r24
    3c24:	70 f4       	brcc	.+28     	; 0x3c42 <follow_path+0x92>
    3c26:	9b 81       	ldd	r25, Y+3	; 0x03
    3c28:	89 81       	ldd	r24, Y+1	; 0x01
    3c2a:	98 17       	cp	r25, r24
    3c2c:	50 f4       	brcc	.+20     	; 0x3c42 <follow_path+0x92>
    3c2e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c30:	89 81       	ldd	r24, Y+1	; 0x01
    3c32:	89 17       	cp	r24, r25
    3c34:	30 f4       	brcc	.+12     	; 0x3c42 <follow_path+0x92>
		{
			//velocity(180,220);//legt turn
			rot_right();
    3c36:	0e 94 90 12 	call	0x2520	; 0x2520 <rot_right>
			velocity(150,150);
    3c3a:	86 e9       	ldi	r24, 0x96	; 150
    3c3c:	66 e9       	ldi	r22, 0x96	; 150
    3c3e:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <velocity>
			
		}

		if(Left_white_line<th && Center_white_line>th && Right_white_line<th)  //wbw -- valid
    3c42:	9c 81       	ldd	r25, Y+4	; 0x04
    3c44:	89 81       	ldd	r24, Y+1	; 0x01
    3c46:	98 17       	cp	r25, r24
    3c48:	70 f4       	brcc	.+28     	; 0x3c66 <follow_path+0xb6>
    3c4a:	9b 81       	ldd	r25, Y+3	; 0x03
    3c4c:	89 81       	ldd	r24, Y+1	; 0x01
    3c4e:	89 17       	cp	r24, r25
    3c50:	50 f4       	brcc	.+20     	; 0x3c66 <follow_path+0xb6>
    3c52:	9a 81       	ldd	r25, Y+2	; 0x02
    3c54:	89 81       	ldd	r24, Y+1	; 0x01
    3c56:	98 17       	cp	r25, r24
    3c58:	30 f4       	brcc	.+12     	; 0x3c66 <follow_path+0xb6>
		{
			velocity(150,150);//forward
    3c5a:	86 e9       	ldi	r24, 0x96	; 150
    3c5c:	66 e9       	ldi	r22, 0x96	; 150
    3c5e:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <velocity>
			forward();
    3c62:	0e 94 68 12 	call	0x24d0	; 0x24d0 <forward>

		}

		if(Left_white_line<th && Center_white_line>th && Right_white_line>th)  //wbb -- more left
    3c66:	9c 81       	ldd	r25, Y+4	; 0x04
    3c68:	89 81       	ldd	r24, Y+1	; 0x01
    3c6a:	98 17       	cp	r25, r24
    3c6c:	70 f4       	brcc	.+28     	; 0x3c8a <follow_path+0xda>
    3c6e:	9b 81       	ldd	r25, Y+3	; 0x03
    3c70:	89 81       	ldd	r24, Y+1	; 0x01
    3c72:	89 17       	cp	r24, r25
    3c74:	50 f4       	brcc	.+20     	; 0x3c8a <follow_path+0xda>
    3c76:	9a 81       	ldd	r25, Y+2	; 0x02
    3c78:	89 81       	ldd	r24, Y+1	; 0x01
    3c7a:	89 17       	cp	r24, r25
    3c7c:	30 f4       	brcc	.+12     	; 0x3c8a <follow_path+0xda>
		{
		//	velocity(175,220);
			//forward();
			//velocity(120,0);
			rot_right();
    3c7e:	0e 94 90 12 	call	0x2520	; 0x2520 <rot_right>
			velocity(150,150);
    3c82:	86 e9       	ldi	r24, 0x96	; 150
    3c84:	66 e9       	ldi	r22, 0x96	; 150
    3c86:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <velocity>
		}

		if(Left_white_line>th && Center_white_line<th && Right_white_line<th)  //bww -- right
    3c8a:	9c 81       	ldd	r25, Y+4	; 0x04
    3c8c:	89 81       	ldd	r24, Y+1	; 0x01
    3c8e:	89 17       	cp	r24, r25
    3c90:	70 f4       	brcc	.+28     	; 0x3cae <follow_path+0xfe>
    3c92:	9b 81       	ldd	r25, Y+3	; 0x03
    3c94:	89 81       	ldd	r24, Y+1	; 0x01
    3c96:	98 17       	cp	r25, r24
    3c98:	50 f4       	brcc	.+20     	; 0x3cae <follow_path+0xfe>
    3c9a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c9c:	89 81       	ldd	r24, Y+1	; 0x01
    3c9e:	98 17       	cp	r25, r24
    3ca0:	30 f4       	brcc	.+12     	; 0x3cae <follow_path+0xfe>
		{
		//	velocity(120,80);
			rot_left();
    3ca2:	0e 94 86 12 	call	0x250c	; 0x250c <rot_left>
			velocity(150,150);
    3ca6:	86 e9       	ldi	r24, 0x96	; 150
    3ca8:	66 e9       	ldi	r22, 0x96	; 150
    3caa:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <velocity>
		{
		//	velocity(220,220);
			forward();
		}*/

		if(Left_white_line>th && Center_white_line>th && Right_white_line<th)  //bbw -- more right
    3cae:	9c 81       	ldd	r25, Y+4	; 0x04
    3cb0:	89 81       	ldd	r24, Y+1	; 0x01
    3cb2:	89 17       	cp	r24, r25
    3cb4:	70 f4       	brcc	.+28     	; 0x3cd2 <follow_path+0x122>
    3cb6:	9b 81       	ldd	r25, Y+3	; 0x03
    3cb8:	89 81       	ldd	r24, Y+1	; 0x01
    3cba:	89 17       	cp	r24, r25
    3cbc:	50 f4       	brcc	.+20     	; 0x3cd2 <follow_path+0x122>
    3cbe:	9a 81       	ldd	r25, Y+2	; 0x02
    3cc0:	89 81       	ldd	r24, Y+1	; 0x01
    3cc2:	98 17       	cp	r25, r24
    3cc4:	30 f4       	brcc	.+12     	; 0x3cd2 <follow_path+0x122>
		{
			//forward();
			//velocity(0,120);
			//rot_right();
			rot_left();
    3cc6:	0e 94 86 12 	call	0x250c	; 0x250c <rot_left>
			velocity(150,150);
    3cca:	86 e9       	ldi	r24, 0x96	; 150
    3ccc:	66 e9       	ldi	r22, 0x96	; 150
    3cce:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <velocity>
			
		}

		if(Left_white_line>th && Center_white_line>th && Right_white_line>th)  //bbb
    3cd2:	9c 81       	ldd	r25, Y+4	; 0x04
    3cd4:	89 81       	ldd	r24, Y+1	; 0x01
    3cd6:	89 17       	cp	r24, r25
    3cd8:	08 f0       	brcs	.+2      	; 0x3cdc <follow_path+0x12c>
    3cda:	74 cf       	rjmp	.-280    	; 0x3bc4 <follow_path+0x14>
    3cdc:	9b 81       	ldd	r25, Y+3	; 0x03
    3cde:	89 81       	ldd	r24, Y+1	; 0x01
    3ce0:	89 17       	cp	r24, r25
    3ce2:	08 f0       	brcs	.+2      	; 0x3ce6 <follow_path+0x136>
    3ce4:	6f cf       	rjmp	.-290    	; 0x3bc4 <follow_path+0x14>
    3ce6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ce8:	89 81       	ldd	r24, Y+1	; 0x01
    3cea:	89 17       	cp	r24, r25
    3cec:	08 f0       	brcs	.+2      	; 0x3cf0 <follow_path+0x140>
    3cee:	6a cf       	rjmp	.-300    	; 0x3bc4 <follow_path+0x14>
		{
			stop();
    3cf0:	0e 94 72 12 	call	0x24e4	; 0x24e4 <stop>
			//_delay_ms(1000);
			//velocity(200,200);
			//while(Left_white_line>40 && Center_white_line>40 && Right_white_line>40);
			distance_mm('f',50);
    3cf4:	86 e6       	ldi	r24, 0x66	; 102
    3cf6:	62 e3       	ldi	r22, 0x32	; 50
    3cf8:	70 e0       	ldi	r23, 0x00	; 0
    3cfa:	0e 94 a3 10 	call	0x2146	; 0x2146 <distance_mm>
			buzzer_on(500);
    3cfe:	84 ef       	ldi	r24, 0xF4	; 244
    3d00:	91 e0       	ldi	r25, 0x01	; 1
    3d02:	0e 94 86 11 	call	0x230c	; 0x230c <buzzer_on>
			//velocity(0,0);
			stop();
    3d06:	0e 94 72 12 	call	0x24e4	; 0x24e4 <stop>
		if(Center_white_line>40 && Left_white_line>40 && Right_white_line>40)
		{
			stop();
			velocity(0,0);
		} */
	}
    3d0a:	0f 90       	pop	r0
    3d0c:	0f 90       	pop	r0
    3d0e:	0f 90       	pop	r0
    3d10:	0f 90       	pop	r0
    3d12:	cf 91       	pop	r28
    3d14:	df 91       	pop	r29
    3d16:	08 95       	ret

00003d18 <__fixunssfsi>:
    3d18:	ef 92       	push	r14
    3d1a:	ff 92       	push	r15
    3d1c:	0f 93       	push	r16
    3d1e:	1f 93       	push	r17
    3d20:	7b 01       	movw	r14, r22
    3d22:	8c 01       	movw	r16, r24
    3d24:	20 e0       	ldi	r18, 0x00	; 0
    3d26:	30 e0       	ldi	r19, 0x00	; 0
    3d28:	40 e0       	ldi	r20, 0x00	; 0
    3d2a:	5f e4       	ldi	r21, 0x4F	; 79
    3d2c:	0e 94 38 22 	call	0x4470	; 0x4470 <__gesf2>
    3d30:	88 23       	and	r24, r24
    3d32:	8c f0       	brlt	.+34     	; 0x3d56 <__fixunssfsi+0x3e>
    3d34:	c8 01       	movw	r24, r16
    3d36:	b7 01       	movw	r22, r14
    3d38:	20 e0       	ldi	r18, 0x00	; 0
    3d3a:	30 e0       	ldi	r19, 0x00	; 0
    3d3c:	40 e0       	ldi	r20, 0x00	; 0
    3d3e:	5f e4       	ldi	r21, 0x4F	; 79
    3d40:	0e 94 04 20 	call	0x4008	; 0x4008 <__subsf3>
    3d44:	0e 94 98 22 	call	0x4530	; 0x4530 <__fixsfsi>
    3d48:	9b 01       	movw	r18, r22
    3d4a:	ac 01       	movw	r20, r24
    3d4c:	20 50       	subi	r18, 0x00	; 0
    3d4e:	30 40       	sbci	r19, 0x00	; 0
    3d50:	40 40       	sbci	r20, 0x00	; 0
    3d52:	50 48       	sbci	r21, 0x80	; 128
    3d54:	06 c0       	rjmp	.+12     	; 0x3d62 <__fixunssfsi+0x4a>
    3d56:	c8 01       	movw	r24, r16
    3d58:	b7 01       	movw	r22, r14
    3d5a:	0e 94 98 22 	call	0x4530	; 0x4530 <__fixsfsi>
    3d5e:	9b 01       	movw	r18, r22
    3d60:	ac 01       	movw	r20, r24
    3d62:	b9 01       	movw	r22, r18
    3d64:	ca 01       	movw	r24, r20
    3d66:	1f 91       	pop	r17
    3d68:	0f 91       	pop	r16
    3d6a:	ff 90       	pop	r15
    3d6c:	ef 90       	pop	r14
    3d6e:	08 95       	ret

00003d70 <_fpadd_parts>:
    3d70:	a0 e0       	ldi	r26, 0x00	; 0
    3d72:	b0 e0       	ldi	r27, 0x00	; 0
    3d74:	ee eb       	ldi	r30, 0xBE	; 190
    3d76:	fe e1       	ldi	r31, 0x1E	; 30
    3d78:	0c 94 6e 25 	jmp	0x4adc	; 0x4adc <__prologue_saves__>
    3d7c:	dc 01       	movw	r26, r24
    3d7e:	2b 01       	movw	r4, r22
    3d80:	fa 01       	movw	r30, r20
    3d82:	9c 91       	ld	r25, X
    3d84:	92 30       	cpi	r25, 0x02	; 2
    3d86:	08 f4       	brcc	.+2      	; 0x3d8a <_fpadd_parts+0x1a>
    3d88:	39 c1       	rjmp	.+626    	; 0x3ffc <_fpadd_parts+0x28c>
    3d8a:	eb 01       	movw	r28, r22
    3d8c:	88 81       	ld	r24, Y
    3d8e:	82 30       	cpi	r24, 0x02	; 2
    3d90:	08 f4       	brcc	.+2      	; 0x3d94 <_fpadd_parts+0x24>
    3d92:	33 c1       	rjmp	.+614    	; 0x3ffa <_fpadd_parts+0x28a>
    3d94:	94 30       	cpi	r25, 0x04	; 4
    3d96:	69 f4       	brne	.+26     	; 0x3db2 <_fpadd_parts+0x42>
    3d98:	84 30       	cpi	r24, 0x04	; 4
    3d9a:	09 f0       	breq	.+2      	; 0x3d9e <_fpadd_parts+0x2e>
    3d9c:	2f c1       	rjmp	.+606    	; 0x3ffc <_fpadd_parts+0x28c>
    3d9e:	11 96       	adiw	r26, 0x01	; 1
    3da0:	9c 91       	ld	r25, X
    3da2:	11 97       	sbiw	r26, 0x01	; 1
    3da4:	89 81       	ldd	r24, Y+1	; 0x01
    3da6:	98 17       	cp	r25, r24
    3da8:	09 f4       	brne	.+2      	; 0x3dac <_fpadd_parts+0x3c>
    3daa:	28 c1       	rjmp	.+592    	; 0x3ffc <_fpadd_parts+0x28c>
    3dac:	a5 e6       	ldi	r26, 0x65	; 101
    3dae:	b2 e0       	ldi	r27, 0x02	; 2
    3db0:	25 c1       	rjmp	.+586    	; 0x3ffc <_fpadd_parts+0x28c>
    3db2:	84 30       	cpi	r24, 0x04	; 4
    3db4:	09 f4       	brne	.+2      	; 0x3db8 <_fpadd_parts+0x48>
    3db6:	21 c1       	rjmp	.+578    	; 0x3ffa <_fpadd_parts+0x28a>
    3db8:	82 30       	cpi	r24, 0x02	; 2
    3dba:	a9 f4       	brne	.+42     	; 0x3de6 <_fpadd_parts+0x76>
    3dbc:	92 30       	cpi	r25, 0x02	; 2
    3dbe:	09 f0       	breq	.+2      	; 0x3dc2 <_fpadd_parts+0x52>
    3dc0:	1d c1       	rjmp	.+570    	; 0x3ffc <_fpadd_parts+0x28c>
    3dc2:	9a 01       	movw	r18, r20
    3dc4:	ad 01       	movw	r20, r26
    3dc6:	88 e0       	ldi	r24, 0x08	; 8
    3dc8:	ea 01       	movw	r28, r20
    3dca:	09 90       	ld	r0, Y+
    3dcc:	ae 01       	movw	r20, r28
    3dce:	e9 01       	movw	r28, r18
    3dd0:	09 92       	st	Y+, r0
    3dd2:	9e 01       	movw	r18, r28
    3dd4:	81 50       	subi	r24, 0x01	; 1
    3dd6:	c1 f7       	brne	.-16     	; 0x3dc8 <_fpadd_parts+0x58>
    3dd8:	e2 01       	movw	r28, r4
    3dda:	89 81       	ldd	r24, Y+1	; 0x01
    3ddc:	11 96       	adiw	r26, 0x01	; 1
    3dde:	9c 91       	ld	r25, X
    3de0:	89 23       	and	r24, r25
    3de2:	81 83       	std	Z+1, r24	; 0x01
    3de4:	08 c1       	rjmp	.+528    	; 0x3ff6 <_fpadd_parts+0x286>
    3de6:	92 30       	cpi	r25, 0x02	; 2
    3de8:	09 f4       	brne	.+2      	; 0x3dec <_fpadd_parts+0x7c>
    3dea:	07 c1       	rjmp	.+526    	; 0x3ffa <_fpadd_parts+0x28a>
    3dec:	12 96       	adiw	r26, 0x02	; 2
    3dee:	2d 90       	ld	r2, X+
    3df0:	3c 90       	ld	r3, X
    3df2:	13 97       	sbiw	r26, 0x03	; 3
    3df4:	eb 01       	movw	r28, r22
    3df6:	8a 81       	ldd	r24, Y+2	; 0x02
    3df8:	9b 81       	ldd	r25, Y+3	; 0x03
    3dfa:	14 96       	adiw	r26, 0x04	; 4
    3dfc:	ad 90       	ld	r10, X+
    3dfe:	bd 90       	ld	r11, X+
    3e00:	cd 90       	ld	r12, X+
    3e02:	dc 90       	ld	r13, X
    3e04:	17 97       	sbiw	r26, 0x07	; 7
    3e06:	ec 80       	ldd	r14, Y+4	; 0x04
    3e08:	fd 80       	ldd	r15, Y+5	; 0x05
    3e0a:	0e 81       	ldd	r16, Y+6	; 0x06
    3e0c:	1f 81       	ldd	r17, Y+7	; 0x07
    3e0e:	91 01       	movw	r18, r2
    3e10:	28 1b       	sub	r18, r24
    3e12:	39 0b       	sbc	r19, r25
    3e14:	b9 01       	movw	r22, r18
    3e16:	37 ff       	sbrs	r19, 7
    3e18:	04 c0       	rjmp	.+8      	; 0x3e22 <_fpadd_parts+0xb2>
    3e1a:	66 27       	eor	r22, r22
    3e1c:	77 27       	eor	r23, r23
    3e1e:	62 1b       	sub	r22, r18
    3e20:	73 0b       	sbc	r23, r19
    3e22:	60 32       	cpi	r22, 0x20	; 32
    3e24:	71 05       	cpc	r23, r1
    3e26:	0c f0       	brlt	.+2      	; 0x3e2a <_fpadd_parts+0xba>
    3e28:	61 c0       	rjmp	.+194    	; 0x3eec <_fpadd_parts+0x17c>
    3e2a:	12 16       	cp	r1, r18
    3e2c:	13 06       	cpc	r1, r19
    3e2e:	6c f5       	brge	.+90     	; 0x3e8a <_fpadd_parts+0x11a>
    3e30:	37 01       	movw	r6, r14
    3e32:	48 01       	movw	r8, r16
    3e34:	06 2e       	mov	r0, r22
    3e36:	04 c0       	rjmp	.+8      	; 0x3e40 <_fpadd_parts+0xd0>
    3e38:	96 94       	lsr	r9
    3e3a:	87 94       	ror	r8
    3e3c:	77 94       	ror	r7
    3e3e:	67 94       	ror	r6
    3e40:	0a 94       	dec	r0
    3e42:	d2 f7       	brpl	.-12     	; 0x3e38 <_fpadd_parts+0xc8>
    3e44:	21 e0       	ldi	r18, 0x01	; 1
    3e46:	30 e0       	ldi	r19, 0x00	; 0
    3e48:	40 e0       	ldi	r20, 0x00	; 0
    3e4a:	50 e0       	ldi	r21, 0x00	; 0
    3e4c:	04 c0       	rjmp	.+8      	; 0x3e56 <_fpadd_parts+0xe6>
    3e4e:	22 0f       	add	r18, r18
    3e50:	33 1f       	adc	r19, r19
    3e52:	44 1f       	adc	r20, r20
    3e54:	55 1f       	adc	r21, r21
    3e56:	6a 95       	dec	r22
    3e58:	d2 f7       	brpl	.-12     	; 0x3e4e <_fpadd_parts+0xde>
    3e5a:	21 50       	subi	r18, 0x01	; 1
    3e5c:	30 40       	sbci	r19, 0x00	; 0
    3e5e:	40 40       	sbci	r20, 0x00	; 0
    3e60:	50 40       	sbci	r21, 0x00	; 0
    3e62:	2e 21       	and	r18, r14
    3e64:	3f 21       	and	r19, r15
    3e66:	40 23       	and	r20, r16
    3e68:	51 23       	and	r21, r17
    3e6a:	21 15       	cp	r18, r1
    3e6c:	31 05       	cpc	r19, r1
    3e6e:	41 05       	cpc	r20, r1
    3e70:	51 05       	cpc	r21, r1
    3e72:	21 f0       	breq	.+8      	; 0x3e7c <_fpadd_parts+0x10c>
    3e74:	21 e0       	ldi	r18, 0x01	; 1
    3e76:	30 e0       	ldi	r19, 0x00	; 0
    3e78:	40 e0       	ldi	r20, 0x00	; 0
    3e7a:	50 e0       	ldi	r21, 0x00	; 0
    3e7c:	79 01       	movw	r14, r18
    3e7e:	8a 01       	movw	r16, r20
    3e80:	e6 28       	or	r14, r6
    3e82:	f7 28       	or	r15, r7
    3e84:	08 29       	or	r16, r8
    3e86:	19 29       	or	r17, r9
    3e88:	3c c0       	rjmp	.+120    	; 0x3f02 <_fpadd_parts+0x192>
    3e8a:	23 2b       	or	r18, r19
    3e8c:	d1 f1       	breq	.+116    	; 0x3f02 <_fpadd_parts+0x192>
    3e8e:	26 0e       	add	r2, r22
    3e90:	37 1e       	adc	r3, r23
    3e92:	35 01       	movw	r6, r10
    3e94:	46 01       	movw	r8, r12
    3e96:	06 2e       	mov	r0, r22
    3e98:	04 c0       	rjmp	.+8      	; 0x3ea2 <_fpadd_parts+0x132>
    3e9a:	96 94       	lsr	r9
    3e9c:	87 94       	ror	r8
    3e9e:	77 94       	ror	r7
    3ea0:	67 94       	ror	r6
    3ea2:	0a 94       	dec	r0
    3ea4:	d2 f7       	brpl	.-12     	; 0x3e9a <_fpadd_parts+0x12a>
    3ea6:	21 e0       	ldi	r18, 0x01	; 1
    3ea8:	30 e0       	ldi	r19, 0x00	; 0
    3eaa:	40 e0       	ldi	r20, 0x00	; 0
    3eac:	50 e0       	ldi	r21, 0x00	; 0
    3eae:	04 c0       	rjmp	.+8      	; 0x3eb8 <_fpadd_parts+0x148>
    3eb0:	22 0f       	add	r18, r18
    3eb2:	33 1f       	adc	r19, r19
    3eb4:	44 1f       	adc	r20, r20
    3eb6:	55 1f       	adc	r21, r21
    3eb8:	6a 95       	dec	r22
    3eba:	d2 f7       	brpl	.-12     	; 0x3eb0 <_fpadd_parts+0x140>
    3ebc:	21 50       	subi	r18, 0x01	; 1
    3ebe:	30 40       	sbci	r19, 0x00	; 0
    3ec0:	40 40       	sbci	r20, 0x00	; 0
    3ec2:	50 40       	sbci	r21, 0x00	; 0
    3ec4:	2a 21       	and	r18, r10
    3ec6:	3b 21       	and	r19, r11
    3ec8:	4c 21       	and	r20, r12
    3eca:	5d 21       	and	r21, r13
    3ecc:	21 15       	cp	r18, r1
    3ece:	31 05       	cpc	r19, r1
    3ed0:	41 05       	cpc	r20, r1
    3ed2:	51 05       	cpc	r21, r1
    3ed4:	21 f0       	breq	.+8      	; 0x3ede <_fpadd_parts+0x16e>
    3ed6:	21 e0       	ldi	r18, 0x01	; 1
    3ed8:	30 e0       	ldi	r19, 0x00	; 0
    3eda:	40 e0       	ldi	r20, 0x00	; 0
    3edc:	50 e0       	ldi	r21, 0x00	; 0
    3ede:	59 01       	movw	r10, r18
    3ee0:	6a 01       	movw	r12, r20
    3ee2:	a6 28       	or	r10, r6
    3ee4:	b7 28       	or	r11, r7
    3ee6:	c8 28       	or	r12, r8
    3ee8:	d9 28       	or	r13, r9
    3eea:	0b c0       	rjmp	.+22     	; 0x3f02 <_fpadd_parts+0x192>
    3eec:	82 15       	cp	r24, r2
    3eee:	93 05       	cpc	r25, r3
    3ef0:	2c f0       	brlt	.+10     	; 0x3efc <_fpadd_parts+0x18c>
    3ef2:	1c 01       	movw	r2, r24
    3ef4:	aa 24       	eor	r10, r10
    3ef6:	bb 24       	eor	r11, r11
    3ef8:	65 01       	movw	r12, r10
    3efa:	03 c0       	rjmp	.+6      	; 0x3f02 <_fpadd_parts+0x192>
    3efc:	ee 24       	eor	r14, r14
    3efe:	ff 24       	eor	r15, r15
    3f00:	87 01       	movw	r16, r14
    3f02:	11 96       	adiw	r26, 0x01	; 1
    3f04:	9c 91       	ld	r25, X
    3f06:	d2 01       	movw	r26, r4
    3f08:	11 96       	adiw	r26, 0x01	; 1
    3f0a:	8c 91       	ld	r24, X
    3f0c:	98 17       	cp	r25, r24
    3f0e:	09 f4       	brne	.+2      	; 0x3f12 <_fpadd_parts+0x1a2>
    3f10:	45 c0       	rjmp	.+138    	; 0x3f9c <_fpadd_parts+0x22c>
    3f12:	99 23       	and	r25, r25
    3f14:	39 f0       	breq	.+14     	; 0x3f24 <_fpadd_parts+0x1b4>
    3f16:	a8 01       	movw	r20, r16
    3f18:	97 01       	movw	r18, r14
    3f1a:	2a 19       	sub	r18, r10
    3f1c:	3b 09       	sbc	r19, r11
    3f1e:	4c 09       	sbc	r20, r12
    3f20:	5d 09       	sbc	r21, r13
    3f22:	06 c0       	rjmp	.+12     	; 0x3f30 <_fpadd_parts+0x1c0>
    3f24:	a6 01       	movw	r20, r12
    3f26:	95 01       	movw	r18, r10
    3f28:	2e 19       	sub	r18, r14
    3f2a:	3f 09       	sbc	r19, r15
    3f2c:	40 0b       	sbc	r20, r16
    3f2e:	51 0b       	sbc	r21, r17
    3f30:	57 fd       	sbrc	r21, 7
    3f32:	08 c0       	rjmp	.+16     	; 0x3f44 <_fpadd_parts+0x1d4>
    3f34:	11 82       	std	Z+1, r1	; 0x01
    3f36:	33 82       	std	Z+3, r3	; 0x03
    3f38:	22 82       	std	Z+2, r2	; 0x02
    3f3a:	24 83       	std	Z+4, r18	; 0x04
    3f3c:	35 83       	std	Z+5, r19	; 0x05
    3f3e:	46 83       	std	Z+6, r20	; 0x06
    3f40:	57 83       	std	Z+7, r21	; 0x07
    3f42:	1d c0       	rjmp	.+58     	; 0x3f7e <_fpadd_parts+0x20e>
    3f44:	81 e0       	ldi	r24, 0x01	; 1
    3f46:	81 83       	std	Z+1, r24	; 0x01
    3f48:	33 82       	std	Z+3, r3	; 0x03
    3f4a:	22 82       	std	Z+2, r2	; 0x02
    3f4c:	88 27       	eor	r24, r24
    3f4e:	99 27       	eor	r25, r25
    3f50:	dc 01       	movw	r26, r24
    3f52:	82 1b       	sub	r24, r18
    3f54:	93 0b       	sbc	r25, r19
    3f56:	a4 0b       	sbc	r26, r20
    3f58:	b5 0b       	sbc	r27, r21
    3f5a:	84 83       	std	Z+4, r24	; 0x04
    3f5c:	95 83       	std	Z+5, r25	; 0x05
    3f5e:	a6 83       	std	Z+6, r26	; 0x06
    3f60:	b7 83       	std	Z+7, r27	; 0x07
    3f62:	0d c0       	rjmp	.+26     	; 0x3f7e <_fpadd_parts+0x20e>
    3f64:	22 0f       	add	r18, r18
    3f66:	33 1f       	adc	r19, r19
    3f68:	44 1f       	adc	r20, r20
    3f6a:	55 1f       	adc	r21, r21
    3f6c:	24 83       	std	Z+4, r18	; 0x04
    3f6e:	35 83       	std	Z+5, r19	; 0x05
    3f70:	46 83       	std	Z+6, r20	; 0x06
    3f72:	57 83       	std	Z+7, r21	; 0x07
    3f74:	82 81       	ldd	r24, Z+2	; 0x02
    3f76:	93 81       	ldd	r25, Z+3	; 0x03
    3f78:	01 97       	sbiw	r24, 0x01	; 1
    3f7a:	93 83       	std	Z+3, r25	; 0x03
    3f7c:	82 83       	std	Z+2, r24	; 0x02
    3f7e:	24 81       	ldd	r18, Z+4	; 0x04
    3f80:	35 81       	ldd	r19, Z+5	; 0x05
    3f82:	46 81       	ldd	r20, Z+6	; 0x06
    3f84:	57 81       	ldd	r21, Z+7	; 0x07
    3f86:	da 01       	movw	r26, r20
    3f88:	c9 01       	movw	r24, r18
    3f8a:	01 97       	sbiw	r24, 0x01	; 1
    3f8c:	a1 09       	sbc	r26, r1
    3f8e:	b1 09       	sbc	r27, r1
    3f90:	8f 5f       	subi	r24, 0xFF	; 255
    3f92:	9f 4f       	sbci	r25, 0xFF	; 255
    3f94:	af 4f       	sbci	r26, 0xFF	; 255
    3f96:	bf 43       	sbci	r27, 0x3F	; 63
    3f98:	28 f3       	brcs	.-54     	; 0x3f64 <_fpadd_parts+0x1f4>
    3f9a:	0b c0       	rjmp	.+22     	; 0x3fb2 <_fpadd_parts+0x242>
    3f9c:	91 83       	std	Z+1, r25	; 0x01
    3f9e:	33 82       	std	Z+3, r3	; 0x03
    3fa0:	22 82       	std	Z+2, r2	; 0x02
    3fa2:	ea 0c       	add	r14, r10
    3fa4:	fb 1c       	adc	r15, r11
    3fa6:	0c 1d       	adc	r16, r12
    3fa8:	1d 1d       	adc	r17, r13
    3faa:	e4 82       	std	Z+4, r14	; 0x04
    3fac:	f5 82       	std	Z+5, r15	; 0x05
    3fae:	06 83       	std	Z+6, r16	; 0x06
    3fb0:	17 83       	std	Z+7, r17	; 0x07
    3fb2:	83 e0       	ldi	r24, 0x03	; 3
    3fb4:	80 83       	st	Z, r24
    3fb6:	24 81       	ldd	r18, Z+4	; 0x04
    3fb8:	35 81       	ldd	r19, Z+5	; 0x05
    3fba:	46 81       	ldd	r20, Z+6	; 0x06
    3fbc:	57 81       	ldd	r21, Z+7	; 0x07
    3fbe:	57 ff       	sbrs	r21, 7
    3fc0:	1a c0       	rjmp	.+52     	; 0x3ff6 <_fpadd_parts+0x286>
    3fc2:	c9 01       	movw	r24, r18
    3fc4:	aa 27       	eor	r26, r26
    3fc6:	97 fd       	sbrc	r25, 7
    3fc8:	a0 95       	com	r26
    3fca:	ba 2f       	mov	r27, r26
    3fcc:	81 70       	andi	r24, 0x01	; 1
    3fce:	90 70       	andi	r25, 0x00	; 0
    3fd0:	a0 70       	andi	r26, 0x00	; 0
    3fd2:	b0 70       	andi	r27, 0x00	; 0
    3fd4:	56 95       	lsr	r21
    3fd6:	47 95       	ror	r20
    3fd8:	37 95       	ror	r19
    3fda:	27 95       	ror	r18
    3fdc:	82 2b       	or	r24, r18
    3fde:	93 2b       	or	r25, r19
    3fe0:	a4 2b       	or	r26, r20
    3fe2:	b5 2b       	or	r27, r21
    3fe4:	84 83       	std	Z+4, r24	; 0x04
    3fe6:	95 83       	std	Z+5, r25	; 0x05
    3fe8:	a6 83       	std	Z+6, r26	; 0x06
    3fea:	b7 83       	std	Z+7, r27	; 0x07
    3fec:	82 81       	ldd	r24, Z+2	; 0x02
    3fee:	93 81       	ldd	r25, Z+3	; 0x03
    3ff0:	01 96       	adiw	r24, 0x01	; 1
    3ff2:	93 83       	std	Z+3, r25	; 0x03
    3ff4:	82 83       	std	Z+2, r24	; 0x02
    3ff6:	df 01       	movw	r26, r30
    3ff8:	01 c0       	rjmp	.+2      	; 0x3ffc <_fpadd_parts+0x28c>
    3ffa:	d2 01       	movw	r26, r4
    3ffc:	cd 01       	movw	r24, r26
    3ffe:	cd b7       	in	r28, 0x3d	; 61
    4000:	de b7       	in	r29, 0x3e	; 62
    4002:	e2 e1       	ldi	r30, 0x12	; 18
    4004:	0c 94 8a 25 	jmp	0x4b14	; 0x4b14 <__epilogue_restores__>

00004008 <__subsf3>:
    4008:	a0 e2       	ldi	r26, 0x20	; 32
    400a:	b0 e0       	ldi	r27, 0x00	; 0
    400c:	ea e0       	ldi	r30, 0x0A	; 10
    400e:	f0 e2       	ldi	r31, 0x20	; 32
    4010:	0c 94 7a 25 	jmp	0x4af4	; 0x4af4 <__prologue_saves__+0x18>
    4014:	69 83       	std	Y+1, r22	; 0x01
    4016:	7a 83       	std	Y+2, r23	; 0x02
    4018:	8b 83       	std	Y+3, r24	; 0x03
    401a:	9c 83       	std	Y+4, r25	; 0x04
    401c:	2d 83       	std	Y+5, r18	; 0x05
    401e:	3e 83       	std	Y+6, r19	; 0x06
    4020:	4f 83       	std	Y+7, r20	; 0x07
    4022:	58 87       	std	Y+8, r21	; 0x08
    4024:	e9 e0       	ldi	r30, 0x09	; 9
    4026:	ee 2e       	mov	r14, r30
    4028:	f1 2c       	mov	r15, r1
    402a:	ec 0e       	add	r14, r28
    402c:	fd 1e       	adc	r15, r29
    402e:	ce 01       	movw	r24, r28
    4030:	01 96       	adiw	r24, 0x01	; 1
    4032:	b7 01       	movw	r22, r14
    4034:	0e 94 89 24 	call	0x4912	; 0x4912 <__unpack_f>
    4038:	8e 01       	movw	r16, r28
    403a:	0f 5e       	subi	r16, 0xEF	; 239
    403c:	1f 4f       	sbci	r17, 0xFF	; 255
    403e:	ce 01       	movw	r24, r28
    4040:	05 96       	adiw	r24, 0x05	; 5
    4042:	b8 01       	movw	r22, r16
    4044:	0e 94 89 24 	call	0x4912	; 0x4912 <__unpack_f>
    4048:	8a 89       	ldd	r24, Y+18	; 0x12
    404a:	91 e0       	ldi	r25, 0x01	; 1
    404c:	89 27       	eor	r24, r25
    404e:	8a 8b       	std	Y+18, r24	; 0x12
    4050:	c7 01       	movw	r24, r14
    4052:	b8 01       	movw	r22, r16
    4054:	ae 01       	movw	r20, r28
    4056:	47 5e       	subi	r20, 0xE7	; 231
    4058:	5f 4f       	sbci	r21, 0xFF	; 255
    405a:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <_fpadd_parts>
    405e:	0e 94 b4 23 	call	0x4768	; 0x4768 <__pack_f>
    4062:	a0 96       	adiw	r28, 0x20	; 32
    4064:	e6 e0       	ldi	r30, 0x06	; 6
    4066:	0c 94 96 25 	jmp	0x4b2c	; 0x4b2c <__epilogue_restores__+0x18>

0000406a <__addsf3>:
    406a:	a0 e2       	ldi	r26, 0x20	; 32
    406c:	b0 e0       	ldi	r27, 0x00	; 0
    406e:	eb e3       	ldi	r30, 0x3B	; 59
    4070:	f0 e2       	ldi	r31, 0x20	; 32
    4072:	0c 94 7a 25 	jmp	0x4af4	; 0x4af4 <__prologue_saves__+0x18>
    4076:	69 83       	std	Y+1, r22	; 0x01
    4078:	7a 83       	std	Y+2, r23	; 0x02
    407a:	8b 83       	std	Y+3, r24	; 0x03
    407c:	9c 83       	std	Y+4, r25	; 0x04
    407e:	2d 83       	std	Y+5, r18	; 0x05
    4080:	3e 83       	std	Y+6, r19	; 0x06
    4082:	4f 83       	std	Y+7, r20	; 0x07
    4084:	58 87       	std	Y+8, r21	; 0x08
    4086:	f9 e0       	ldi	r31, 0x09	; 9
    4088:	ef 2e       	mov	r14, r31
    408a:	f1 2c       	mov	r15, r1
    408c:	ec 0e       	add	r14, r28
    408e:	fd 1e       	adc	r15, r29
    4090:	ce 01       	movw	r24, r28
    4092:	01 96       	adiw	r24, 0x01	; 1
    4094:	b7 01       	movw	r22, r14
    4096:	0e 94 89 24 	call	0x4912	; 0x4912 <__unpack_f>
    409a:	8e 01       	movw	r16, r28
    409c:	0f 5e       	subi	r16, 0xEF	; 239
    409e:	1f 4f       	sbci	r17, 0xFF	; 255
    40a0:	ce 01       	movw	r24, r28
    40a2:	05 96       	adiw	r24, 0x05	; 5
    40a4:	b8 01       	movw	r22, r16
    40a6:	0e 94 89 24 	call	0x4912	; 0x4912 <__unpack_f>
    40aa:	c7 01       	movw	r24, r14
    40ac:	b8 01       	movw	r22, r16
    40ae:	ae 01       	movw	r20, r28
    40b0:	47 5e       	subi	r20, 0xE7	; 231
    40b2:	5f 4f       	sbci	r21, 0xFF	; 255
    40b4:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <_fpadd_parts>
    40b8:	0e 94 b4 23 	call	0x4768	; 0x4768 <__pack_f>
    40bc:	a0 96       	adiw	r28, 0x20	; 32
    40be:	e6 e0       	ldi	r30, 0x06	; 6
    40c0:	0c 94 96 25 	jmp	0x4b2c	; 0x4b2c <__epilogue_restores__+0x18>

000040c4 <__mulsf3>:
    40c4:	a0 e2       	ldi	r26, 0x20	; 32
    40c6:	b0 e0       	ldi	r27, 0x00	; 0
    40c8:	e8 e6       	ldi	r30, 0x68	; 104
    40ca:	f0 e2       	ldi	r31, 0x20	; 32
    40cc:	0c 94 6e 25 	jmp	0x4adc	; 0x4adc <__prologue_saves__>
    40d0:	69 83       	std	Y+1, r22	; 0x01
    40d2:	7a 83       	std	Y+2, r23	; 0x02
    40d4:	8b 83       	std	Y+3, r24	; 0x03
    40d6:	9c 83       	std	Y+4, r25	; 0x04
    40d8:	2d 83       	std	Y+5, r18	; 0x05
    40da:	3e 83       	std	Y+6, r19	; 0x06
    40dc:	4f 83       	std	Y+7, r20	; 0x07
    40de:	58 87       	std	Y+8, r21	; 0x08
    40e0:	ce 01       	movw	r24, r28
    40e2:	01 96       	adiw	r24, 0x01	; 1
    40e4:	be 01       	movw	r22, r28
    40e6:	67 5f       	subi	r22, 0xF7	; 247
    40e8:	7f 4f       	sbci	r23, 0xFF	; 255
    40ea:	0e 94 89 24 	call	0x4912	; 0x4912 <__unpack_f>
    40ee:	ce 01       	movw	r24, r28
    40f0:	05 96       	adiw	r24, 0x05	; 5
    40f2:	be 01       	movw	r22, r28
    40f4:	6f 5e       	subi	r22, 0xEF	; 239
    40f6:	7f 4f       	sbci	r23, 0xFF	; 255
    40f8:	0e 94 89 24 	call	0x4912	; 0x4912 <__unpack_f>
    40fc:	99 85       	ldd	r25, Y+9	; 0x09
    40fe:	92 30       	cpi	r25, 0x02	; 2
    4100:	88 f0       	brcs	.+34     	; 0x4124 <__mulsf3+0x60>
    4102:	89 89       	ldd	r24, Y+17	; 0x11
    4104:	82 30       	cpi	r24, 0x02	; 2
    4106:	c8 f0       	brcs	.+50     	; 0x413a <__mulsf3+0x76>
    4108:	94 30       	cpi	r25, 0x04	; 4
    410a:	19 f4       	brne	.+6      	; 0x4112 <__mulsf3+0x4e>
    410c:	82 30       	cpi	r24, 0x02	; 2
    410e:	51 f4       	brne	.+20     	; 0x4124 <__mulsf3+0x60>
    4110:	04 c0       	rjmp	.+8      	; 0x411a <__mulsf3+0x56>
    4112:	84 30       	cpi	r24, 0x04	; 4
    4114:	29 f4       	brne	.+10     	; 0x4120 <__mulsf3+0x5c>
    4116:	92 30       	cpi	r25, 0x02	; 2
    4118:	81 f4       	brne	.+32     	; 0x413a <__mulsf3+0x76>
    411a:	85 e6       	ldi	r24, 0x65	; 101
    411c:	92 e0       	ldi	r25, 0x02	; 2
    411e:	c6 c0       	rjmp	.+396    	; 0x42ac <__mulsf3+0x1e8>
    4120:	92 30       	cpi	r25, 0x02	; 2
    4122:	49 f4       	brne	.+18     	; 0x4136 <__mulsf3+0x72>
    4124:	20 e0       	ldi	r18, 0x00	; 0
    4126:	9a 85       	ldd	r25, Y+10	; 0x0a
    4128:	8a 89       	ldd	r24, Y+18	; 0x12
    412a:	98 13       	cpse	r25, r24
    412c:	21 e0       	ldi	r18, 0x01	; 1
    412e:	2a 87       	std	Y+10, r18	; 0x0a
    4130:	ce 01       	movw	r24, r28
    4132:	09 96       	adiw	r24, 0x09	; 9
    4134:	bb c0       	rjmp	.+374    	; 0x42ac <__mulsf3+0x1e8>
    4136:	82 30       	cpi	r24, 0x02	; 2
    4138:	49 f4       	brne	.+18     	; 0x414c <__mulsf3+0x88>
    413a:	20 e0       	ldi	r18, 0x00	; 0
    413c:	9a 85       	ldd	r25, Y+10	; 0x0a
    413e:	8a 89       	ldd	r24, Y+18	; 0x12
    4140:	98 13       	cpse	r25, r24
    4142:	21 e0       	ldi	r18, 0x01	; 1
    4144:	2a 8b       	std	Y+18, r18	; 0x12
    4146:	ce 01       	movw	r24, r28
    4148:	41 96       	adiw	r24, 0x11	; 17
    414a:	b0 c0       	rjmp	.+352    	; 0x42ac <__mulsf3+0x1e8>
    414c:	2d 84       	ldd	r2, Y+13	; 0x0d
    414e:	3e 84       	ldd	r3, Y+14	; 0x0e
    4150:	4f 84       	ldd	r4, Y+15	; 0x0f
    4152:	58 88       	ldd	r5, Y+16	; 0x10
    4154:	6d 88       	ldd	r6, Y+21	; 0x15
    4156:	7e 88       	ldd	r7, Y+22	; 0x16
    4158:	8f 88       	ldd	r8, Y+23	; 0x17
    415a:	98 8c       	ldd	r9, Y+24	; 0x18
    415c:	ee 24       	eor	r14, r14
    415e:	ff 24       	eor	r15, r15
    4160:	87 01       	movw	r16, r14
    4162:	aa 24       	eor	r10, r10
    4164:	bb 24       	eor	r11, r11
    4166:	65 01       	movw	r12, r10
    4168:	40 e0       	ldi	r20, 0x00	; 0
    416a:	50 e0       	ldi	r21, 0x00	; 0
    416c:	60 e0       	ldi	r22, 0x00	; 0
    416e:	70 e0       	ldi	r23, 0x00	; 0
    4170:	e0 e0       	ldi	r30, 0x00	; 0
    4172:	f0 e0       	ldi	r31, 0x00	; 0
    4174:	c1 01       	movw	r24, r2
    4176:	81 70       	andi	r24, 0x01	; 1
    4178:	90 70       	andi	r25, 0x00	; 0
    417a:	89 2b       	or	r24, r25
    417c:	e9 f0       	breq	.+58     	; 0x41b8 <__mulsf3+0xf4>
    417e:	e6 0c       	add	r14, r6
    4180:	f7 1c       	adc	r15, r7
    4182:	08 1d       	adc	r16, r8
    4184:	19 1d       	adc	r17, r9
    4186:	9a 01       	movw	r18, r20
    4188:	ab 01       	movw	r20, r22
    418a:	2a 0d       	add	r18, r10
    418c:	3b 1d       	adc	r19, r11
    418e:	4c 1d       	adc	r20, r12
    4190:	5d 1d       	adc	r21, r13
    4192:	80 e0       	ldi	r24, 0x00	; 0
    4194:	90 e0       	ldi	r25, 0x00	; 0
    4196:	a0 e0       	ldi	r26, 0x00	; 0
    4198:	b0 e0       	ldi	r27, 0x00	; 0
    419a:	e6 14       	cp	r14, r6
    419c:	f7 04       	cpc	r15, r7
    419e:	08 05       	cpc	r16, r8
    41a0:	19 05       	cpc	r17, r9
    41a2:	20 f4       	brcc	.+8      	; 0x41ac <__mulsf3+0xe8>
    41a4:	81 e0       	ldi	r24, 0x01	; 1
    41a6:	90 e0       	ldi	r25, 0x00	; 0
    41a8:	a0 e0       	ldi	r26, 0x00	; 0
    41aa:	b0 e0       	ldi	r27, 0x00	; 0
    41ac:	ba 01       	movw	r22, r20
    41ae:	a9 01       	movw	r20, r18
    41b0:	48 0f       	add	r20, r24
    41b2:	59 1f       	adc	r21, r25
    41b4:	6a 1f       	adc	r22, r26
    41b6:	7b 1f       	adc	r23, r27
    41b8:	aa 0c       	add	r10, r10
    41ba:	bb 1c       	adc	r11, r11
    41bc:	cc 1c       	adc	r12, r12
    41be:	dd 1c       	adc	r13, r13
    41c0:	97 fe       	sbrs	r9, 7
    41c2:	08 c0       	rjmp	.+16     	; 0x41d4 <__mulsf3+0x110>
    41c4:	81 e0       	ldi	r24, 0x01	; 1
    41c6:	90 e0       	ldi	r25, 0x00	; 0
    41c8:	a0 e0       	ldi	r26, 0x00	; 0
    41ca:	b0 e0       	ldi	r27, 0x00	; 0
    41cc:	a8 2a       	or	r10, r24
    41ce:	b9 2a       	or	r11, r25
    41d0:	ca 2a       	or	r12, r26
    41d2:	db 2a       	or	r13, r27
    41d4:	31 96       	adiw	r30, 0x01	; 1
    41d6:	e0 32       	cpi	r30, 0x20	; 32
    41d8:	f1 05       	cpc	r31, r1
    41da:	49 f0       	breq	.+18     	; 0x41ee <__mulsf3+0x12a>
    41dc:	66 0c       	add	r6, r6
    41de:	77 1c       	adc	r7, r7
    41e0:	88 1c       	adc	r8, r8
    41e2:	99 1c       	adc	r9, r9
    41e4:	56 94       	lsr	r5
    41e6:	47 94       	ror	r4
    41e8:	37 94       	ror	r3
    41ea:	27 94       	ror	r2
    41ec:	c3 cf       	rjmp	.-122    	; 0x4174 <__mulsf3+0xb0>
    41ee:	fa 85       	ldd	r31, Y+10	; 0x0a
    41f0:	ea 89       	ldd	r30, Y+18	; 0x12
    41f2:	2b 89       	ldd	r18, Y+19	; 0x13
    41f4:	3c 89       	ldd	r19, Y+20	; 0x14
    41f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    41f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    41fa:	28 0f       	add	r18, r24
    41fc:	39 1f       	adc	r19, r25
    41fe:	2e 5f       	subi	r18, 0xFE	; 254
    4200:	3f 4f       	sbci	r19, 0xFF	; 255
    4202:	17 c0       	rjmp	.+46     	; 0x4232 <__mulsf3+0x16e>
    4204:	ca 01       	movw	r24, r20
    4206:	81 70       	andi	r24, 0x01	; 1
    4208:	90 70       	andi	r25, 0x00	; 0
    420a:	89 2b       	or	r24, r25
    420c:	61 f0       	breq	.+24     	; 0x4226 <__mulsf3+0x162>
    420e:	16 95       	lsr	r17
    4210:	07 95       	ror	r16
    4212:	f7 94       	ror	r15
    4214:	e7 94       	ror	r14
    4216:	80 e0       	ldi	r24, 0x00	; 0
    4218:	90 e0       	ldi	r25, 0x00	; 0
    421a:	a0 e0       	ldi	r26, 0x00	; 0
    421c:	b0 e8       	ldi	r27, 0x80	; 128
    421e:	e8 2a       	or	r14, r24
    4220:	f9 2a       	or	r15, r25
    4222:	0a 2b       	or	r16, r26
    4224:	1b 2b       	or	r17, r27
    4226:	76 95       	lsr	r23
    4228:	67 95       	ror	r22
    422a:	57 95       	ror	r21
    422c:	47 95       	ror	r20
    422e:	2f 5f       	subi	r18, 0xFF	; 255
    4230:	3f 4f       	sbci	r19, 0xFF	; 255
    4232:	77 fd       	sbrc	r23, 7
    4234:	e7 cf       	rjmp	.-50     	; 0x4204 <__mulsf3+0x140>
    4236:	0c c0       	rjmp	.+24     	; 0x4250 <__mulsf3+0x18c>
    4238:	44 0f       	add	r20, r20
    423a:	55 1f       	adc	r21, r21
    423c:	66 1f       	adc	r22, r22
    423e:	77 1f       	adc	r23, r23
    4240:	17 fd       	sbrc	r17, 7
    4242:	41 60       	ori	r20, 0x01	; 1
    4244:	ee 0c       	add	r14, r14
    4246:	ff 1c       	adc	r15, r15
    4248:	00 1f       	adc	r16, r16
    424a:	11 1f       	adc	r17, r17
    424c:	21 50       	subi	r18, 0x01	; 1
    424e:	30 40       	sbci	r19, 0x00	; 0
    4250:	40 30       	cpi	r20, 0x00	; 0
    4252:	90 e0       	ldi	r25, 0x00	; 0
    4254:	59 07       	cpc	r21, r25
    4256:	90 e0       	ldi	r25, 0x00	; 0
    4258:	69 07       	cpc	r22, r25
    425a:	90 e4       	ldi	r25, 0x40	; 64
    425c:	79 07       	cpc	r23, r25
    425e:	60 f3       	brcs	.-40     	; 0x4238 <__mulsf3+0x174>
    4260:	2b 8f       	std	Y+27, r18	; 0x1b
    4262:	3c 8f       	std	Y+28, r19	; 0x1c
    4264:	db 01       	movw	r26, r22
    4266:	ca 01       	movw	r24, r20
    4268:	8f 77       	andi	r24, 0x7F	; 127
    426a:	90 70       	andi	r25, 0x00	; 0
    426c:	a0 70       	andi	r26, 0x00	; 0
    426e:	b0 70       	andi	r27, 0x00	; 0
    4270:	80 34       	cpi	r24, 0x40	; 64
    4272:	91 05       	cpc	r25, r1
    4274:	a1 05       	cpc	r26, r1
    4276:	b1 05       	cpc	r27, r1
    4278:	61 f4       	brne	.+24     	; 0x4292 <__mulsf3+0x1ce>
    427a:	47 fd       	sbrc	r20, 7
    427c:	0a c0       	rjmp	.+20     	; 0x4292 <__mulsf3+0x1ce>
    427e:	e1 14       	cp	r14, r1
    4280:	f1 04       	cpc	r15, r1
    4282:	01 05       	cpc	r16, r1
    4284:	11 05       	cpc	r17, r1
    4286:	29 f0       	breq	.+10     	; 0x4292 <__mulsf3+0x1ce>
    4288:	40 5c       	subi	r20, 0xC0	; 192
    428a:	5f 4f       	sbci	r21, 0xFF	; 255
    428c:	6f 4f       	sbci	r22, 0xFF	; 255
    428e:	7f 4f       	sbci	r23, 0xFF	; 255
    4290:	40 78       	andi	r20, 0x80	; 128
    4292:	1a 8e       	std	Y+26, r1	; 0x1a
    4294:	fe 17       	cp	r31, r30
    4296:	11 f0       	breq	.+4      	; 0x429c <__mulsf3+0x1d8>
    4298:	81 e0       	ldi	r24, 0x01	; 1
    429a:	8a 8f       	std	Y+26, r24	; 0x1a
    429c:	4d 8f       	std	Y+29, r20	; 0x1d
    429e:	5e 8f       	std	Y+30, r21	; 0x1e
    42a0:	6f 8f       	std	Y+31, r22	; 0x1f
    42a2:	78 a3       	std	Y+32, r23	; 0x20
    42a4:	83 e0       	ldi	r24, 0x03	; 3
    42a6:	89 8f       	std	Y+25, r24	; 0x19
    42a8:	ce 01       	movw	r24, r28
    42aa:	49 96       	adiw	r24, 0x19	; 25
    42ac:	0e 94 b4 23 	call	0x4768	; 0x4768 <__pack_f>
    42b0:	a0 96       	adiw	r28, 0x20	; 32
    42b2:	e2 e1       	ldi	r30, 0x12	; 18
    42b4:	0c 94 8a 25 	jmp	0x4b14	; 0x4b14 <__epilogue_restores__>

000042b8 <__divsf3>:
    42b8:	a8 e1       	ldi	r26, 0x18	; 24
    42ba:	b0 e0       	ldi	r27, 0x00	; 0
    42bc:	e2 e6       	ldi	r30, 0x62	; 98
    42be:	f1 e2       	ldi	r31, 0x21	; 33
    42c0:	0c 94 76 25 	jmp	0x4aec	; 0x4aec <__prologue_saves__+0x10>
    42c4:	69 83       	std	Y+1, r22	; 0x01
    42c6:	7a 83       	std	Y+2, r23	; 0x02
    42c8:	8b 83       	std	Y+3, r24	; 0x03
    42ca:	9c 83       	std	Y+4, r25	; 0x04
    42cc:	2d 83       	std	Y+5, r18	; 0x05
    42ce:	3e 83       	std	Y+6, r19	; 0x06
    42d0:	4f 83       	std	Y+7, r20	; 0x07
    42d2:	58 87       	std	Y+8, r21	; 0x08
    42d4:	b9 e0       	ldi	r27, 0x09	; 9
    42d6:	eb 2e       	mov	r14, r27
    42d8:	f1 2c       	mov	r15, r1
    42da:	ec 0e       	add	r14, r28
    42dc:	fd 1e       	adc	r15, r29
    42de:	ce 01       	movw	r24, r28
    42e0:	01 96       	adiw	r24, 0x01	; 1
    42e2:	b7 01       	movw	r22, r14
    42e4:	0e 94 89 24 	call	0x4912	; 0x4912 <__unpack_f>
    42e8:	8e 01       	movw	r16, r28
    42ea:	0f 5e       	subi	r16, 0xEF	; 239
    42ec:	1f 4f       	sbci	r17, 0xFF	; 255
    42ee:	ce 01       	movw	r24, r28
    42f0:	05 96       	adiw	r24, 0x05	; 5
    42f2:	b8 01       	movw	r22, r16
    42f4:	0e 94 89 24 	call	0x4912	; 0x4912 <__unpack_f>
    42f8:	29 85       	ldd	r18, Y+9	; 0x09
    42fa:	22 30       	cpi	r18, 0x02	; 2
    42fc:	08 f4       	brcc	.+2      	; 0x4300 <__divsf3+0x48>
    42fe:	7e c0       	rjmp	.+252    	; 0x43fc <__divsf3+0x144>
    4300:	39 89       	ldd	r19, Y+17	; 0x11
    4302:	32 30       	cpi	r19, 0x02	; 2
    4304:	10 f4       	brcc	.+4      	; 0x430a <__divsf3+0x52>
    4306:	b8 01       	movw	r22, r16
    4308:	7c c0       	rjmp	.+248    	; 0x4402 <__divsf3+0x14a>
    430a:	8a 85       	ldd	r24, Y+10	; 0x0a
    430c:	9a 89       	ldd	r25, Y+18	; 0x12
    430e:	89 27       	eor	r24, r25
    4310:	8a 87       	std	Y+10, r24	; 0x0a
    4312:	24 30       	cpi	r18, 0x04	; 4
    4314:	11 f0       	breq	.+4      	; 0x431a <__divsf3+0x62>
    4316:	22 30       	cpi	r18, 0x02	; 2
    4318:	31 f4       	brne	.+12     	; 0x4326 <__divsf3+0x6e>
    431a:	23 17       	cp	r18, r19
    431c:	09 f0       	breq	.+2      	; 0x4320 <__divsf3+0x68>
    431e:	6e c0       	rjmp	.+220    	; 0x43fc <__divsf3+0x144>
    4320:	65 e6       	ldi	r22, 0x65	; 101
    4322:	72 e0       	ldi	r23, 0x02	; 2
    4324:	6e c0       	rjmp	.+220    	; 0x4402 <__divsf3+0x14a>
    4326:	34 30       	cpi	r19, 0x04	; 4
    4328:	39 f4       	brne	.+14     	; 0x4338 <__divsf3+0x80>
    432a:	1d 86       	std	Y+13, r1	; 0x0d
    432c:	1e 86       	std	Y+14, r1	; 0x0e
    432e:	1f 86       	std	Y+15, r1	; 0x0f
    4330:	18 8a       	std	Y+16, r1	; 0x10
    4332:	1c 86       	std	Y+12, r1	; 0x0c
    4334:	1b 86       	std	Y+11, r1	; 0x0b
    4336:	04 c0       	rjmp	.+8      	; 0x4340 <__divsf3+0x88>
    4338:	32 30       	cpi	r19, 0x02	; 2
    433a:	21 f4       	brne	.+8      	; 0x4344 <__divsf3+0x8c>
    433c:	84 e0       	ldi	r24, 0x04	; 4
    433e:	89 87       	std	Y+9, r24	; 0x09
    4340:	b7 01       	movw	r22, r14
    4342:	5f c0       	rjmp	.+190    	; 0x4402 <__divsf3+0x14a>
    4344:	2b 85       	ldd	r18, Y+11	; 0x0b
    4346:	3c 85       	ldd	r19, Y+12	; 0x0c
    4348:	8b 89       	ldd	r24, Y+19	; 0x13
    434a:	9c 89       	ldd	r25, Y+20	; 0x14
    434c:	28 1b       	sub	r18, r24
    434e:	39 0b       	sbc	r19, r25
    4350:	3c 87       	std	Y+12, r19	; 0x0c
    4352:	2b 87       	std	Y+11, r18	; 0x0b
    4354:	ed 84       	ldd	r14, Y+13	; 0x0d
    4356:	fe 84       	ldd	r15, Y+14	; 0x0e
    4358:	0f 85       	ldd	r16, Y+15	; 0x0f
    435a:	18 89       	ldd	r17, Y+16	; 0x10
    435c:	ad 88       	ldd	r10, Y+21	; 0x15
    435e:	be 88       	ldd	r11, Y+22	; 0x16
    4360:	cf 88       	ldd	r12, Y+23	; 0x17
    4362:	d8 8c       	ldd	r13, Y+24	; 0x18
    4364:	ea 14       	cp	r14, r10
    4366:	fb 04       	cpc	r15, r11
    4368:	0c 05       	cpc	r16, r12
    436a:	1d 05       	cpc	r17, r13
    436c:	40 f4       	brcc	.+16     	; 0x437e <__divsf3+0xc6>
    436e:	ee 0c       	add	r14, r14
    4370:	ff 1c       	adc	r15, r15
    4372:	00 1f       	adc	r16, r16
    4374:	11 1f       	adc	r17, r17
    4376:	21 50       	subi	r18, 0x01	; 1
    4378:	30 40       	sbci	r19, 0x00	; 0
    437a:	3c 87       	std	Y+12, r19	; 0x0c
    437c:	2b 87       	std	Y+11, r18	; 0x0b
    437e:	20 e0       	ldi	r18, 0x00	; 0
    4380:	30 e0       	ldi	r19, 0x00	; 0
    4382:	40 e0       	ldi	r20, 0x00	; 0
    4384:	50 e0       	ldi	r21, 0x00	; 0
    4386:	80 e0       	ldi	r24, 0x00	; 0
    4388:	90 e0       	ldi	r25, 0x00	; 0
    438a:	a0 e0       	ldi	r26, 0x00	; 0
    438c:	b0 e4       	ldi	r27, 0x40	; 64
    438e:	60 e0       	ldi	r22, 0x00	; 0
    4390:	70 e0       	ldi	r23, 0x00	; 0
    4392:	ea 14       	cp	r14, r10
    4394:	fb 04       	cpc	r15, r11
    4396:	0c 05       	cpc	r16, r12
    4398:	1d 05       	cpc	r17, r13
    439a:	40 f0       	brcs	.+16     	; 0x43ac <__divsf3+0xf4>
    439c:	28 2b       	or	r18, r24
    439e:	39 2b       	or	r19, r25
    43a0:	4a 2b       	or	r20, r26
    43a2:	5b 2b       	or	r21, r27
    43a4:	ea 18       	sub	r14, r10
    43a6:	fb 08       	sbc	r15, r11
    43a8:	0c 09       	sbc	r16, r12
    43aa:	1d 09       	sbc	r17, r13
    43ac:	b6 95       	lsr	r27
    43ae:	a7 95       	ror	r26
    43b0:	97 95       	ror	r25
    43b2:	87 95       	ror	r24
    43b4:	ee 0c       	add	r14, r14
    43b6:	ff 1c       	adc	r15, r15
    43b8:	00 1f       	adc	r16, r16
    43ba:	11 1f       	adc	r17, r17
    43bc:	6f 5f       	subi	r22, 0xFF	; 255
    43be:	7f 4f       	sbci	r23, 0xFF	; 255
    43c0:	6f 31       	cpi	r22, 0x1F	; 31
    43c2:	71 05       	cpc	r23, r1
    43c4:	31 f7       	brne	.-52     	; 0x4392 <__divsf3+0xda>
    43c6:	da 01       	movw	r26, r20
    43c8:	c9 01       	movw	r24, r18
    43ca:	8f 77       	andi	r24, 0x7F	; 127
    43cc:	90 70       	andi	r25, 0x00	; 0
    43ce:	a0 70       	andi	r26, 0x00	; 0
    43d0:	b0 70       	andi	r27, 0x00	; 0
    43d2:	80 34       	cpi	r24, 0x40	; 64
    43d4:	91 05       	cpc	r25, r1
    43d6:	a1 05       	cpc	r26, r1
    43d8:	b1 05       	cpc	r27, r1
    43da:	61 f4       	brne	.+24     	; 0x43f4 <__divsf3+0x13c>
    43dc:	27 fd       	sbrc	r18, 7
    43de:	0a c0       	rjmp	.+20     	; 0x43f4 <__divsf3+0x13c>
    43e0:	e1 14       	cp	r14, r1
    43e2:	f1 04       	cpc	r15, r1
    43e4:	01 05       	cpc	r16, r1
    43e6:	11 05       	cpc	r17, r1
    43e8:	29 f0       	breq	.+10     	; 0x43f4 <__divsf3+0x13c>
    43ea:	20 5c       	subi	r18, 0xC0	; 192
    43ec:	3f 4f       	sbci	r19, 0xFF	; 255
    43ee:	4f 4f       	sbci	r20, 0xFF	; 255
    43f0:	5f 4f       	sbci	r21, 0xFF	; 255
    43f2:	20 78       	andi	r18, 0x80	; 128
    43f4:	2d 87       	std	Y+13, r18	; 0x0d
    43f6:	3e 87       	std	Y+14, r19	; 0x0e
    43f8:	4f 87       	std	Y+15, r20	; 0x0f
    43fa:	58 8b       	std	Y+16, r21	; 0x10
    43fc:	be 01       	movw	r22, r28
    43fe:	67 5f       	subi	r22, 0xF7	; 247
    4400:	7f 4f       	sbci	r23, 0xFF	; 255
    4402:	cb 01       	movw	r24, r22
    4404:	0e 94 b4 23 	call	0x4768	; 0x4768 <__pack_f>
    4408:	68 96       	adiw	r28, 0x18	; 24
    440a:	ea e0       	ldi	r30, 0x0A	; 10
    440c:	0c 94 92 25 	jmp	0x4b24	; 0x4b24 <__epilogue_restores__+0x10>

00004410 <__gtsf2>:
    4410:	a8 e1       	ldi	r26, 0x18	; 24
    4412:	b0 e0       	ldi	r27, 0x00	; 0
    4414:	ee e0       	ldi	r30, 0x0E	; 14
    4416:	f2 e2       	ldi	r31, 0x22	; 34
    4418:	0c 94 7a 25 	jmp	0x4af4	; 0x4af4 <__prologue_saves__+0x18>
    441c:	69 83       	std	Y+1, r22	; 0x01
    441e:	7a 83       	std	Y+2, r23	; 0x02
    4420:	8b 83       	std	Y+3, r24	; 0x03
    4422:	9c 83       	std	Y+4, r25	; 0x04
    4424:	2d 83       	std	Y+5, r18	; 0x05
    4426:	3e 83       	std	Y+6, r19	; 0x06
    4428:	4f 83       	std	Y+7, r20	; 0x07
    442a:	58 87       	std	Y+8, r21	; 0x08
    442c:	89 e0       	ldi	r24, 0x09	; 9
    442e:	e8 2e       	mov	r14, r24
    4430:	f1 2c       	mov	r15, r1
    4432:	ec 0e       	add	r14, r28
    4434:	fd 1e       	adc	r15, r29
    4436:	ce 01       	movw	r24, r28
    4438:	01 96       	adiw	r24, 0x01	; 1
    443a:	b7 01       	movw	r22, r14
    443c:	0e 94 89 24 	call	0x4912	; 0x4912 <__unpack_f>
    4440:	8e 01       	movw	r16, r28
    4442:	0f 5e       	subi	r16, 0xEF	; 239
    4444:	1f 4f       	sbci	r17, 0xFF	; 255
    4446:	ce 01       	movw	r24, r28
    4448:	05 96       	adiw	r24, 0x05	; 5
    444a:	b8 01       	movw	r22, r16
    444c:	0e 94 89 24 	call	0x4912	; 0x4912 <__unpack_f>
    4450:	89 85       	ldd	r24, Y+9	; 0x09
    4452:	82 30       	cpi	r24, 0x02	; 2
    4454:	40 f0       	brcs	.+16     	; 0x4466 <__gtsf2+0x56>
    4456:	89 89       	ldd	r24, Y+17	; 0x11
    4458:	82 30       	cpi	r24, 0x02	; 2
    445a:	28 f0       	brcs	.+10     	; 0x4466 <__gtsf2+0x56>
    445c:	c7 01       	movw	r24, r14
    445e:	b8 01       	movw	r22, r16
    4460:	0e 94 01 25 	call	0x4a02	; 0x4a02 <__fpcmp_parts_f>
    4464:	01 c0       	rjmp	.+2      	; 0x4468 <__gtsf2+0x58>
    4466:	8f ef       	ldi	r24, 0xFF	; 255
    4468:	68 96       	adiw	r28, 0x18	; 24
    446a:	e6 e0       	ldi	r30, 0x06	; 6
    446c:	0c 94 96 25 	jmp	0x4b2c	; 0x4b2c <__epilogue_restores__+0x18>

00004470 <__gesf2>:
    4470:	a8 e1       	ldi	r26, 0x18	; 24
    4472:	b0 e0       	ldi	r27, 0x00	; 0
    4474:	ee e3       	ldi	r30, 0x3E	; 62
    4476:	f2 e2       	ldi	r31, 0x22	; 34
    4478:	0c 94 7a 25 	jmp	0x4af4	; 0x4af4 <__prologue_saves__+0x18>
    447c:	69 83       	std	Y+1, r22	; 0x01
    447e:	7a 83       	std	Y+2, r23	; 0x02
    4480:	8b 83       	std	Y+3, r24	; 0x03
    4482:	9c 83       	std	Y+4, r25	; 0x04
    4484:	2d 83       	std	Y+5, r18	; 0x05
    4486:	3e 83       	std	Y+6, r19	; 0x06
    4488:	4f 83       	std	Y+7, r20	; 0x07
    448a:	58 87       	std	Y+8, r21	; 0x08
    448c:	89 e0       	ldi	r24, 0x09	; 9
    448e:	e8 2e       	mov	r14, r24
    4490:	f1 2c       	mov	r15, r1
    4492:	ec 0e       	add	r14, r28
    4494:	fd 1e       	adc	r15, r29
    4496:	ce 01       	movw	r24, r28
    4498:	01 96       	adiw	r24, 0x01	; 1
    449a:	b7 01       	movw	r22, r14
    449c:	0e 94 89 24 	call	0x4912	; 0x4912 <__unpack_f>
    44a0:	8e 01       	movw	r16, r28
    44a2:	0f 5e       	subi	r16, 0xEF	; 239
    44a4:	1f 4f       	sbci	r17, 0xFF	; 255
    44a6:	ce 01       	movw	r24, r28
    44a8:	05 96       	adiw	r24, 0x05	; 5
    44aa:	b8 01       	movw	r22, r16
    44ac:	0e 94 89 24 	call	0x4912	; 0x4912 <__unpack_f>
    44b0:	89 85       	ldd	r24, Y+9	; 0x09
    44b2:	82 30       	cpi	r24, 0x02	; 2
    44b4:	40 f0       	brcs	.+16     	; 0x44c6 <__gesf2+0x56>
    44b6:	89 89       	ldd	r24, Y+17	; 0x11
    44b8:	82 30       	cpi	r24, 0x02	; 2
    44ba:	28 f0       	brcs	.+10     	; 0x44c6 <__gesf2+0x56>
    44bc:	c7 01       	movw	r24, r14
    44be:	b8 01       	movw	r22, r16
    44c0:	0e 94 01 25 	call	0x4a02	; 0x4a02 <__fpcmp_parts_f>
    44c4:	01 c0       	rjmp	.+2      	; 0x44c8 <__gesf2+0x58>
    44c6:	8f ef       	ldi	r24, 0xFF	; 255
    44c8:	68 96       	adiw	r28, 0x18	; 24
    44ca:	e6 e0       	ldi	r30, 0x06	; 6
    44cc:	0c 94 96 25 	jmp	0x4b2c	; 0x4b2c <__epilogue_restores__+0x18>

000044d0 <__ltsf2>:
    44d0:	a8 e1       	ldi	r26, 0x18	; 24
    44d2:	b0 e0       	ldi	r27, 0x00	; 0
    44d4:	ee e6       	ldi	r30, 0x6E	; 110
    44d6:	f2 e2       	ldi	r31, 0x22	; 34
    44d8:	0c 94 7a 25 	jmp	0x4af4	; 0x4af4 <__prologue_saves__+0x18>
    44dc:	69 83       	std	Y+1, r22	; 0x01
    44de:	7a 83       	std	Y+2, r23	; 0x02
    44e0:	8b 83       	std	Y+3, r24	; 0x03
    44e2:	9c 83       	std	Y+4, r25	; 0x04
    44e4:	2d 83       	std	Y+5, r18	; 0x05
    44e6:	3e 83       	std	Y+6, r19	; 0x06
    44e8:	4f 83       	std	Y+7, r20	; 0x07
    44ea:	58 87       	std	Y+8, r21	; 0x08
    44ec:	89 e0       	ldi	r24, 0x09	; 9
    44ee:	e8 2e       	mov	r14, r24
    44f0:	f1 2c       	mov	r15, r1
    44f2:	ec 0e       	add	r14, r28
    44f4:	fd 1e       	adc	r15, r29
    44f6:	ce 01       	movw	r24, r28
    44f8:	01 96       	adiw	r24, 0x01	; 1
    44fa:	b7 01       	movw	r22, r14
    44fc:	0e 94 89 24 	call	0x4912	; 0x4912 <__unpack_f>
    4500:	8e 01       	movw	r16, r28
    4502:	0f 5e       	subi	r16, 0xEF	; 239
    4504:	1f 4f       	sbci	r17, 0xFF	; 255
    4506:	ce 01       	movw	r24, r28
    4508:	05 96       	adiw	r24, 0x05	; 5
    450a:	b8 01       	movw	r22, r16
    450c:	0e 94 89 24 	call	0x4912	; 0x4912 <__unpack_f>
    4510:	89 85       	ldd	r24, Y+9	; 0x09
    4512:	82 30       	cpi	r24, 0x02	; 2
    4514:	40 f0       	brcs	.+16     	; 0x4526 <__ltsf2+0x56>
    4516:	89 89       	ldd	r24, Y+17	; 0x11
    4518:	82 30       	cpi	r24, 0x02	; 2
    451a:	28 f0       	brcs	.+10     	; 0x4526 <__ltsf2+0x56>
    451c:	c7 01       	movw	r24, r14
    451e:	b8 01       	movw	r22, r16
    4520:	0e 94 01 25 	call	0x4a02	; 0x4a02 <__fpcmp_parts_f>
    4524:	01 c0       	rjmp	.+2      	; 0x4528 <__ltsf2+0x58>
    4526:	81 e0       	ldi	r24, 0x01	; 1
    4528:	68 96       	adiw	r28, 0x18	; 24
    452a:	e6 e0       	ldi	r30, 0x06	; 6
    452c:	0c 94 96 25 	jmp	0x4b2c	; 0x4b2c <__epilogue_restores__+0x18>

00004530 <__fixsfsi>:
    4530:	ac e0       	ldi	r26, 0x0C	; 12
    4532:	b0 e0       	ldi	r27, 0x00	; 0
    4534:	ee e9       	ldi	r30, 0x9E	; 158
    4536:	f2 e2       	ldi	r31, 0x22	; 34
    4538:	0c 94 7e 25 	jmp	0x4afc	; 0x4afc <__prologue_saves__+0x20>
    453c:	69 83       	std	Y+1, r22	; 0x01
    453e:	7a 83       	std	Y+2, r23	; 0x02
    4540:	8b 83       	std	Y+3, r24	; 0x03
    4542:	9c 83       	std	Y+4, r25	; 0x04
    4544:	ce 01       	movw	r24, r28
    4546:	01 96       	adiw	r24, 0x01	; 1
    4548:	be 01       	movw	r22, r28
    454a:	6b 5f       	subi	r22, 0xFB	; 251
    454c:	7f 4f       	sbci	r23, 0xFF	; 255
    454e:	0e 94 89 24 	call	0x4912	; 0x4912 <__unpack_f>
    4552:	8d 81       	ldd	r24, Y+5	; 0x05
    4554:	82 30       	cpi	r24, 0x02	; 2
    4556:	61 f1       	breq	.+88     	; 0x45b0 <__fixsfsi+0x80>
    4558:	82 30       	cpi	r24, 0x02	; 2
    455a:	50 f1       	brcs	.+84     	; 0x45b0 <__fixsfsi+0x80>
    455c:	84 30       	cpi	r24, 0x04	; 4
    455e:	21 f4       	brne	.+8      	; 0x4568 <__fixsfsi+0x38>
    4560:	8e 81       	ldd	r24, Y+6	; 0x06
    4562:	88 23       	and	r24, r24
    4564:	51 f1       	breq	.+84     	; 0x45ba <__fixsfsi+0x8a>
    4566:	2e c0       	rjmp	.+92     	; 0x45c4 <__fixsfsi+0x94>
    4568:	2f 81       	ldd	r18, Y+7	; 0x07
    456a:	38 85       	ldd	r19, Y+8	; 0x08
    456c:	37 fd       	sbrc	r19, 7
    456e:	20 c0       	rjmp	.+64     	; 0x45b0 <__fixsfsi+0x80>
    4570:	6e 81       	ldd	r22, Y+6	; 0x06
    4572:	2f 31       	cpi	r18, 0x1F	; 31
    4574:	31 05       	cpc	r19, r1
    4576:	1c f0       	brlt	.+6      	; 0x457e <__fixsfsi+0x4e>
    4578:	66 23       	and	r22, r22
    457a:	f9 f0       	breq	.+62     	; 0x45ba <__fixsfsi+0x8a>
    457c:	23 c0       	rjmp	.+70     	; 0x45c4 <__fixsfsi+0x94>
    457e:	8e e1       	ldi	r24, 0x1E	; 30
    4580:	90 e0       	ldi	r25, 0x00	; 0
    4582:	82 1b       	sub	r24, r18
    4584:	93 0b       	sbc	r25, r19
    4586:	29 85       	ldd	r18, Y+9	; 0x09
    4588:	3a 85       	ldd	r19, Y+10	; 0x0a
    458a:	4b 85       	ldd	r20, Y+11	; 0x0b
    458c:	5c 85       	ldd	r21, Y+12	; 0x0c
    458e:	04 c0       	rjmp	.+8      	; 0x4598 <__fixsfsi+0x68>
    4590:	56 95       	lsr	r21
    4592:	47 95       	ror	r20
    4594:	37 95       	ror	r19
    4596:	27 95       	ror	r18
    4598:	8a 95       	dec	r24
    459a:	d2 f7       	brpl	.-12     	; 0x4590 <__fixsfsi+0x60>
    459c:	66 23       	and	r22, r22
    459e:	b1 f0       	breq	.+44     	; 0x45cc <__fixsfsi+0x9c>
    45a0:	50 95       	com	r21
    45a2:	40 95       	com	r20
    45a4:	30 95       	com	r19
    45a6:	21 95       	neg	r18
    45a8:	3f 4f       	sbci	r19, 0xFF	; 255
    45aa:	4f 4f       	sbci	r20, 0xFF	; 255
    45ac:	5f 4f       	sbci	r21, 0xFF	; 255
    45ae:	0e c0       	rjmp	.+28     	; 0x45cc <__fixsfsi+0x9c>
    45b0:	20 e0       	ldi	r18, 0x00	; 0
    45b2:	30 e0       	ldi	r19, 0x00	; 0
    45b4:	40 e0       	ldi	r20, 0x00	; 0
    45b6:	50 e0       	ldi	r21, 0x00	; 0
    45b8:	09 c0       	rjmp	.+18     	; 0x45cc <__fixsfsi+0x9c>
    45ba:	2f ef       	ldi	r18, 0xFF	; 255
    45bc:	3f ef       	ldi	r19, 0xFF	; 255
    45be:	4f ef       	ldi	r20, 0xFF	; 255
    45c0:	5f e7       	ldi	r21, 0x7F	; 127
    45c2:	04 c0       	rjmp	.+8      	; 0x45cc <__fixsfsi+0x9c>
    45c4:	20 e0       	ldi	r18, 0x00	; 0
    45c6:	30 e0       	ldi	r19, 0x00	; 0
    45c8:	40 e0       	ldi	r20, 0x00	; 0
    45ca:	50 e8       	ldi	r21, 0x80	; 128
    45cc:	b9 01       	movw	r22, r18
    45ce:	ca 01       	movw	r24, r20
    45d0:	2c 96       	adiw	r28, 0x0c	; 12
    45d2:	e2 e0       	ldi	r30, 0x02	; 2
    45d4:	0c 94 9a 25 	jmp	0x4b34	; 0x4b34 <__epilogue_restores__+0x20>

000045d8 <__floatunsisf>:
    45d8:	a8 e0       	ldi	r26, 0x08	; 8
    45da:	b0 e0       	ldi	r27, 0x00	; 0
    45dc:	e2 ef       	ldi	r30, 0xF2	; 242
    45de:	f2 e2       	ldi	r31, 0x22	; 34
    45e0:	0c 94 76 25 	jmp	0x4aec	; 0x4aec <__prologue_saves__+0x10>
    45e4:	7b 01       	movw	r14, r22
    45e6:	8c 01       	movw	r16, r24
    45e8:	61 15       	cp	r22, r1
    45ea:	71 05       	cpc	r23, r1
    45ec:	81 05       	cpc	r24, r1
    45ee:	91 05       	cpc	r25, r1
    45f0:	19 f4       	brne	.+6      	; 0x45f8 <__floatunsisf+0x20>
    45f2:	82 e0       	ldi	r24, 0x02	; 2
    45f4:	89 83       	std	Y+1, r24	; 0x01
    45f6:	60 c0       	rjmp	.+192    	; 0x46b8 <__floatunsisf+0xe0>
    45f8:	83 e0       	ldi	r24, 0x03	; 3
    45fa:	89 83       	std	Y+1, r24	; 0x01
    45fc:	8e e1       	ldi	r24, 0x1E	; 30
    45fe:	c8 2e       	mov	r12, r24
    4600:	d1 2c       	mov	r13, r1
    4602:	dc 82       	std	Y+4, r13	; 0x04
    4604:	cb 82       	std	Y+3, r12	; 0x03
    4606:	ed 82       	std	Y+5, r14	; 0x05
    4608:	fe 82       	std	Y+6, r15	; 0x06
    460a:	0f 83       	std	Y+7, r16	; 0x07
    460c:	18 87       	std	Y+8, r17	; 0x08
    460e:	c8 01       	movw	r24, r16
    4610:	b7 01       	movw	r22, r14
    4612:	0e 94 65 23 	call	0x46ca	; 0x46ca <__clzsi2>
    4616:	fc 01       	movw	r30, r24
    4618:	31 97       	sbiw	r30, 0x01	; 1
    461a:	f7 ff       	sbrs	r31, 7
    461c:	3b c0       	rjmp	.+118    	; 0x4694 <__floatunsisf+0xbc>
    461e:	22 27       	eor	r18, r18
    4620:	33 27       	eor	r19, r19
    4622:	2e 1b       	sub	r18, r30
    4624:	3f 0b       	sbc	r19, r31
    4626:	57 01       	movw	r10, r14
    4628:	68 01       	movw	r12, r16
    462a:	02 2e       	mov	r0, r18
    462c:	04 c0       	rjmp	.+8      	; 0x4636 <__floatunsisf+0x5e>
    462e:	d6 94       	lsr	r13
    4630:	c7 94       	ror	r12
    4632:	b7 94       	ror	r11
    4634:	a7 94       	ror	r10
    4636:	0a 94       	dec	r0
    4638:	d2 f7       	brpl	.-12     	; 0x462e <__floatunsisf+0x56>
    463a:	40 e0       	ldi	r20, 0x00	; 0
    463c:	50 e0       	ldi	r21, 0x00	; 0
    463e:	60 e0       	ldi	r22, 0x00	; 0
    4640:	70 e0       	ldi	r23, 0x00	; 0
    4642:	81 e0       	ldi	r24, 0x01	; 1
    4644:	90 e0       	ldi	r25, 0x00	; 0
    4646:	a0 e0       	ldi	r26, 0x00	; 0
    4648:	b0 e0       	ldi	r27, 0x00	; 0
    464a:	04 c0       	rjmp	.+8      	; 0x4654 <__floatunsisf+0x7c>
    464c:	88 0f       	add	r24, r24
    464e:	99 1f       	adc	r25, r25
    4650:	aa 1f       	adc	r26, r26
    4652:	bb 1f       	adc	r27, r27
    4654:	2a 95       	dec	r18
    4656:	d2 f7       	brpl	.-12     	; 0x464c <__floatunsisf+0x74>
    4658:	01 97       	sbiw	r24, 0x01	; 1
    465a:	a1 09       	sbc	r26, r1
    465c:	b1 09       	sbc	r27, r1
    465e:	8e 21       	and	r24, r14
    4660:	9f 21       	and	r25, r15
    4662:	a0 23       	and	r26, r16
    4664:	b1 23       	and	r27, r17
    4666:	00 97       	sbiw	r24, 0x00	; 0
    4668:	a1 05       	cpc	r26, r1
    466a:	b1 05       	cpc	r27, r1
    466c:	21 f0       	breq	.+8      	; 0x4676 <__floatunsisf+0x9e>
    466e:	41 e0       	ldi	r20, 0x01	; 1
    4670:	50 e0       	ldi	r21, 0x00	; 0
    4672:	60 e0       	ldi	r22, 0x00	; 0
    4674:	70 e0       	ldi	r23, 0x00	; 0
    4676:	4a 29       	or	r20, r10
    4678:	5b 29       	or	r21, r11
    467a:	6c 29       	or	r22, r12
    467c:	7d 29       	or	r23, r13
    467e:	4d 83       	std	Y+5, r20	; 0x05
    4680:	5e 83       	std	Y+6, r21	; 0x06
    4682:	6f 83       	std	Y+7, r22	; 0x07
    4684:	78 87       	std	Y+8, r23	; 0x08
    4686:	8e e1       	ldi	r24, 0x1E	; 30
    4688:	90 e0       	ldi	r25, 0x00	; 0
    468a:	8e 1b       	sub	r24, r30
    468c:	9f 0b       	sbc	r25, r31
    468e:	9c 83       	std	Y+4, r25	; 0x04
    4690:	8b 83       	std	Y+3, r24	; 0x03
    4692:	12 c0       	rjmp	.+36     	; 0x46b8 <__floatunsisf+0xe0>
    4694:	30 97       	sbiw	r30, 0x00	; 0
    4696:	81 f0       	breq	.+32     	; 0x46b8 <__floatunsisf+0xe0>
    4698:	0e 2e       	mov	r0, r30
    469a:	04 c0       	rjmp	.+8      	; 0x46a4 <__floatunsisf+0xcc>
    469c:	ee 0c       	add	r14, r14
    469e:	ff 1c       	adc	r15, r15
    46a0:	00 1f       	adc	r16, r16
    46a2:	11 1f       	adc	r17, r17
    46a4:	0a 94       	dec	r0
    46a6:	d2 f7       	brpl	.-12     	; 0x469c <__floatunsisf+0xc4>
    46a8:	ed 82       	std	Y+5, r14	; 0x05
    46aa:	fe 82       	std	Y+6, r15	; 0x06
    46ac:	0f 83       	std	Y+7, r16	; 0x07
    46ae:	18 87       	std	Y+8, r17	; 0x08
    46b0:	ce 1a       	sub	r12, r30
    46b2:	df 0a       	sbc	r13, r31
    46b4:	dc 82       	std	Y+4, r13	; 0x04
    46b6:	cb 82       	std	Y+3, r12	; 0x03
    46b8:	1a 82       	std	Y+2, r1	; 0x02
    46ba:	ce 01       	movw	r24, r28
    46bc:	01 96       	adiw	r24, 0x01	; 1
    46be:	0e 94 b4 23 	call	0x4768	; 0x4768 <__pack_f>
    46c2:	28 96       	adiw	r28, 0x08	; 8
    46c4:	ea e0       	ldi	r30, 0x0A	; 10
    46c6:	0c 94 92 25 	jmp	0x4b24	; 0x4b24 <__epilogue_restores__+0x10>

000046ca <__clzsi2>:
    46ca:	ef 92       	push	r14
    46cc:	ff 92       	push	r15
    46ce:	0f 93       	push	r16
    46d0:	1f 93       	push	r17
    46d2:	7b 01       	movw	r14, r22
    46d4:	8c 01       	movw	r16, r24
    46d6:	80 e0       	ldi	r24, 0x00	; 0
    46d8:	e8 16       	cp	r14, r24
    46da:	80 e0       	ldi	r24, 0x00	; 0
    46dc:	f8 06       	cpc	r15, r24
    46de:	81 e0       	ldi	r24, 0x01	; 1
    46e0:	08 07       	cpc	r16, r24
    46e2:	80 e0       	ldi	r24, 0x00	; 0
    46e4:	18 07       	cpc	r17, r24
    46e6:	88 f4       	brcc	.+34     	; 0x470a <__clzsi2+0x40>
    46e8:	8f ef       	ldi	r24, 0xFF	; 255
    46ea:	e8 16       	cp	r14, r24
    46ec:	f1 04       	cpc	r15, r1
    46ee:	01 05       	cpc	r16, r1
    46f0:	11 05       	cpc	r17, r1
    46f2:	31 f0       	breq	.+12     	; 0x4700 <__clzsi2+0x36>
    46f4:	28 f0       	brcs	.+10     	; 0x4700 <__clzsi2+0x36>
    46f6:	88 e0       	ldi	r24, 0x08	; 8
    46f8:	90 e0       	ldi	r25, 0x00	; 0
    46fa:	a0 e0       	ldi	r26, 0x00	; 0
    46fc:	b0 e0       	ldi	r27, 0x00	; 0
    46fe:	17 c0       	rjmp	.+46     	; 0x472e <__clzsi2+0x64>
    4700:	80 e0       	ldi	r24, 0x00	; 0
    4702:	90 e0       	ldi	r25, 0x00	; 0
    4704:	a0 e0       	ldi	r26, 0x00	; 0
    4706:	b0 e0       	ldi	r27, 0x00	; 0
    4708:	12 c0       	rjmp	.+36     	; 0x472e <__clzsi2+0x64>
    470a:	80 e0       	ldi	r24, 0x00	; 0
    470c:	e8 16       	cp	r14, r24
    470e:	80 e0       	ldi	r24, 0x00	; 0
    4710:	f8 06       	cpc	r15, r24
    4712:	80 e0       	ldi	r24, 0x00	; 0
    4714:	08 07       	cpc	r16, r24
    4716:	81 e0       	ldi	r24, 0x01	; 1
    4718:	18 07       	cpc	r17, r24
    471a:	28 f0       	brcs	.+10     	; 0x4726 <__clzsi2+0x5c>
    471c:	88 e1       	ldi	r24, 0x18	; 24
    471e:	90 e0       	ldi	r25, 0x00	; 0
    4720:	a0 e0       	ldi	r26, 0x00	; 0
    4722:	b0 e0       	ldi	r27, 0x00	; 0
    4724:	04 c0       	rjmp	.+8      	; 0x472e <__clzsi2+0x64>
    4726:	80 e1       	ldi	r24, 0x10	; 16
    4728:	90 e0       	ldi	r25, 0x00	; 0
    472a:	a0 e0       	ldi	r26, 0x00	; 0
    472c:	b0 e0       	ldi	r27, 0x00	; 0
    472e:	20 e2       	ldi	r18, 0x20	; 32
    4730:	30 e0       	ldi	r19, 0x00	; 0
    4732:	40 e0       	ldi	r20, 0x00	; 0
    4734:	50 e0       	ldi	r21, 0x00	; 0
    4736:	28 1b       	sub	r18, r24
    4738:	39 0b       	sbc	r19, r25
    473a:	4a 0b       	sbc	r20, r26
    473c:	5b 0b       	sbc	r21, r27
    473e:	04 c0       	rjmp	.+8      	; 0x4748 <__clzsi2+0x7e>
    4740:	16 95       	lsr	r17
    4742:	07 95       	ror	r16
    4744:	f7 94       	ror	r15
    4746:	e7 94       	ror	r14
    4748:	8a 95       	dec	r24
    474a:	d2 f7       	brpl	.-12     	; 0x4740 <__clzsi2+0x76>
    474c:	f7 01       	movw	r30, r14
    474e:	e3 59       	subi	r30, 0x93	; 147
    4750:	fd 4f       	sbci	r31, 0xFD	; 253
    4752:	80 81       	ld	r24, Z
    4754:	28 1b       	sub	r18, r24
    4756:	31 09       	sbc	r19, r1
    4758:	41 09       	sbc	r20, r1
    475a:	51 09       	sbc	r21, r1
    475c:	c9 01       	movw	r24, r18
    475e:	1f 91       	pop	r17
    4760:	0f 91       	pop	r16
    4762:	ff 90       	pop	r15
    4764:	ef 90       	pop	r14
    4766:	08 95       	ret

00004768 <__pack_f>:
    4768:	df 92       	push	r13
    476a:	ef 92       	push	r14
    476c:	ff 92       	push	r15
    476e:	0f 93       	push	r16
    4770:	1f 93       	push	r17
    4772:	fc 01       	movw	r30, r24
    4774:	e4 80       	ldd	r14, Z+4	; 0x04
    4776:	f5 80       	ldd	r15, Z+5	; 0x05
    4778:	06 81       	ldd	r16, Z+6	; 0x06
    477a:	17 81       	ldd	r17, Z+7	; 0x07
    477c:	d1 80       	ldd	r13, Z+1	; 0x01
    477e:	80 81       	ld	r24, Z
    4780:	82 30       	cpi	r24, 0x02	; 2
    4782:	48 f4       	brcc	.+18     	; 0x4796 <__pack_f+0x2e>
    4784:	80 e0       	ldi	r24, 0x00	; 0
    4786:	90 e0       	ldi	r25, 0x00	; 0
    4788:	a0 e1       	ldi	r26, 0x10	; 16
    478a:	b0 e0       	ldi	r27, 0x00	; 0
    478c:	e8 2a       	or	r14, r24
    478e:	f9 2a       	or	r15, r25
    4790:	0a 2b       	or	r16, r26
    4792:	1b 2b       	or	r17, r27
    4794:	a5 c0       	rjmp	.+330    	; 0x48e0 <__pack_f+0x178>
    4796:	84 30       	cpi	r24, 0x04	; 4
    4798:	09 f4       	brne	.+2      	; 0x479c <__pack_f+0x34>
    479a:	9f c0       	rjmp	.+318    	; 0x48da <__pack_f+0x172>
    479c:	82 30       	cpi	r24, 0x02	; 2
    479e:	21 f4       	brne	.+8      	; 0x47a8 <__pack_f+0x40>
    47a0:	ee 24       	eor	r14, r14
    47a2:	ff 24       	eor	r15, r15
    47a4:	87 01       	movw	r16, r14
    47a6:	05 c0       	rjmp	.+10     	; 0x47b2 <__pack_f+0x4a>
    47a8:	e1 14       	cp	r14, r1
    47aa:	f1 04       	cpc	r15, r1
    47ac:	01 05       	cpc	r16, r1
    47ae:	11 05       	cpc	r17, r1
    47b0:	19 f4       	brne	.+6      	; 0x47b8 <__pack_f+0x50>
    47b2:	e0 e0       	ldi	r30, 0x00	; 0
    47b4:	f0 e0       	ldi	r31, 0x00	; 0
    47b6:	96 c0       	rjmp	.+300    	; 0x48e4 <__pack_f+0x17c>
    47b8:	62 81       	ldd	r22, Z+2	; 0x02
    47ba:	73 81       	ldd	r23, Z+3	; 0x03
    47bc:	9f ef       	ldi	r25, 0xFF	; 255
    47be:	62 38       	cpi	r22, 0x82	; 130
    47c0:	79 07       	cpc	r23, r25
    47c2:	0c f0       	brlt	.+2      	; 0x47c6 <__pack_f+0x5e>
    47c4:	5b c0       	rjmp	.+182    	; 0x487c <__pack_f+0x114>
    47c6:	22 e8       	ldi	r18, 0x82	; 130
    47c8:	3f ef       	ldi	r19, 0xFF	; 255
    47ca:	26 1b       	sub	r18, r22
    47cc:	37 0b       	sbc	r19, r23
    47ce:	2a 31       	cpi	r18, 0x1A	; 26
    47d0:	31 05       	cpc	r19, r1
    47d2:	2c f0       	brlt	.+10     	; 0x47de <__pack_f+0x76>
    47d4:	20 e0       	ldi	r18, 0x00	; 0
    47d6:	30 e0       	ldi	r19, 0x00	; 0
    47d8:	40 e0       	ldi	r20, 0x00	; 0
    47da:	50 e0       	ldi	r21, 0x00	; 0
    47dc:	2a c0       	rjmp	.+84     	; 0x4832 <__pack_f+0xca>
    47de:	b8 01       	movw	r22, r16
    47e0:	a7 01       	movw	r20, r14
    47e2:	02 2e       	mov	r0, r18
    47e4:	04 c0       	rjmp	.+8      	; 0x47ee <__pack_f+0x86>
    47e6:	76 95       	lsr	r23
    47e8:	67 95       	ror	r22
    47ea:	57 95       	ror	r21
    47ec:	47 95       	ror	r20
    47ee:	0a 94       	dec	r0
    47f0:	d2 f7       	brpl	.-12     	; 0x47e6 <__pack_f+0x7e>
    47f2:	81 e0       	ldi	r24, 0x01	; 1
    47f4:	90 e0       	ldi	r25, 0x00	; 0
    47f6:	a0 e0       	ldi	r26, 0x00	; 0
    47f8:	b0 e0       	ldi	r27, 0x00	; 0
    47fa:	04 c0       	rjmp	.+8      	; 0x4804 <__pack_f+0x9c>
    47fc:	88 0f       	add	r24, r24
    47fe:	99 1f       	adc	r25, r25
    4800:	aa 1f       	adc	r26, r26
    4802:	bb 1f       	adc	r27, r27
    4804:	2a 95       	dec	r18
    4806:	d2 f7       	brpl	.-12     	; 0x47fc <__pack_f+0x94>
    4808:	01 97       	sbiw	r24, 0x01	; 1
    480a:	a1 09       	sbc	r26, r1
    480c:	b1 09       	sbc	r27, r1
    480e:	8e 21       	and	r24, r14
    4810:	9f 21       	and	r25, r15
    4812:	a0 23       	and	r26, r16
    4814:	b1 23       	and	r27, r17
    4816:	00 97       	sbiw	r24, 0x00	; 0
    4818:	a1 05       	cpc	r26, r1
    481a:	b1 05       	cpc	r27, r1
    481c:	21 f0       	breq	.+8      	; 0x4826 <__pack_f+0xbe>
    481e:	81 e0       	ldi	r24, 0x01	; 1
    4820:	90 e0       	ldi	r25, 0x00	; 0
    4822:	a0 e0       	ldi	r26, 0x00	; 0
    4824:	b0 e0       	ldi	r27, 0x00	; 0
    4826:	9a 01       	movw	r18, r20
    4828:	ab 01       	movw	r20, r22
    482a:	28 2b       	or	r18, r24
    482c:	39 2b       	or	r19, r25
    482e:	4a 2b       	or	r20, r26
    4830:	5b 2b       	or	r21, r27
    4832:	da 01       	movw	r26, r20
    4834:	c9 01       	movw	r24, r18
    4836:	8f 77       	andi	r24, 0x7F	; 127
    4838:	90 70       	andi	r25, 0x00	; 0
    483a:	a0 70       	andi	r26, 0x00	; 0
    483c:	b0 70       	andi	r27, 0x00	; 0
    483e:	80 34       	cpi	r24, 0x40	; 64
    4840:	91 05       	cpc	r25, r1
    4842:	a1 05       	cpc	r26, r1
    4844:	b1 05       	cpc	r27, r1
    4846:	39 f4       	brne	.+14     	; 0x4856 <__pack_f+0xee>
    4848:	27 ff       	sbrs	r18, 7
    484a:	09 c0       	rjmp	.+18     	; 0x485e <__pack_f+0xf6>
    484c:	20 5c       	subi	r18, 0xC0	; 192
    484e:	3f 4f       	sbci	r19, 0xFF	; 255
    4850:	4f 4f       	sbci	r20, 0xFF	; 255
    4852:	5f 4f       	sbci	r21, 0xFF	; 255
    4854:	04 c0       	rjmp	.+8      	; 0x485e <__pack_f+0xf6>
    4856:	21 5c       	subi	r18, 0xC1	; 193
    4858:	3f 4f       	sbci	r19, 0xFF	; 255
    485a:	4f 4f       	sbci	r20, 0xFF	; 255
    485c:	5f 4f       	sbci	r21, 0xFF	; 255
    485e:	e0 e0       	ldi	r30, 0x00	; 0
    4860:	f0 e0       	ldi	r31, 0x00	; 0
    4862:	20 30       	cpi	r18, 0x00	; 0
    4864:	a0 e0       	ldi	r26, 0x00	; 0
    4866:	3a 07       	cpc	r19, r26
    4868:	a0 e0       	ldi	r26, 0x00	; 0
    486a:	4a 07       	cpc	r20, r26
    486c:	a0 e4       	ldi	r26, 0x40	; 64
    486e:	5a 07       	cpc	r21, r26
    4870:	10 f0       	brcs	.+4      	; 0x4876 <__pack_f+0x10e>
    4872:	e1 e0       	ldi	r30, 0x01	; 1
    4874:	f0 e0       	ldi	r31, 0x00	; 0
    4876:	79 01       	movw	r14, r18
    4878:	8a 01       	movw	r16, r20
    487a:	27 c0       	rjmp	.+78     	; 0x48ca <__pack_f+0x162>
    487c:	60 38       	cpi	r22, 0x80	; 128
    487e:	71 05       	cpc	r23, r1
    4880:	64 f5       	brge	.+88     	; 0x48da <__pack_f+0x172>
    4882:	fb 01       	movw	r30, r22
    4884:	e1 58       	subi	r30, 0x81	; 129
    4886:	ff 4f       	sbci	r31, 0xFF	; 255
    4888:	d8 01       	movw	r26, r16
    488a:	c7 01       	movw	r24, r14
    488c:	8f 77       	andi	r24, 0x7F	; 127
    488e:	90 70       	andi	r25, 0x00	; 0
    4890:	a0 70       	andi	r26, 0x00	; 0
    4892:	b0 70       	andi	r27, 0x00	; 0
    4894:	80 34       	cpi	r24, 0x40	; 64
    4896:	91 05       	cpc	r25, r1
    4898:	a1 05       	cpc	r26, r1
    489a:	b1 05       	cpc	r27, r1
    489c:	39 f4       	brne	.+14     	; 0x48ac <__pack_f+0x144>
    489e:	e7 fe       	sbrs	r14, 7
    48a0:	0d c0       	rjmp	.+26     	; 0x48bc <__pack_f+0x154>
    48a2:	80 e4       	ldi	r24, 0x40	; 64
    48a4:	90 e0       	ldi	r25, 0x00	; 0
    48a6:	a0 e0       	ldi	r26, 0x00	; 0
    48a8:	b0 e0       	ldi	r27, 0x00	; 0
    48aa:	04 c0       	rjmp	.+8      	; 0x48b4 <__pack_f+0x14c>
    48ac:	8f e3       	ldi	r24, 0x3F	; 63
    48ae:	90 e0       	ldi	r25, 0x00	; 0
    48b0:	a0 e0       	ldi	r26, 0x00	; 0
    48b2:	b0 e0       	ldi	r27, 0x00	; 0
    48b4:	e8 0e       	add	r14, r24
    48b6:	f9 1e       	adc	r15, r25
    48b8:	0a 1f       	adc	r16, r26
    48ba:	1b 1f       	adc	r17, r27
    48bc:	17 ff       	sbrs	r17, 7
    48be:	05 c0       	rjmp	.+10     	; 0x48ca <__pack_f+0x162>
    48c0:	16 95       	lsr	r17
    48c2:	07 95       	ror	r16
    48c4:	f7 94       	ror	r15
    48c6:	e7 94       	ror	r14
    48c8:	31 96       	adiw	r30, 0x01	; 1
    48ca:	87 e0       	ldi	r24, 0x07	; 7
    48cc:	16 95       	lsr	r17
    48ce:	07 95       	ror	r16
    48d0:	f7 94       	ror	r15
    48d2:	e7 94       	ror	r14
    48d4:	8a 95       	dec	r24
    48d6:	d1 f7       	brne	.-12     	; 0x48cc <__pack_f+0x164>
    48d8:	05 c0       	rjmp	.+10     	; 0x48e4 <__pack_f+0x17c>
    48da:	ee 24       	eor	r14, r14
    48dc:	ff 24       	eor	r15, r15
    48de:	87 01       	movw	r16, r14
    48e0:	ef ef       	ldi	r30, 0xFF	; 255
    48e2:	f0 e0       	ldi	r31, 0x00	; 0
    48e4:	6e 2f       	mov	r22, r30
    48e6:	67 95       	ror	r22
    48e8:	66 27       	eor	r22, r22
    48ea:	67 95       	ror	r22
    48ec:	90 2f       	mov	r25, r16
    48ee:	9f 77       	andi	r25, 0x7F	; 127
    48f0:	d7 94       	ror	r13
    48f2:	dd 24       	eor	r13, r13
    48f4:	d7 94       	ror	r13
    48f6:	8e 2f       	mov	r24, r30
    48f8:	86 95       	lsr	r24
    48fa:	49 2f       	mov	r20, r25
    48fc:	46 2b       	or	r20, r22
    48fe:	58 2f       	mov	r21, r24
    4900:	5d 29       	or	r21, r13
    4902:	b7 01       	movw	r22, r14
    4904:	ca 01       	movw	r24, r20
    4906:	1f 91       	pop	r17
    4908:	0f 91       	pop	r16
    490a:	ff 90       	pop	r15
    490c:	ef 90       	pop	r14
    490e:	df 90       	pop	r13
    4910:	08 95       	ret

00004912 <__unpack_f>:
    4912:	fc 01       	movw	r30, r24
    4914:	db 01       	movw	r26, r22
    4916:	40 81       	ld	r20, Z
    4918:	51 81       	ldd	r21, Z+1	; 0x01
    491a:	22 81       	ldd	r18, Z+2	; 0x02
    491c:	62 2f       	mov	r22, r18
    491e:	6f 77       	andi	r22, 0x7F	; 127
    4920:	70 e0       	ldi	r23, 0x00	; 0
    4922:	22 1f       	adc	r18, r18
    4924:	22 27       	eor	r18, r18
    4926:	22 1f       	adc	r18, r18
    4928:	93 81       	ldd	r25, Z+3	; 0x03
    492a:	89 2f       	mov	r24, r25
    492c:	88 0f       	add	r24, r24
    492e:	82 2b       	or	r24, r18
    4930:	28 2f       	mov	r18, r24
    4932:	30 e0       	ldi	r19, 0x00	; 0
    4934:	99 1f       	adc	r25, r25
    4936:	99 27       	eor	r25, r25
    4938:	99 1f       	adc	r25, r25
    493a:	11 96       	adiw	r26, 0x01	; 1
    493c:	9c 93       	st	X, r25
    493e:	11 97       	sbiw	r26, 0x01	; 1
    4940:	21 15       	cp	r18, r1
    4942:	31 05       	cpc	r19, r1
    4944:	a9 f5       	brne	.+106    	; 0x49b0 <__unpack_f+0x9e>
    4946:	41 15       	cp	r20, r1
    4948:	51 05       	cpc	r21, r1
    494a:	61 05       	cpc	r22, r1
    494c:	71 05       	cpc	r23, r1
    494e:	11 f4       	brne	.+4      	; 0x4954 <__unpack_f+0x42>
    4950:	82 e0       	ldi	r24, 0x02	; 2
    4952:	37 c0       	rjmp	.+110    	; 0x49c2 <__unpack_f+0xb0>
    4954:	82 e8       	ldi	r24, 0x82	; 130
    4956:	9f ef       	ldi	r25, 0xFF	; 255
    4958:	13 96       	adiw	r26, 0x03	; 3
    495a:	9c 93       	st	X, r25
    495c:	8e 93       	st	-X, r24
    495e:	12 97       	sbiw	r26, 0x02	; 2
    4960:	9a 01       	movw	r18, r20
    4962:	ab 01       	movw	r20, r22
    4964:	67 e0       	ldi	r22, 0x07	; 7
    4966:	22 0f       	add	r18, r18
    4968:	33 1f       	adc	r19, r19
    496a:	44 1f       	adc	r20, r20
    496c:	55 1f       	adc	r21, r21
    496e:	6a 95       	dec	r22
    4970:	d1 f7       	brne	.-12     	; 0x4966 <__unpack_f+0x54>
    4972:	83 e0       	ldi	r24, 0x03	; 3
    4974:	8c 93       	st	X, r24
    4976:	0d c0       	rjmp	.+26     	; 0x4992 <__unpack_f+0x80>
    4978:	22 0f       	add	r18, r18
    497a:	33 1f       	adc	r19, r19
    497c:	44 1f       	adc	r20, r20
    497e:	55 1f       	adc	r21, r21
    4980:	12 96       	adiw	r26, 0x02	; 2
    4982:	8d 91       	ld	r24, X+
    4984:	9c 91       	ld	r25, X
    4986:	13 97       	sbiw	r26, 0x03	; 3
    4988:	01 97       	sbiw	r24, 0x01	; 1
    498a:	13 96       	adiw	r26, 0x03	; 3
    498c:	9c 93       	st	X, r25
    498e:	8e 93       	st	-X, r24
    4990:	12 97       	sbiw	r26, 0x02	; 2
    4992:	20 30       	cpi	r18, 0x00	; 0
    4994:	80 e0       	ldi	r24, 0x00	; 0
    4996:	38 07       	cpc	r19, r24
    4998:	80 e0       	ldi	r24, 0x00	; 0
    499a:	48 07       	cpc	r20, r24
    499c:	80 e4       	ldi	r24, 0x40	; 64
    499e:	58 07       	cpc	r21, r24
    49a0:	58 f3       	brcs	.-42     	; 0x4978 <__unpack_f+0x66>
    49a2:	14 96       	adiw	r26, 0x04	; 4
    49a4:	2d 93       	st	X+, r18
    49a6:	3d 93       	st	X+, r19
    49a8:	4d 93       	st	X+, r20
    49aa:	5c 93       	st	X, r21
    49ac:	17 97       	sbiw	r26, 0x07	; 7
    49ae:	08 95       	ret
    49b0:	2f 3f       	cpi	r18, 0xFF	; 255
    49b2:	31 05       	cpc	r19, r1
    49b4:	79 f4       	brne	.+30     	; 0x49d4 <__unpack_f+0xc2>
    49b6:	41 15       	cp	r20, r1
    49b8:	51 05       	cpc	r21, r1
    49ba:	61 05       	cpc	r22, r1
    49bc:	71 05       	cpc	r23, r1
    49be:	19 f4       	brne	.+6      	; 0x49c6 <__unpack_f+0xb4>
    49c0:	84 e0       	ldi	r24, 0x04	; 4
    49c2:	8c 93       	st	X, r24
    49c4:	08 95       	ret
    49c6:	64 ff       	sbrs	r22, 4
    49c8:	03 c0       	rjmp	.+6      	; 0x49d0 <__unpack_f+0xbe>
    49ca:	81 e0       	ldi	r24, 0x01	; 1
    49cc:	8c 93       	st	X, r24
    49ce:	12 c0       	rjmp	.+36     	; 0x49f4 <__unpack_f+0xe2>
    49d0:	1c 92       	st	X, r1
    49d2:	10 c0       	rjmp	.+32     	; 0x49f4 <__unpack_f+0xe2>
    49d4:	2f 57       	subi	r18, 0x7F	; 127
    49d6:	30 40       	sbci	r19, 0x00	; 0
    49d8:	13 96       	adiw	r26, 0x03	; 3
    49da:	3c 93       	st	X, r19
    49dc:	2e 93       	st	-X, r18
    49de:	12 97       	sbiw	r26, 0x02	; 2
    49e0:	83 e0       	ldi	r24, 0x03	; 3
    49e2:	8c 93       	st	X, r24
    49e4:	87 e0       	ldi	r24, 0x07	; 7
    49e6:	44 0f       	add	r20, r20
    49e8:	55 1f       	adc	r21, r21
    49ea:	66 1f       	adc	r22, r22
    49ec:	77 1f       	adc	r23, r23
    49ee:	8a 95       	dec	r24
    49f0:	d1 f7       	brne	.-12     	; 0x49e6 <__unpack_f+0xd4>
    49f2:	70 64       	ori	r23, 0x40	; 64
    49f4:	14 96       	adiw	r26, 0x04	; 4
    49f6:	4d 93       	st	X+, r20
    49f8:	5d 93       	st	X+, r21
    49fa:	6d 93       	st	X+, r22
    49fc:	7c 93       	st	X, r23
    49fe:	17 97       	sbiw	r26, 0x07	; 7
    4a00:	08 95       	ret

00004a02 <__fpcmp_parts_f>:
    4a02:	1f 93       	push	r17
    4a04:	dc 01       	movw	r26, r24
    4a06:	fb 01       	movw	r30, r22
    4a08:	9c 91       	ld	r25, X
    4a0a:	92 30       	cpi	r25, 0x02	; 2
    4a0c:	08 f4       	brcc	.+2      	; 0x4a10 <__fpcmp_parts_f+0xe>
    4a0e:	47 c0       	rjmp	.+142    	; 0x4a9e <__fpcmp_parts_f+0x9c>
    4a10:	80 81       	ld	r24, Z
    4a12:	82 30       	cpi	r24, 0x02	; 2
    4a14:	08 f4       	brcc	.+2      	; 0x4a18 <__fpcmp_parts_f+0x16>
    4a16:	43 c0       	rjmp	.+134    	; 0x4a9e <__fpcmp_parts_f+0x9c>
    4a18:	94 30       	cpi	r25, 0x04	; 4
    4a1a:	51 f4       	brne	.+20     	; 0x4a30 <__fpcmp_parts_f+0x2e>
    4a1c:	11 96       	adiw	r26, 0x01	; 1
    4a1e:	1c 91       	ld	r17, X
    4a20:	84 30       	cpi	r24, 0x04	; 4
    4a22:	99 f5       	brne	.+102    	; 0x4a8a <__fpcmp_parts_f+0x88>
    4a24:	81 81       	ldd	r24, Z+1	; 0x01
    4a26:	68 2f       	mov	r22, r24
    4a28:	70 e0       	ldi	r23, 0x00	; 0
    4a2a:	61 1b       	sub	r22, r17
    4a2c:	71 09       	sbc	r23, r1
    4a2e:	3f c0       	rjmp	.+126    	; 0x4aae <__fpcmp_parts_f+0xac>
    4a30:	84 30       	cpi	r24, 0x04	; 4
    4a32:	21 f0       	breq	.+8      	; 0x4a3c <__fpcmp_parts_f+0x3a>
    4a34:	92 30       	cpi	r25, 0x02	; 2
    4a36:	31 f4       	brne	.+12     	; 0x4a44 <__fpcmp_parts_f+0x42>
    4a38:	82 30       	cpi	r24, 0x02	; 2
    4a3a:	b9 f1       	breq	.+110    	; 0x4aaa <__fpcmp_parts_f+0xa8>
    4a3c:	81 81       	ldd	r24, Z+1	; 0x01
    4a3e:	88 23       	and	r24, r24
    4a40:	89 f1       	breq	.+98     	; 0x4aa4 <__fpcmp_parts_f+0xa2>
    4a42:	2d c0       	rjmp	.+90     	; 0x4a9e <__fpcmp_parts_f+0x9c>
    4a44:	11 96       	adiw	r26, 0x01	; 1
    4a46:	1c 91       	ld	r17, X
    4a48:	11 97       	sbiw	r26, 0x01	; 1
    4a4a:	82 30       	cpi	r24, 0x02	; 2
    4a4c:	f1 f0       	breq	.+60     	; 0x4a8a <__fpcmp_parts_f+0x88>
    4a4e:	81 81       	ldd	r24, Z+1	; 0x01
    4a50:	18 17       	cp	r17, r24
    4a52:	d9 f4       	brne	.+54     	; 0x4a8a <__fpcmp_parts_f+0x88>
    4a54:	12 96       	adiw	r26, 0x02	; 2
    4a56:	2d 91       	ld	r18, X+
    4a58:	3c 91       	ld	r19, X
    4a5a:	13 97       	sbiw	r26, 0x03	; 3
    4a5c:	82 81       	ldd	r24, Z+2	; 0x02
    4a5e:	93 81       	ldd	r25, Z+3	; 0x03
    4a60:	82 17       	cp	r24, r18
    4a62:	93 07       	cpc	r25, r19
    4a64:	94 f0       	brlt	.+36     	; 0x4a8a <__fpcmp_parts_f+0x88>
    4a66:	28 17       	cp	r18, r24
    4a68:	39 07       	cpc	r19, r25
    4a6a:	bc f0       	brlt	.+46     	; 0x4a9a <__fpcmp_parts_f+0x98>
    4a6c:	14 96       	adiw	r26, 0x04	; 4
    4a6e:	8d 91       	ld	r24, X+
    4a70:	9d 91       	ld	r25, X+
    4a72:	0d 90       	ld	r0, X+
    4a74:	bc 91       	ld	r27, X
    4a76:	a0 2d       	mov	r26, r0
    4a78:	24 81       	ldd	r18, Z+4	; 0x04
    4a7a:	35 81       	ldd	r19, Z+5	; 0x05
    4a7c:	46 81       	ldd	r20, Z+6	; 0x06
    4a7e:	57 81       	ldd	r21, Z+7	; 0x07
    4a80:	28 17       	cp	r18, r24
    4a82:	39 07       	cpc	r19, r25
    4a84:	4a 07       	cpc	r20, r26
    4a86:	5b 07       	cpc	r21, r27
    4a88:	18 f4       	brcc	.+6      	; 0x4a90 <__fpcmp_parts_f+0x8e>
    4a8a:	11 23       	and	r17, r17
    4a8c:	41 f0       	breq	.+16     	; 0x4a9e <__fpcmp_parts_f+0x9c>
    4a8e:	0a c0       	rjmp	.+20     	; 0x4aa4 <__fpcmp_parts_f+0xa2>
    4a90:	82 17       	cp	r24, r18
    4a92:	93 07       	cpc	r25, r19
    4a94:	a4 07       	cpc	r26, r20
    4a96:	b5 07       	cpc	r27, r21
    4a98:	40 f4       	brcc	.+16     	; 0x4aaa <__fpcmp_parts_f+0xa8>
    4a9a:	11 23       	and	r17, r17
    4a9c:	19 f0       	breq	.+6      	; 0x4aa4 <__fpcmp_parts_f+0xa2>
    4a9e:	61 e0       	ldi	r22, 0x01	; 1
    4aa0:	70 e0       	ldi	r23, 0x00	; 0
    4aa2:	05 c0       	rjmp	.+10     	; 0x4aae <__fpcmp_parts_f+0xac>
    4aa4:	6f ef       	ldi	r22, 0xFF	; 255
    4aa6:	7f ef       	ldi	r23, 0xFF	; 255
    4aa8:	02 c0       	rjmp	.+4      	; 0x4aae <__fpcmp_parts_f+0xac>
    4aaa:	60 e0       	ldi	r22, 0x00	; 0
    4aac:	70 e0       	ldi	r23, 0x00	; 0
    4aae:	cb 01       	movw	r24, r22
    4ab0:	1f 91       	pop	r17
    4ab2:	08 95       	ret

00004ab4 <__udivmodhi4>:
    4ab4:	aa 1b       	sub	r26, r26
    4ab6:	bb 1b       	sub	r27, r27
    4ab8:	51 e1       	ldi	r21, 0x11	; 17
    4aba:	07 c0       	rjmp	.+14     	; 0x4aca <__udivmodhi4_ep>

00004abc <__udivmodhi4_loop>:
    4abc:	aa 1f       	adc	r26, r26
    4abe:	bb 1f       	adc	r27, r27
    4ac0:	a6 17       	cp	r26, r22
    4ac2:	b7 07       	cpc	r27, r23
    4ac4:	10 f0       	brcs	.+4      	; 0x4aca <__udivmodhi4_ep>
    4ac6:	a6 1b       	sub	r26, r22
    4ac8:	b7 0b       	sbc	r27, r23

00004aca <__udivmodhi4_ep>:
    4aca:	88 1f       	adc	r24, r24
    4acc:	99 1f       	adc	r25, r25
    4ace:	5a 95       	dec	r21
    4ad0:	a9 f7       	brne	.-22     	; 0x4abc <__udivmodhi4_loop>
    4ad2:	80 95       	com	r24
    4ad4:	90 95       	com	r25
    4ad6:	bc 01       	movw	r22, r24
    4ad8:	cd 01       	movw	r24, r26
    4ada:	08 95       	ret

00004adc <__prologue_saves__>:
    4adc:	2f 92       	push	r2
    4ade:	3f 92       	push	r3
    4ae0:	4f 92       	push	r4
    4ae2:	5f 92       	push	r5
    4ae4:	6f 92       	push	r6
    4ae6:	7f 92       	push	r7
    4ae8:	8f 92       	push	r8
    4aea:	9f 92       	push	r9
    4aec:	af 92       	push	r10
    4aee:	bf 92       	push	r11
    4af0:	cf 92       	push	r12
    4af2:	df 92       	push	r13
    4af4:	ef 92       	push	r14
    4af6:	ff 92       	push	r15
    4af8:	0f 93       	push	r16
    4afa:	1f 93       	push	r17
    4afc:	cf 93       	push	r28
    4afe:	df 93       	push	r29
    4b00:	cd b7       	in	r28, 0x3d	; 61
    4b02:	de b7       	in	r29, 0x3e	; 62
    4b04:	ca 1b       	sub	r28, r26
    4b06:	db 0b       	sbc	r29, r27
    4b08:	0f b6       	in	r0, 0x3f	; 63
    4b0a:	f8 94       	cli
    4b0c:	de bf       	out	0x3e, r29	; 62
    4b0e:	0f be       	out	0x3f, r0	; 63
    4b10:	cd bf       	out	0x3d, r28	; 61
    4b12:	19 94       	eijmp

00004b14 <__epilogue_restores__>:
    4b14:	2a 88       	ldd	r2, Y+18	; 0x12
    4b16:	39 88       	ldd	r3, Y+17	; 0x11
    4b18:	48 88       	ldd	r4, Y+16	; 0x10
    4b1a:	5f 84       	ldd	r5, Y+15	; 0x0f
    4b1c:	6e 84       	ldd	r6, Y+14	; 0x0e
    4b1e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4b20:	8c 84       	ldd	r8, Y+12	; 0x0c
    4b22:	9b 84       	ldd	r9, Y+11	; 0x0b
    4b24:	aa 84       	ldd	r10, Y+10	; 0x0a
    4b26:	b9 84       	ldd	r11, Y+9	; 0x09
    4b28:	c8 84       	ldd	r12, Y+8	; 0x08
    4b2a:	df 80       	ldd	r13, Y+7	; 0x07
    4b2c:	ee 80       	ldd	r14, Y+6	; 0x06
    4b2e:	fd 80       	ldd	r15, Y+5	; 0x05
    4b30:	0c 81       	ldd	r16, Y+4	; 0x04
    4b32:	1b 81       	ldd	r17, Y+3	; 0x03
    4b34:	aa 81       	ldd	r26, Y+2	; 0x02
    4b36:	b9 81       	ldd	r27, Y+1	; 0x01
    4b38:	ce 0f       	add	r28, r30
    4b3a:	d1 1d       	adc	r29, r1
    4b3c:	0f b6       	in	r0, 0x3f	; 63
    4b3e:	f8 94       	cli
    4b40:	de bf       	out	0x3e, r29	; 62
    4b42:	0f be       	out	0x3f, r0	; 63
    4b44:	cd bf       	out	0x3d, r28	; 61
    4b46:	ed 01       	movw	r28, r26
    4b48:	08 95       	ret

00004b4a <_exit>:
    4b4a:	f8 94       	cli

00004b4c <__stop_program>:
    4b4c:	ff cf       	rjmp	.-2      	; 0x4b4c <__stop_program>
